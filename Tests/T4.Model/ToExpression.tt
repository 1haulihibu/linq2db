<#@ template language="C#" debug="True" hostSpecific="True"               #>
<#@ output extension=".generated.cs"                                      #>
<#@ include file="..\..\Source\LinqToDB.Templates\ToExpression.ttinclude" #>
//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by ToExpression.tt template.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Linq.Expressions;

namespace Tests.T4.Model
{
	static class GeneratedExpressions
	{
<#
		ToExpression("NoReturn()", (Expression<Action<int,int>>)((x, y) => (x + y).ToString("X")));
		ToExpression("Multiply()", (Expression<Func<int,int,int>>)((x, y) => -x > 0 ? x + y : x / y));
		ToExpression("Multiply1()", (Expression<Func<DateTime,string,int>>)((x, y) => -x.Day + y[2]));
		ToExpression("Multiply2()", (Expression<Func<int,int,int,DateTime>>)((x, y, z) => new DateTime(1999, y, z)));
		ToExpression("Multiply3()", (Expression<Func<DateTime>>)(() => new DateTime()));
		ToExpression("Method1()", (Expression<Func<int[]>>)(() => new [] { 2, 3, 4 }));
		ToExpression("Method2()", (Expression<Func<int[]>>)(() => new int[0]));
		ToExpression("Method3()", (Expression<Func<int[]>>)(() => new int[2]));
		ToExpression("Method4()", (Expression<Func<int,int[]>>)(x => new int[2] { int.MaxValue, x }));
#>
	}
}

