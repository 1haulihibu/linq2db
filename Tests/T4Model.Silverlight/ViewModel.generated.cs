//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/igor-tkachev/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Windows.Media;

namespace T4Model.Silverlight
{
	public partial class ViewModel : INotifyPropertyChanged
	{
		#region NotifiedProp1 : double

		private double _NotifiedProp1;
		public  double  NotifiedProp1
		{
			get { return _NotifiedProp1; }
			set
			{
				if (_NotifiedProp1 != value)
				{
					BeforeNotifiedProp1Changed(value);
					_NotifiedProp1 = value;
					AfterNotifiedProp1Changed();

					OnNotifiedProp1Changed();
					OnNotifiedBrush1Changed();
				}
			}
		}

		partial void BeforeNotifiedProp1Changed(double newValue);
		partial void AfterNotifiedProp1Changed ();
		private void OnNotifiedProp1Changed    ()                { OnPropertyChanged("NotifiedProp1"); }

		#endregion

		#region NotifiedProp2 : int

		private int _NotifiedProp2 = 500;
		public  int  NotifiedProp2
		{
			get { return _NotifiedProp2; }
			set
			{
				if (_NotifiedProp2 != value)
				{
					BeforeNotifiedProp2Changed(value);
					_NotifiedProp2 = value;
					AfterNotifiedProp2Changed();

					OnNotifiedProp1Changed();
					OnNotifiedProp2Changed();
				}
			}
		}

		partial void BeforeNotifiedProp2Changed(int newValue);
		partial void AfterNotifiedProp2Changed ();
		private void OnNotifiedProp2Changed    ()             { OnPropertyChanged("NotifiedProp2"); }

		#endregion

		#region NotifiedBrush1 : Brush

		public Brush NotifiedBrush1
		{
			get { return GetBrush(); }
		}

		private void OnNotifiedBrush1Changed() { OnPropertyChanged("NotifiedBrush1"); }

		#endregion

		#region INotifyPropertyChanged

		public event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			if (PropertyChanged != null)
			{
#if SILVERLIGHT
				if (System.Windows.Deployment.Current.Dispatcher.CheckAccess())
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
				else
					System.Windows.Deployment.Current.Dispatcher.BeginInvoke(
						() => PropertyChanged(this, new PropertyChangedEventArgs(propertyName)));
#else
#endif
			}
		}

		#endregion
	}
}
