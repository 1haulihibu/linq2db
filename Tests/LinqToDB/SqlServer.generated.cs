//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/igor-tkachev/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Mapping;
using LinqToDB.SqlBuilder;

namespace DataModel
{
	/// <summary>
	/// Database       : Northwind
	/// Data Source    : .
	/// Server Version : 10.50.4000
	/// </summary>
	public partial class NorthwindDB : LinqToDB.Data.DataConnection
	{
		public NorthwindDB()
		{
		}

		public NorthwindDB(string configuration)
			: base(configuration)
		{
		}

		#region FreeTextTable

		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}

		public class FreeTextTableExpressionAttribute : Sql.TableExpressionAttribute
		{
			public FreeTextTableExpressionAttribute()
				: base("")
			{
			}

			private string Convert(string value)
			{
				if (value != null && value.Length > 0 && value[0] != '[')
					return "[" + value + "]";
				return value;
			}

			public override void SetTable(SqlTable table, MemberInfo member, IEnumerable<Expression> expArgs, IEnumerable<ISqlExpression> sqlArgs)
			{
				var aargs  = sqlArgs.ToArray();
				var arr    = ConvertArgs(member, aargs).ToList();
				var method = (MethodInfo)member;

				{
					var ttype  = method.GetGenericArguments()[0];
					var tbl    = new SqlTable(ttype);

					var database     = Convert(tbl.Database);
					var owner        = Convert(tbl.Owner);
					var physicalName = Convert(tbl.PhysicalName);

					var name = "";

					if (database != null)
						name = database + "." + (owner == null ? "." : owner + ".");
					else if (owner != null)
						name = owner + ".";

					name += physicalName;

					arr.Add(new SqlExpression(name, Precedence.Primary));
				}

				{
					var field = ((ConstantExpression)expArgs.First()).Value;

					if (field is string)
					{
						arr[0] = new SqlExpression(field.ToString(), Precedence.Primary);
					}
					else if (field is LambdaExpression)
					{
						var body = ((LambdaExpression)field).Body;

						if (body is MemberExpression)
						{
							var name = ((MemberExpression)body).Member.Name;

							if (name.Length > 0 && name[0] != '[')
								name = "[" + name + "]";

							arr[0] = new SqlExpression(name, Precedence.Primary);
						}
					}
				}

				table.SqlTableType   = SqlTableType.Expression;
				table.Name           = "FREETEXTTABLE({6}, {2}, {3}) {1}";
				table.TableArguments = arr.ToArray();
			}
		}

		[FreeTextTableExpression]
		public Table<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				field,
				text);
		}

		[FreeTextTableExpression]
		public Table<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				fieldSelector,
				text);
		}

		#endregion
	}

	public static partial class NorthwindDBStoredProcedures
	{
		#region TenMostExpensiveProducts

		public partial class TenMostExpensiveProductsResult
		{
			public string   TenMostExpensiveProducts { get; set; }
			public decimal? UnitPrice                { get; set; }
		}

		public static IEnumerable<TenMostExpensiveProductsResult> TenMostExpensiveProducts(this DataConnection dataConnection)
		{
			return dataConnection.QueryProc<TenMostExpensiveProductsResult>("[Northwind]..[Ten Most Expensive Products]");
		}

		#endregion

		#region EmployeeSalesByCountry

		public partial class EmployeeSalesByCountryResult
		{
			public string    Country     { get; set; }
			public string    LastName    { get; set; }
			public string    FirstName   { get; set; }
			public DateTime? ShippedDate { get; set; }
			public int       OrderID     { get; set; }
			public decimal?  SaleAmount  { get; set; }
		}

		public static IEnumerable<EmployeeSalesByCountryResult> EmployeeSalesByCountry(this DataConnection dataConnection, DateTime? @Beginning_Date, DateTime? @Ending_Date)
		{
			return dataConnection.QueryProc<EmployeeSalesByCountryResult>("[Northwind]..[Employee Sales by Country]",
				new DataParameter("@Beginning_Date", @Beginning_Date),
				new DataParameter("@Ending_Date",    @Ending_Date));
		}

		#endregion

		#region SalesByYear

		public partial class SalesByYearResult
		{
			public DateTime? ShippedDate { get; set; }
			public int       OrderID     { get; set; }
			public decimal?  Subtotal    { get; set; }
			public string    Year        { get; set; }
		}

		public static IEnumerable<SalesByYearResult> SalesByYear(this DataConnection dataConnection, DateTime? @Beginning_Date, DateTime? @Ending_Date)
		{
			return dataConnection.QueryProc<SalesByYearResult>("[Northwind]..[Sales by Year]",
				new DataParameter("@Beginning_Date", @Beginning_Date),
				new DataParameter("@Ending_Date",    @Ending_Date));
		}

		#endregion

		#region CustOrdersDetail

		public partial class CustOrdersDetailResult
		{
			public string   ProductName   { get; set; }
			public decimal  UnitPrice     { get; set; }
			public short    Quantity      { get; set; }
			public int?     Discount      { get; set; }
			public decimal? ExtendedPrice { get; set; }
		}

		public static IEnumerable<CustOrdersDetailResult> CustOrdersDetail(this DataConnection dataConnection, int? @OrderID)
		{
			return dataConnection.QueryProc<CustOrdersDetailResult>("[Northwind]..[CustOrdersDetail]",
				new DataParameter("@OrderID", @OrderID));
		}

		#endregion

		#region CustOrdersOrders

		public partial class CustOrdersOrdersResult
		{
			public int       OrderID      { get; set; }
			public DateTime? OrderDate    { get; set; }
			public DateTime? RequiredDate { get; set; }
			public DateTime? ShippedDate  { get; set; }
		}

		public static IEnumerable<CustOrdersOrdersResult> CustOrdersOrders(this DataConnection dataConnection, string @CustomerID)
		{
			return dataConnection.QueryProc<CustOrdersOrdersResult>("[Northwind]..[CustOrdersOrders]",
				new DataParameter("@CustomerID", @CustomerID));
		}

		#endregion

		#region CustOrderHist

		public partial class CustOrderHistResult
		{
			public string ProductName { get; set; }
			public int?   Total       { get; set; }
		}

		public static IEnumerable<CustOrderHistResult> CustOrderHist(this DataConnection dataConnection, string @CustomerID)
		{
			return dataConnection.QueryProc<CustOrderHistResult>("[Northwind]..[CustOrderHist]",
				new DataParameter("@CustomerID", @CustomerID));
		}

		#endregion

		#region SalesByCategory

		public partial class SalesByCategoryResult
		{
			public string   ProductName   { get; set; }
			public decimal? TotalPurchase { get; set; }
		}

		public static IEnumerable<SalesByCategoryResult> SalesByCategory(this DataConnection dataConnection, string @CategoryName, string @OrdYear)
		{
			return dataConnection.QueryProc<SalesByCategoryResult>("[Northwind]..[SalesByCategory]",
				new DataParameter("@CategoryName", @CategoryName),
				new DataParameter("@OrdYear",      @OrdYear));
		}

		#endregion
	}

	/// <summary>
	/// Database       : TestData
	/// Data Source    : DBHost\SQLSERVER2008
	/// Server Version : 10.50.4000
	/// </summary>
	public partial class TestDataDB : LinqToDB.Data.DataConnection
	{
		public TestDataDB()
		{
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
		}

		#region Table Functions

		#region GetParentByID

		public partial class GetParentByIDResult
		{
			public int? ParentID { get; set; }
			public int? Value1   { get; set; }
		}

		[Sql.TableFunction(Name="GetParentByID")]
		public Table<GetParentByIDResult> GetParentByID(int? @id)
		{
			return GetTable<GetParentByIDResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				@id);
		}

		#endregion

		#endregion

		#region FreeTextTable

		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}

		public class FreeTextTableExpressionAttribute : Sql.TableExpressionAttribute
		{
			public FreeTextTableExpressionAttribute()
				: base("")
			{
			}

			private string Convert(string value)
			{
				if (value != null && value.Length > 0 && value[0] != '[')
					return "[" + value + "]";
				return value;
			}

			public override void SetTable(SqlTable table, MemberInfo member, IEnumerable<Expression> expArgs, IEnumerable<ISqlExpression> sqlArgs)
			{
				var aargs  = sqlArgs.ToArray();
				var arr    = ConvertArgs(member, aargs).ToList();
				var method = (MethodInfo)member;

				{
					var ttype  = method.GetGenericArguments()[0];
					var tbl    = new SqlTable(ttype);

					var database     = Convert(tbl.Database);
					var owner        = Convert(tbl.Owner);
					var physicalName = Convert(tbl.PhysicalName);

					var name = "";

					if (database != null)
						name = database + "." + (owner == null ? "." : owner + ".");
					else if (owner != null)
						name = owner + ".";

					name += physicalName;

					arr.Add(new SqlExpression(name, Precedence.Primary));
				}

				{
					var field = ((ConstantExpression)expArgs.First()).Value;

					if (field is string)
					{
						arr[0] = new SqlExpression(field.ToString(), Precedence.Primary);
					}
					else if (field is LambdaExpression)
					{
						var body = ((LambdaExpression)field).Body;

						if (body is MemberExpression)
						{
							var name = ((MemberExpression)body).Member.Name;

							if (name.Length > 0 && name[0] != '[')
								name = "[" + name + "]";

							arr[0] = new SqlExpression(name, Precedence.Primary);
						}
					}
				}

				table.SqlTableType   = SqlTableType.Expression;
				table.Name           = "FREETEXTTABLE({6}, {2}, {3}) {1}";
				table.TableArguments = arr.ToArray();
			}
		}

		[FreeTextTableExpression]
		public Table<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				field,
				text);
		}

		[FreeTextTableExpression]
		public Table<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				fieldSelector,
				text);
		}

		#endregion
	}

	public static partial class TestDataDBStoredProcedures
	{
		#region Person_SelectByKey

		public partial class Person_SelectByKeyResult
		{
			public int    PersonID   { get; set; }
			public string FirstName  { get; set; }
			public string LastName   { get; set; }
			public string MiddleName { get; set; }
			public string Gender     { get; set; }
		}

		public static IEnumerable<Person_SelectByKeyResult> Person_SelectByKey(this DataConnection dataConnection, int? @id)
		{
			return dataConnection.QueryProc<Person_SelectByKeyResult>("[TestData]..[Person_SelectByKey]",
				new DataParameter("@id", @id));
		}

		#endregion

		#region Person_SelectAll

		public partial class Person_SelectAllResult
		{
			public int    PersonID   { get; set; }
			public string FirstName  { get; set; }
			public string LastName   { get; set; }
			public string MiddleName { get; set; }
			public string Gender     { get; set; }
		}

		public static IEnumerable<Person_SelectAllResult> Person_SelectAll(this DataConnection dataConnection)
		{
			return dataConnection.QueryProc<Person_SelectAllResult>("[TestData]..[Person_SelectAll]");
		}

		#endregion

		#region Person_SelectByName

		public partial class Person_SelectByNameResult
		{
			public int    PersonID   { get; set; }
			public string FirstName  { get; set; }
			public string LastName   { get; set; }
			public string MiddleName { get; set; }
			public string Gender     { get; set; }
		}

		public static IEnumerable<Person_SelectByNameResult> Person_SelectByName(this DataConnection dataConnection, string @firstName, string @lastName)
		{
			return dataConnection.QueryProc<Person_SelectByNameResult>("[TestData]..[Person_SelectByName]",
				new DataParameter("@firstName", @firstName),
				new DataParameter("@lastName",  @lastName));
		}

		#endregion

		#region Person_SelectListByName

		public partial class Person_SelectListByNameResult
		{
			public int    PersonID   { get; set; }
			public string FirstName  { get; set; }
			public string LastName   { get; set; }
			public string MiddleName { get; set; }
			public string Gender     { get; set; }
		}

		public static IEnumerable<Person_SelectListByNameResult> Person_SelectListByName(this DataConnection dataConnection, string @firstName, string @lastName)
		{
			return dataConnection.QueryProc<Person_SelectListByNameResult>("[TestData]..[Person_SelectListByName]",
				new DataParameter("@firstName", @firstName),
				new DataParameter("@lastName",  @lastName));
		}

		#endregion

		#region Person_Insert

		public partial class Person_InsertResult
		{
			public int? PersonID { get; set; }
		}

		public static IEnumerable<Person_InsertResult> Person_Insert(this DataConnection dataConnection, string @FirstName, string @LastName, string @MiddleName, string @Gender)
		{
			return dataConnection.QueryProc<Person_InsertResult>("[TestData]..[Person_Insert]",
				new DataParameter("@FirstName",  @FirstName),
				new DataParameter("@LastName",   @LastName),
				new DataParameter("@MiddleName", @MiddleName),
				new DataParameter("@Gender",     @Gender));
		}

		#endregion

		#region Person_Insert_OutputParameter

		public static int Person_Insert_OutputParameter(this DataConnection dataConnection, string @FirstName, string @LastName, string @MiddleName, string @Gender, ref int? @PersonID)
		{
			var ret = dataConnection.ExecuteProc("[TestData]..[Person_Insert_OutputParameter]",
				new DataParameter("@FirstName",  @FirstName),
				new DataParameter("@LastName",   @LastName),
				new DataParameter("@MiddleName", @MiddleName),
				new DataParameter("@Gender",     @Gender),
				new DataParameter("@PersonID",   @PersonID)   { Direction = ParameterDirection.InputOutput });

			@PersonID   = Converter.ChangeTypeTo<int?>  (((IDbDataParameter)dataConnection.Command.Parameters["@PersonID"]).  Value);

			return ret;
		}

		#endregion

		#region Person_Update

		public static int Person_Update(this DataConnection dataConnection, int? @PersonID, string @FirstName, string @LastName, string @MiddleName, string @Gender)
		{
			return dataConnection.ExecuteProc("[TestData]..[Person_Update]",
				new DataParameter("@PersonID",   @PersonID),
				new DataParameter("@FirstName",  @FirstName),
				new DataParameter("@LastName",   @LastName),
				new DataParameter("@MiddleName", @MiddleName),
				new DataParameter("@Gender",     @Gender));
		}

		#endregion

		#region Person_Delete

		public static int Person_Delete(this DataConnection dataConnection, int? @PersonID)
		{
			return dataConnection.ExecuteProc("[TestData]..[Person_Delete]",
				new DataParameter("@PersonID", @PersonID));
		}

		#endregion

		#region Patient_SelectAll

		public partial class Patient_SelectAllResult
		{
			public int    PersonID   { get; set; }
			public string FirstName  { get; set; }
			public string LastName   { get; set; }
			public string MiddleName { get; set; }
			public string Gender     { get; set; }
			public string Diagnosis  { get; set; }
		}

		public static IEnumerable<Patient_SelectAllResult> Patient_SelectAll(this DataConnection dataConnection)
		{
			return dataConnection.QueryProc<Patient_SelectAllResult>("[TestData]..[Patient_SelectAll]");
		}

		#endregion

		#region Patient_SelectByName

		public partial class Patient_SelectByNameResult
		{
			public int    PersonID   { get; set; }
			public string FirstName  { get; set; }
			public string LastName   { get; set; }
			public string MiddleName { get; set; }
			public string Gender     { get; set; }
			public string Diagnosis  { get; set; }
		}

		public static IEnumerable<Patient_SelectByNameResult> Patient_SelectByName(this DataConnection dataConnection, string @firstName, string @lastName)
		{
			return dataConnection.QueryProc<Patient_SelectByNameResult>("[TestData]..[Patient_SelectByName]",
				new DataParameter("@firstName", @firstName),
				new DataParameter("@lastName",  @lastName));
		}

		#endregion

		#region OutRefTest

		public static int OutRefTest(this DataConnection dataConnection, int? @ID, ref int? @outputID, ref int? @inputOutputID, string @str, ref string @outputStr, ref string @inputOutputStr)
		{
			var ret = dataConnection.ExecuteProc("[TestData]..[OutRefTest]",
				new DataParameter("@ID",             @ID),
				new DataParameter("@outputID",       @outputID)       { Direction = ParameterDirection.InputOutput },
				new DataParameter("@inputOutputID",  @inputOutputID)  { Direction = ParameterDirection.InputOutput },
				new DataParameter("@str",            @str),
				new DataParameter("@outputStr",      @outputStr)      { Direction = ParameterDirection.InputOutput, Size = 50 },
				new DataParameter("@inputOutputStr", @inputOutputStr) { Direction = ParameterDirection.InputOutput, Size = 50 });

			@outputID       = Converter.ChangeTypeTo<int?>  (((IDbDataParameter)dataConnection.Command.Parameters["@outputID"]).      Value);
			@inputOutputID  = Converter.ChangeTypeTo<int?>  (((IDbDataParameter)dataConnection.Command.Parameters["@inputOutputID"]). Value);
			@outputStr      = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["@outputStr"]).     Value);
			@inputOutputStr = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["@inputOutputStr"]).Value);

			return ret;
		}

		#endregion

		#region OutRefEnumTest

		public static int OutRefEnumTest(this DataConnection dataConnection, string @str, ref string @outputStr, ref string @inputOutputStr)
		{
			var ret = dataConnection.ExecuteProc("[TestData]..[OutRefEnumTest]",
				new DataParameter("@str",            @str),
				new DataParameter("@outputStr",      @outputStr)      { Direction = ParameterDirection.InputOutput, Size = 50 },
				new DataParameter("@inputOutputStr", @inputOutputStr) { Direction = ParameterDirection.InputOutput, Size = 50 });

			@outputStr      = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["@outputStr"]).     Value);
			@inputOutputStr = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["@inputOutputStr"]).Value);

			return ret;
		}

		#endregion

		#region Scalar_DataReader

		public partial class Scalar_DataReaderResult
		{
			public int?   intField    { get; set; }
			public string stringField { get; set; }
		}

		public static IEnumerable<Scalar_DataReaderResult> Scalar_DataReader(this DataConnection dataConnection)
		{
			return dataConnection.QueryProc<Scalar_DataReaderResult>("[TestData]..[Scalar_DataReader]");
		}

		#endregion

		#region Scalar_OutputParameter

		public static int Scalar_OutputParameter(this DataConnection dataConnection, ref int? @outputInt, ref string @outputString)
		{
			var ret = dataConnection.ExecuteProc("[TestData]..[Scalar_OutputParameter]",
				new DataParameter("@outputInt",    @outputInt)    { Direction = ParameterDirection.InputOutput },
				new DataParameter("@outputString", @outputString) { Direction = ParameterDirection.InputOutput, Size = 50 });

			@outputInt    = Converter.ChangeTypeTo<int?>  (((IDbDataParameter)dataConnection.Command.Parameters["@outputInt"]).   Value);
			@outputString = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["@outputString"]).Value);

			return ret;
		}

		#endregion

		#region Scalar_ReturnParameterWithObject

		public partial class Scalar_ReturnParameterWithObjectResult
		{
			public int    PersonID   { get; set; }
			public string FirstName  { get; set; }
			public string LastName   { get; set; }
			public string MiddleName { get; set; }
			public string Gender     { get; set; }
		}

		public static IEnumerable<Scalar_ReturnParameterWithObjectResult> Scalar_ReturnParameterWithObject(this DataConnection dataConnection, int? @id)
		{
			return dataConnection.QueryProc<Scalar_ReturnParameterWithObjectResult>("[TestData]..[Scalar_ReturnParameterWithObject]",
				new DataParameter("@id", @id));
		}

		#endregion
	}

	public static partial class SqlFunctions
	{
		#region Scalar_ReturnParameter

		[Sql.Function(Name="Scalar_ReturnParameter", ServerSideOnly=true)]
		public static int? Scalar_ReturnParameter()
		{
			throw new InvalidOperationException();
		}

		#endregion
	}
}
