//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Mapping;

namespace SapHanaDataContext
{
	/// <summary>
	/// Database       : HB1
	/// Data Source    : betelgeuse
	/// Server Version : 01.00.80.0000
	/// </summary>
	public partial class HB1DB : LinqToDB.Data.DataConnection
	{
		public ITable<AllType>                   AllTypes                   { get { return this.GetTable<AllType>(); } }
		public ITable<AllTypesGeo>               AllTypesGeos               { get { return this.GetTable<AllTypesGeo>(); } }
		public ITable<BulkInsertLowerCaseColumn> BulkInsertLowerCaseColumns { get { return this.GetTable<BulkInsertLowerCaseColumn>(); } }
		public ITable<BulkInsertUpperCaseColumn> BulkInsertUpperCaseColumns { get { return this.GetTable<BulkInsertUpperCaseColumn>(); } }
		public ITable<Child>                     Children                   { get { return this.GetTable<Child>(); } }
		public ITable<Doctor>                    Doctors                    { get { return this.GetTable<Doctor>(); } }
		public ITable<GrandChild>                GrandChildren              { get { return this.GetTable<GrandChild>(); } }
		public ITable<IndexTable>                IndexTables                { get { return this.GetTable<IndexTable>(); } }
		public ITable<IndexTable2>               IndexTable2                { get { return this.GetTable<IndexTable2>(); } }
		public ITable<LinqDataType>              LinqDataTypes              { get { return this.GetTable<LinqDataType>(); } }
		public ITable<Parent>                    Parents                    { get { return this.GetTable<Parent>(); } }
		public ITable<ParentChildView>           ParentChildViews           { get { return this.GetTable<ParentChildView>(); } }
		public ITable<ParentView>                ParentViews                { get { return this.GetTable<ParentView>(); } }
		public ITable<Patient>                   Patients                   { get { return this.GetTable<Patient>(); } }
		public ITable<Person>                    People                     { get { return this.GetTable<Person>(); } }
		public ITable<TestIdentity>              TestIdentities             { get { return this.GetTable<TestIdentity>(); } }

		public HB1DB()
		{
			InitDataContext();
		}

		public HB1DB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		#region Table Functions

		#region GetParentByID

		[Sql.TableFunction(Name="GetParentByID")]
		public ITable<Parent> GetParentByID()
		{
			return GetTable<Parent>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				ID);
		}

		#endregion

		#endregion
	}

	[Table(Schema="TEST", Name="AllTypes")]
	public partial class AllType
	{
		[PrimaryKey, Identity] public int       ID                   { get; set; } // INTEGER
		[Column,     Nullable] public long?     bigintDataType       { get; set; } // BIGINT
		[Column,     Nullable] public short?    smallintDataType     { get; set; } // SMALLINT
		[Column,     Nullable] public decimal?  decimalDataType      { get; set; } // DECIMAL
		[Column,     Nullable] public decimal?  smalldecimalDataType { get; set; } // SMALLDECIMAL
		[Column,     Nullable] public int?      intDataType          { get; set; } // INTEGER
		[Column,     Nullable] public byte?     tinyintDataType      { get; set; } // TINYINT
		[Column,     Nullable] public double?   floatDataType        { get; set; } // DOUBLE
		[Column,     Nullable] public float?    realDataType         { get; set; } // REAL
		[Column,     Nullable] public DateTime? dateDataType         { get; set; } // DATE
		[Column,     Nullable] public TimeSpan? timeDataType         { get; set; } // TIME
		[Column,     Nullable] public DateTime? seconddateDataType   { get; set; } // SECONDDATE
		[Column,     Nullable] public DateTime? timestampDataType    { get; set; } // TIMESTAMP
		[Column,     Nullable] public char?     charDataType         { get; set; } // CHAR(1)
		[Column,     Nullable] public string    varcharDataType      { get; set; } // VARCHAR(20)
		[Column,     Nullable] public string    textDataType         { get; set; } // TEXT
		[Column,     Nullable] public string    shorttextDataType    { get; set; } // SHORTTEXT
		[Column,     Nullable] public char?     ncharDataType        { get; set; } // NCHAR(1)
		[Column,     Nullable] public string    nvarcharDataType     { get; set; } // NVARCHAR(20)
		[Column,     Nullable] public string    alphanumDataType     { get; set; } // ALPHANUM
		[Column,     Nullable] public byte[]    binaryDataType       { get; set; } // BINARY(10)
		[Column,     Nullable] public byte[]    varbinaryDataType    { get; set; } // VARBINARY(10)
		[Column,     Nullable] public byte[]    blobDataType         { get; set; } // BLOB
		[Column,     Nullable] public string    clobDataType         { get; set; } // CLOB
		[Column,     Nullable] public string    nclobDataType        { get; set; } // NCLOB
	}

	[Table(Schema="TEST", Name="AllTypesGeo")]
	public partial class AllTypesGeo
	{
		[PrimaryKey, Identity] public int    ID                 { get; set; } // INTEGER
		[Column,     Nullable] public string dataType           { get; set; } // VARCHAR(20)
		[Column,     Nullable] public object stgeometryDataType { get; set; } // ST_GEOMETRY
	}

	[Table(Schema="TEST", Name="BulkInsertLowerCaseColumns")]
	public partial class BulkInsertLowerCaseColumn
	{
		[Column, Nullable] public int?      ID            { get; set; } // INTEGER
		[Column, Nullable] public decimal?  MoneyValue    { get; set; } // DECIMAL(10, 4)
		[Column, Nullable] public DateTime? DateTimeValue { get; set; } // TIMESTAMP
		[Column, Nullable] public byte?     BoolValue     { get; set; } // TINYINT
		[Column, Nullable] public string    GuidValue     { get; set; } // VARCHAR(36)
		[Column, Nullable] public byte[]    BinaryValue   { get; set; } // VARBINARY(5000)
		[Column, Nullable] public short?    SmallIntValue { get; set; } // SMALLINT
		[Column, Nullable] public int?      IntValue      { get; set; } // INTEGER
		[Column, Nullable] public long?     BigIntValue   { get; set; } // BIGINT
	}

	[Table(Schema="TEST", Name="BulkInsertUpperCaseColumns")]
	public partial class BulkInsertUpperCaseColumn
	{
		[Column, Nullable] public int?      ID            { get; set; } // INTEGER
		[Column, Nullable] public decimal?  MONEYVALUE    { get; set; } // DECIMAL(10, 4)
		[Column, Nullable] public DateTime? DATETIMEVALUE { get; set; } // TIMESTAMP
		[Column, Nullable] public byte?     BOOLVALUE     { get; set; } // TINYINT
		[Column, Nullable] public string    GUIDVALUE     { get; set; } // VARCHAR(36)
		[Column, Nullable] public byte[]    BINARYVALUE   { get; set; } // VARBINARY(5000)
		[Column, Nullable] public short?    SMALLINTVALUE { get; set; } // SMALLINT
		[Column, Nullable] public int?      INTVALUE      { get; set; } // INTEGER
		[Column, Nullable] public long?     BIGINTVALUE   { get; set; } // BIGINT
	}

	[Table(Schema="TEST", Name="Child")]
	public partial class Child
	{
		[Column, Nullable] public int? ParentID { get; set; } // INTEGER
		[Column, Nullable] public int? ChildID  { get; set; } // INTEGER
	}

	[Table(Schema="TEST", Name="Doctor")]
	public partial class Doctor
	{
		[PrimaryKey, NotNull] public int    PersonID { get; set; } // INTEGER
		[Column,     NotNull] public string Taxonomy { get; set; } // NVARCHAR(50)

		#region Associations

		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=false)]
		public Person Person { get; set; }

		#endregion
	}

	[Table(Schema="TEST", Name="GrandChild")]
	public partial class GrandChild
	{
		[Column, Nullable] public int? ParentID     { get; set; } // INTEGER
		[Column, Nullable] public int? ChildID      { get; set; } // INTEGER
		[Column, Nullable] public int? GrandChildID { get; set; } // INTEGER
	}

	[Table(Schema="TEST", Name="IndexTable")]
	public partial class IndexTable
	{
		[PrimaryKey(1), NotNull] public int PKField1    { get; set; } // INTEGER
		[PrimaryKey(2), NotNull] public int PKField2    { get; set; } // INTEGER
		[Column,        NotNull] public int UniqueField { get; set; } // INTEGER
		[Column,        NotNull] public int IndexField  { get; set; } // INTEGER

		#region Associations

		/// <summary>
		/// FK_Patient2_IndexTable_BackReference
		/// </summary>
		[Association(ThisKey="PKField1, PKField2", OtherKey="PKField1, PKField2", CanBeNull=true)]
		public IndexTable2 Patient2 { get; set; }

		#endregion
	}

	[Table(Schema="TEST", Name="IndexTable2")]
	public partial class IndexTable2
	{
		[PrimaryKey(1), NotNull] public int PKField1 { get; set; } // INTEGER
		[PrimaryKey(2), NotNull] public int PKField2 { get; set; } // INTEGER

		#region Associations

		/// <summary>
		/// FK_Patient2_IndexTable
		/// </summary>
		[Association(ThisKey="PKField1, PKField2", OtherKey="PKField1, PKField2", CanBeNull=false)]
		public IndexTable Patient2IndexTable { get; set; }

		#endregion
	}

	[Table(Schema="TEST", Name="LinqDataTypes")]
	public partial class LinqDataType
	{
		[Column, Nullable] public int?      ID             { get; set; } // INTEGER
		[Column, Nullable] public decimal?  MoneyValue     { get; set; } // DECIMAL(10, 4)
		[Column, Nullable] public DateTime? DateTimeValue  { get; set; } // TIMESTAMP
		[Column, Nullable] public DateTime? DateTimeValue2 { get; set; } // TIMESTAMP
		[Column, Nullable] public byte?     BoolValue      { get; set; } // TINYINT
		[Column, Nullable] public string    GuidValue      { get; set; } // VARCHAR(36)
		[Column, Nullable] public byte[]    BinaryValue    { get; set; } // VARBINARY(5000)
		[Column, Nullable] public short?    SmallIntValue  { get; set; } // SMALLINT
		[Column, Nullable] public int?      IntValue       { get; set; } // INTEGER
		[Column, Nullable] public long?     BigIntValue    { get; set; } // BIGINT
	}

	[Table(Schema="TEST", Name="Parent")]
	public partial class Parent
	{
		[Column, Nullable] public int? ParentID { get; set; } // INTEGER
		[Column, Nullable] public int? Value1   { get; set; } // INTEGER
	}

	// View
	[Table(Schema="TEST", Name="ParentChildView")]
	public partial class ParentChildView
	{
		[Column, Nullable] public int? ParentID { get; set; } // INTEGER
		[Column, Nullable] public int? Value1   { get; set; } // INTEGER
		[Column, Nullable] public int? ChildID  { get; set; } // INTEGER
	}

	// View
	[Table(Schema="TEST", Name="ParentView")]
	public partial class ParentView
	{
		[Column, Nullable] public int? ParentID { get; set; } // INTEGER
		[Column, Nullable] public int? Value1   { get; set; } // INTEGER
	}

	[Table(Schema="TEST", Name="Patient")]
	public partial class Patient
	{
		[PrimaryKey, NotNull] public int    PersonID  { get; set; } // INTEGER
		[Column,     NotNull] public string Diagnosis { get; set; } // NVARCHAR(256)

		#region Associations

		/// <summary>
		/// FK_Patient_Person
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=false)]
		public Person Person { get; set; }

		#endregion
	}

	[Table(Schema="TEST", Name="Person")]
	public partial class Person
	{
		[PrimaryKey, Identity   ] public int    PersonID   { get; set; } // INTEGER
		[Column,     NotNull    ] public string FirstName  { get; set; } // NVARCHAR(50)
		[Column,     NotNull    ] public string LastName   { get; set; } // NVARCHAR(50)
		[Column,        Nullable] public string MiddleName { get; set; } // NVARCHAR(50)
		[Column,     NotNull    ] public char   Gender     { get; set; } // CHAR(1)

		#region Associations

		/// <summary>
		/// FK_Doctor_Person_BackReference
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=true)]
		public Doctor Doctor { get; set; }

		/// <summary>
		/// FK_Patient_Person_BackReference
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=true)]
		public Patient Patient { get; set; }

		#endregion
	}

	[Table(Schema="TEST", Name="TestIdentity")]
	public partial class TestIdentity
	{
		[PrimaryKey, Identity] public int ID { get; set; } // INTEGER
	}

	public static partial class HB1DBStoredProcedures
	{
		#region DROPEXISTINGTABLE

		public static int DROPEXISTINGTABLE(this DataConnection dataConnection, string TABLENAME, string SCHEMANAME)
		{
			return dataConnection.ExecuteProc("\"TEST\".\"DROPEXISTINGTABLE\"",
				new DataParameter("TABLENAME",  TABLENAME),
				new DataParameter("SCHEMANAME", SCHEMANAME));
		}

		#endregion

		#region DROPEXISTINGPROCEDURE

		public static int DROPEXISTINGPROCEDURE(this DataConnection dataConnection, string PROCEDURENAME, string SCHEMANAME)
		{
			return dataConnection.ExecuteProc("\"TEST\".\"DROPEXISTINGPROCEDURE\"",
				new DataParameter("PROCEDURENAME", PROCEDURENAME),
				new DataParameter("SCHEMANAME",    SCHEMANAME));
		}

		#endregion

		#region Person_SelectByName

		public partial class Person_SelectByNameResult
		{
			public int    PersonID   { get; set; }
			public string FirstName  { get; set; }
			public string LastName   { get; set; }
			public string MiddleName { get; set; }
			public string Gender     { get; set; }
		}

		public static IEnumerable<Person_SelectByNameResult> Person_SelectByName(this DataConnection dataConnection, string FIRSTNAME, string LASTNAME)
		{
			return dataConnection.QueryProc<Person_SelectByNameResult>("\"TEST\".\"Person_SelectByName\"",
				new DataParameter("FIRSTNAME", FIRSTNAME),
				new DataParameter("LASTNAME",  LASTNAME));
		}

		#endregion

		#region Person_SelectListByName

		public partial class Person_SelectListByNameResult
		{
			public int    PersonID   { get; set; }
			public string FirstName  { get; set; }
			public string LastName   { get; set; }
			public string MiddleName { get; set; }
			public string Gender     { get; set; }
		}

		public static IEnumerable<Person_SelectListByNameResult> Person_SelectListByName(this DataConnection dataConnection, string FIRSTNAME, string LASTNAME)
		{
			return dataConnection.QueryProc<Person_SelectListByNameResult>("\"TEST\".\"Person_SelectListByName\"",
				new DataParameter("FIRSTNAME", FIRSTNAME),
				new DataParameter("LASTNAME",  LASTNAME));
		}

		#endregion

		#region Person_Insert

		public static int Person_Insert(this DataConnection dataConnection, string FIRSTNAME, string LASTNAME, string MIDDLENAME, char? GENDER)
		{
			return dataConnection.ExecuteProc("\"TEST\".\"Person_Insert\"",
				new DataParameter("FIRSTNAME",  FIRSTNAME),
				new DataParameter("LASTNAME",   LASTNAME),
				new DataParameter("MIDDLENAME", MIDDLENAME),
				new DataParameter("GENDER",     GENDER));
		}

		#endregion

		#region Person_Insert_OutputParameter

		public static int Person_Insert_OutputParameter(this DataConnection dataConnection, string FIRSTNAME, string LASTNAME, string MIDDLENAME, char? GENDER, out int? PERSONID)
		{
			var ret = dataConnection.ExecuteProc("\"TEST\".\"Person_Insert_OutputParameter\"",
				new DataParameter("FIRSTNAME",  FIRSTNAME),
				new DataParameter("LASTNAME",   LASTNAME),
				new DataParameter("MIDDLENAME", MIDDLENAME),
				new DataParameter("GENDER",     GENDER));

			PERSONID = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["PERSONID"]).Value);

			return ret;
		}

		#endregion

		#region Person_Update

		public static int Person_Update(this DataConnection dataConnection, int? PERSONID, string FIRSTNAME, string LASTNAME, string MIDDLENAME, char? GENDER)
		{
			return dataConnection.ExecuteProc("\"TEST\".\"Person_Update\"",
				new DataParameter("PERSONID",   PERSONID),
				new DataParameter("FIRSTNAME",  FIRSTNAME),
				new DataParameter("LASTNAME",   LASTNAME),
				new DataParameter("MIDDLENAME", MIDDLENAME),
				new DataParameter("GENDER",     GENDER));
		}

		#endregion

		#region Person_Delete

		public static int Person_Delete(this DataConnection dataConnection, int? PERSONID)
		{
			return dataConnection.ExecuteProc("\"TEST\".\"Person_Delete\"",
				new DataParameter("PERSONID", PERSONID));
		}

		#endregion

		#region Patient_SelectAll

		public partial class Patient_SelectAllResult
		{
			public int?   PersonID   { get; set; }
			public string FirstName  { get; set; }
			public string LastName   { get; set; }
			public string MiddleName { get; set; }
			public string Gender     { get; set; }
			public string Diagnosis  { get; set; }
		}

		public static IEnumerable<Patient_SelectAllResult> Patient_SelectAll(this DataConnection dataConnection)
		{
			return dataConnection.QueryProc<Patient_SelectAllResult>("\"TEST\".\"Patient_SelectAll\"");
		}

		#endregion

		#region Patient_SelectByName

		public partial class Patient_SelectByNameResult
		{
			public int?   PersonID   { get; set; }
			public string FirstName  { get; set; }
			public string LastName   { get; set; }
			public string MiddleName { get; set; }
			public string Gender     { get; set; }
			public string Diagnosis  { get; set; }
		}

		public static IEnumerable<Patient_SelectByNameResult> Patient_SelectByName(this DataConnection dataConnection, string FIRSTNAME, string LASTNAME)
		{
			return dataConnection.QueryProc<Patient_SelectByNameResult>("\"TEST\".\"Patient_SelectByName\"",
				new DataParameter("FIRSTNAME", FIRSTNAME),
				new DataParameter("LASTNAME",  LASTNAME));
		}

		#endregion

		#region DROPEXISTINGFUNCTION

		public static int DROPEXISTINGFUNCTION(this DataConnection dataConnection, string FUNCTIONNAME, string SCHEMANAME)
		{
			return dataConnection.ExecuteProc("\"TEST\".\"DROPEXISTINGFUNCTION\"",
				new DataParameter("FUNCTIONNAME", FUNCTIONNAME),
				new DataParameter("SCHEMANAME",   SCHEMANAME));
		}

		#endregion

		#region DROPEXISTINGVIEW

		public static int DROPEXISTINGVIEW(this DataConnection dataConnection, string VIEWNAME, string SCHEMANAME)
		{
			return dataConnection.ExecuteProc("\"TEST\".\"DROPEXISTINGVIEW\"",
				new DataParameter("VIEWNAME",   VIEWNAME),
				new DataParameter("SCHEMANAME", SCHEMANAME));
		}

		#endregion

		#region Person_SelectByKey

		public partial class Person_SelectByKeyResult
		{
			public int    PersonID   { get; set; }
			public string FirstName  { get; set; }
			public string LastName   { get; set; }
			public string MiddleName { get; set; }
			public string Gender     { get; set; }
		}

		public static IEnumerable<Person_SelectByKeyResult> Person_SelectByKey(this DataConnection dataConnection, int? ID)
		{
			return dataConnection.QueryProc<Person_SelectByKeyResult>("\"TEST\".\"Person_SelectByKey\"",
				new DataParameter("ID", ID));
		}

		#endregion

		#region Person_SelectAll

		public partial class Person_SelectAllResult
		{
			public int    PersonID   { get; set; }
			public string FirstName  { get; set; }
			public string LastName   { get; set; }
			public string MiddleName { get; set; }
			public string Gender     { get; set; }
		}

		public static IEnumerable<Person_SelectAllResult> Person_SelectAll(this DataConnection dataConnection)
		{
			return dataConnection.QueryProc<Person_SelectAllResult>("\"TEST\".\"Person_SelectAll\"");
		}

		#endregion

		#region DuplicateColumnNames

		public partial class DuplicateColumnNamesResult
		{
			               public int?   id      { get; set; }
			[Column("id")] public string Column2 { get; set; }
		}

		public static IEnumerable<DuplicateColumnNamesResult> DuplicateColumnNames(this DataConnection dataConnection)
		{
			var ms = dataConnection.MappingSchema;

			return dataConnection.QueryProc(dataReader =>
				new DuplicateColumnNamesResult
				{
					id      = Converter.ChangeTypeTo<int?>  (dataReader.GetValue(0), ms),
					Column2 = Converter.ChangeTypeTo<string>(dataReader.GetValue(1), ms),
				},
				"\"TEST\".\"DuplicateColumnNames\"");
		}

		#endregion

		#region OutRefTest

		public static int OutRefTest(this DataConnection dataConnection, int? ID, out int? OUTPUTID, ref int? INPUTOUTPUTID, string STR, out string OUTPUTSTR, ref string INPUTOUTPUTSTR)
		{
			var ret = dataConnection.ExecuteProc("\"TEST\".\"OutRefTest\"",
				new DataParameter("ID",             ID),
				new DataParameter("INPUTOUTPUTID",  INPUTOUTPUTID)  { Direction = ParameterDirection.InputOutput, Size = 10 },
				new DataParameter("STR",            STR),
				new DataParameter("INPUTOUTPUTSTR", INPUTOUTPUTSTR) { Direction = ParameterDirection.InputOutput, Size = 50 });

			OUTPUTID       = Converter.ChangeTypeTo<int?>  (((IDbDataParameter)dataConnection.Command.Parameters["OUTPUTID"]).      Value);
			INPUTOUTPUTID  = Converter.ChangeTypeTo<int?>  (((IDbDataParameter)dataConnection.Command.Parameters["INPUTOUTPUTID"]). Value);
			OUTPUTSTR      = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["OUTPUTSTR"]).     Value);
			INPUTOUTPUTSTR = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["INPUTOUTPUTSTR"]).Value);

			return ret;
		}

		#endregion

		#region OutRefEnumTest

		public static int OutRefEnumTest(this DataConnection dataConnection, string STR, out string OUTPUTSTR, ref string INPUTOUTPUTSTR)
		{
			var ret = dataConnection.ExecuteProc("\"TEST\".\"OutRefEnumTest\"",
				new DataParameter("STR",            STR),
				new DataParameter("INPUTOUTPUTSTR", INPUTOUTPUTSTR) { Direction = ParameterDirection.InputOutput, Size = 50 });

			OUTPUTSTR      = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["OUTPUTSTR"]).     Value);
			INPUTOUTPUTSTR = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["INPUTOUTPUTSTR"]).Value);

			return ret;
		}

		#endregion

		#region DROPCONSTRAINTFROMTABLE

		public static int DROPCONSTRAINTFROMTABLE(this DataConnection dataConnection, string TABLENAME, string CONSTRAINTNAME, string SCHEMANAME)
		{
			return dataConnection.ExecuteProc("\"TEST\".\"DROPCONSTRAINTFROMTABLE\"",
				new DataParameter("TABLENAME",      TABLENAME),
				new DataParameter("CONSTRAINTNAME", CONSTRAINTNAME),
				new DataParameter("SCHEMANAME",     SCHEMANAME));
		}

		#endregion

		#region SelectImplicitColumn

		public partial class SelectImplicitColumnResult
		{
			[Column("123")] public int? _123 { get; set; }
		}

		public static IEnumerable<SelectImplicitColumnResult> SelectImplicitColumn(this DataConnection dataConnection)
		{
			return dataConnection.QueryProc<SelectImplicitColumnResult>("\"TEST\".\"SelectImplicitColumn\"");
		}

		#endregion
	}

	public static partial class TableExtensions
	{
		public static AllType Find(this ITable<AllType> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static AllTypesGeo Find(this ITable<AllTypesGeo> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static Doctor Find(this ITable<Doctor> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static IndexTable Find(this ITable<IndexTable> table, int PKField1, int PKField2)
		{
			return table.FirstOrDefault(t =>
				t.PKField1 == PKField1 &&
				t.PKField2 == PKField2);
		}

		public static IndexTable2 Find(this ITable<IndexTable2> table, int PKField1, int PKField2)
		{
			return table.FirstOrDefault(t =>
				t.PKField1 == PKField1 &&
				t.PKField2 == PKField2);
		}

		public static Patient Find(this ITable<Patient> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static Person Find(this ITable<Person> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static TestIdentity Find(this ITable<TestIdentity> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}
	}
}
