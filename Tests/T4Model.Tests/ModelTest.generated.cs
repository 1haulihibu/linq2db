//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/igor-tkachev/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml.Serialization;

using T4Model.Tests;

namespace T4Model.Tests
{
	public partial class TestClass1 : INotifyPropertyChanged
	{
		public TestClass1()
		{
			AcceptChanges();
		}

		#region EditableLong1 : long

		private long  _currentEditableLong1 = 12345;
		private long _originalEditableLong1;
		public  long          EditableLong1
		{
			get { return _currentEditableLong1; }
			set
			{
				if (_currentEditableLong1 != value)
				{
					BeforeEditableLong1Changed(value);
					_currentEditableLong1 = value;
					AfterEditableLong1Changed();

					OnEditableLong1Changed();
				}
			}
		}

		#region EditableObject support

		public void AcceptEditableLong1Changes()
		{
			_originalEditableLong1 = _currentEditableLong1;
		}

		public void RejectEditableLong1Changes()
		{
			EditableLong1 = _originalEditableLong1;
		}

		public bool IsEditableLong1Dirty
		{
			get { return _currentEditableLong1 != _originalEditableLong1; }
		}

		#endregion

		#region INotifyPropertyChanged support

		partial void BeforeEditableLong1Changed(long newValue);
		partial void AfterEditableLong1Changed ();

		private static readonly PropertyChangedEventArgs _EditableLong1ChangedEventArgs = new PropertyChangedEventArgs("EditableLong1");

		private void OnEditableLong1Changed()
		{
			OnPropertyChanged(_EditableLong1ChangedEventArgs);
		}

		#endregion

		#endregion

		#region EditableInt1 : int

		private int  _currentEditableInt1;
		private int _originalEditableInt1;
		public  int          EditableInt1
		{
			get { return _currentEditableInt1; }
			set
			{
				if (_currentEditableInt1 != value)
				{
					BeforeEditableInt1Changed(value);
					_currentEditableInt1 = value;
					AfterEditableInt1Changed();

					OnEditableInt1Changed();
				}
			}
		}

		#region EditableObject support

		public void AcceptEditableInt1Changes()
		{
			_originalEditableInt1 = _currentEditableInt1;
		}

		public void RejectEditableInt1Changes()
		{
			EditableInt1 = _originalEditableInt1;
		}

		public bool IsEditableInt1Dirty
		{
			get { return _currentEditableInt1 != _originalEditableInt1; }
		}

		#endregion

		#region INotifyPropertyChanged support

		partial void BeforeEditableInt1Changed(int newValue);
		partial void AfterEditableInt1Changed ();

		private static readonly PropertyChangedEventArgs _EditableInt1ChangedEventArgs = new PropertyChangedEventArgs("EditableInt1");

		private void OnEditableInt1Changed()
		{
			OnPropertyChanged(_EditableInt1ChangedEventArgs);
		}

		#endregion

		#endregion

		#region EditableInt3 : int

		private int  _currentEditableInt3;
		private int _originalEditableInt3;
		public  int          EditableInt3
		{
			get { return _currentEditableInt3; }
			set
			{
				if (_currentEditableInt3 != value)
				{
					BeforeEditableInt3Changed(value);
					_currentEditableInt3 = value;
					AfterEditableInt3Changed();

					OnEditableInt1Changed();
					OnEditableInt3Changed();
				}
			}
		}

		#region EditableObject support

		public void AcceptEditableInt3Changes()
		{
			_originalEditableInt3 = _currentEditableInt3;
		}

		public void RejectEditableInt3Changes()
		{
			EditableInt3 = _originalEditableInt3;
		}

		public bool IsEditableInt3Dirty
		{
			get { return _currentEditableInt3 != _originalEditableInt3; }
		}

		#endregion

		#region INotifyPropertyChanged support

		partial void BeforeEditableInt3Changed(int newValue);
		partial void AfterEditableInt3Changed ();

		private static readonly PropertyChangedEventArgs _EditableInt3ChangedEventArgs = new PropertyChangedEventArgs("EditableInt3");

		private void OnEditableInt3Changed()
		{
			OnPropertyChanged(_EditableInt3ChangedEventArgs);
		}

		#endregion

		#endregion

		#region NotifiedProp1 : string

		private string _NotifiedProp1;
		public  string  NotifiedProp1
		{
			get { return _NotifiedProp1; }
			set
			{
				if (_NotifiedProp1 != value)
				{
					BeforeNotifiedProp1Changed(value);
					_NotifiedProp1 = value;
					AfterNotifiedProp1Changed();

					OnNotifiedProp2Changed();
					OnNotifiedProp3Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeNotifiedProp1Changed(string newValue);
		partial void AfterNotifiedProp1Changed ();

		private static readonly PropertyChangedEventArgs _NotifiedProp1ChangedEventArgs = new PropertyChangedEventArgs("NotifiedProp1");

		private void OnNotifiedProp1Changed()
		{
			OnPropertyChanged(_NotifiedProp1ChangedEventArgs);
		}

		#endregion

		#endregion

		#region NotifiedProp2 : int

		private int _NotifiedProp2 = 1;
		public  int  NotifiedProp2
		{
			get { return _NotifiedProp2; }
			set
			{
				if (_NotifiedProp2 != value)
				{
					BeforeNotifiedProp2Changed(value);
					_NotifiedProp2 = value;
					AfterNotifiedProp2Changed();

					OnNotifiedProp2Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeNotifiedProp2Changed(int newValue);
		partial void AfterNotifiedProp2Changed ();

		private static readonly PropertyChangedEventArgs _NotifiedProp2ChangedEventArgs = new PropertyChangedEventArgs("NotifiedProp2");

		private void OnNotifiedProp2Changed()
		{
			OnPropertyChanged(_NotifiedProp2ChangedEventArgs);
		}

		#endregion

		#endregion

		#region NotifiedProp3 : long

		public long NotifiedProp3
		{
			get { return 1; }
		}

		#region INotifyPropertyChanged support

		private static readonly PropertyChangedEventArgs _NotifiedProp3ChangedEventArgs = new PropertyChangedEventArgs("NotifiedProp3");

		private void OnNotifiedProp3Changed()
		{
			OnPropertyChanged(_NotifiedProp3ChangedEventArgs);
		}

		#endregion

		#endregion

		#region Test Region

		[XmlArrayItem(typeof(int), DataType="List")                                                ] public int    Field1;
		[                                            XmlArray("Name1")                             ] public string Field2;
		[XmlArrayItem(typeof(int), DataType="List"), XmlArray("Name21"), XmlArrayItem(typeof(char))] public string Field21;
		[XmlAttribute("Name1", typeof(int)),         XmlArray("N2")                                ] public string Field221  { get; set; }
		                                                                                             public string Field2212;
		[XmlAttribute("Nm1", typeof(int))                                                          ] public string Field23;
		[XmlElement("Nm1", typeof(int)),             XmlElement                                    ] public string Field23a;

		#endregion

		#region Test Region 2

		public int    Field12;                                                        // Field3 comnt
		public string Field22_____;
		public string PField121    { get; set; }
		public string PField221    { get { var a = 1; return null; } }
		public string PField222    { get { return null; } }                           // Field3 comment
		public string PField23     { get { return null; } set { value.ToString(); } } // Fieomment

		#endregion

		[XmlArrayItem(typeof(int), DataType="List")]
		public List<int> Field3; // Field3 comment

		[DisplayName("Prop"), XmlArrayItem(typeof(int), DataType="List")]
		public char Property1 // Property1 comment
		{
			get
			{
				int a = 1;
				return 'a';
			}
			set
			{
				var a = value;
				a.ToString();
			}
		}

		public char Property11
		{
			get { return 'a'; }
			set { var a = value; }
		}

		public List<int> Field31;

		public double Field5;

		public List<int> Field6;

		public double       Fld7;                               // Fld7
		public List<int>    Field8;
		public DateTime     FieldLongName;                      // field long name
		public List<string> Property2     { get;         set; } // Property2
		public List<int?>   Property3     { get; private set; } // Property3
		public int?         Prop1         { get;         set; } // Prop1

		public List<string> Field4;

		#region EditableObject support

		partial void BeforeAcceptChanges();
		partial void AfterAcceptChanges ();

		public virtual void AcceptChanges()
		{
			BeforeAcceptChanges();

			AcceptEditableLong1Changes();
			AcceptEditableInt1Changes();
			AcceptEditableInt3Changes();

			AfterAcceptChanges();
		}

		partial void BeforeRejectChanges();
		partial void AfterRejectChanges ();

		public virtual void RejectChanges()
		{
			BeforeRejectChanges();

			RejectEditableLong1Changes();
			RejectEditableInt1Changes();
			RejectEditableInt3Changes();

			AfterRejectChanges();
		}

		public virtual bool IsDirty
		{
			get
			{
				return
					IsEditableLong1Dirty ||
					IsEditableInt1Dirty  ||
					IsEditableInt3Dirty;
			}
		}

		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			if (PropertyChanged != null)
			{
#if SILVERLIGHT
				if (System.Windows.Deployment.Current.Dispatcher.CheckAccess())
					PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
				else
					System.Windows.Deployment.Current.Dispatcher.BeginInvoke(
						() => PropertyChanged(this, new PropertyChangedEventArgs(propertyName)));
#else
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
#endif
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			if (PropertyChanged != null)
			{
#if SILVERLIGHT
				if (System.Windows.Deployment.Current.Dispatcher.CheckAccess())
					PropertyChanged(this, arg);
				else
					System.Windows.Deployment.Current.Dispatcher.BeginInvoke(
						() => PropertyChanged(this, arg));
#else
				PropertyChanged(this, arg);
#endif
			}
		}

		#endregion
	}

	[Serializable, DisplayName("TestClass")]
	public partial class TestClass2 : TestClass1
	{
	}
}
