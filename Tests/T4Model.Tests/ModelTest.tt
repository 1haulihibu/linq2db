<#@ template language="C#" debug="True" hostSpecific="True" #>
<#@ output extension=".cs"                                  #>
<#@ import namespace="System.Linq"                          #>
<#@ include file="..\..\Templates\T4Model.ttinclude"        #>
<#
	Source.Namespaces[0].Name = "T4Model.Tests";

	Source.Usings.Add("System.ComponentModel");
	Source.Usings.Add("System.Collections.Generic");
	Source.Usings.Add("System.Xml.Serialization");
	Source.Usings.Add("T4Model.Tests");
	Source.Usings.Add("System.ComponentModel");
	
	Source.Namespaces[0].Types.Add(new Class
	{
		Name       = "TestClass1",
		Interfaces =
		{
			"INotifyPropertyChanged"
		},
		Members    =
		{
			new MemberGroup
			{
				Region    = "Test Region",
				IsCompact = true,
				Members   =
				{
					new Field
					{
						Type       = "int",
						Name       = "Field1",
						Attributes =
						{
							new Attribute("XmlArrayItem", "typeof(int)", "DataType=\"List\""),
						}
					},
					new Field
					{
						Type       = "string",
						Name       = "Field2",
						Attributes =
						{
							new Attribute("XmlArray", "\"Name1\""),
						}
					},
					new Field
					{
						Type       = "string",
						Name       = "Field21",
						Attributes =
						{
							new Attribute("XmlArray",     "\"Name21\""),
							new Attribute("XmlArrayItem", "typeof(int)",  "DataType=\"List\""),
							new Attribute("XmlArrayItem", "typeof(char)"),
						}
					},
					new Property
					{
						Type       = "string",
						Name       = "Field221",
						Attributes =
						{
							new Attribute("XmlAttribute", "\"Name1\"",  "typeof(int)"),
							new Attribute("XmlArray",     "\"N2\""),
						}
					},
					new Field
					{
						Type       = "string",
						Name       = "Field2212",
					},
					new Field
					{
						Type = "string",
						Name = "Field23",
						Attributes =
						{
							new Attribute("XmlAttribute", "\"Nm1\"",  "typeof(int)"),
						}
					},
					new Field
					{
						Type = "string",
						Name = "Field23a",
						Attributes =
						{
							new Attribute("XmlElement", "\"Nm1\"",  "typeof(int)"),
							new Attribute("XmlElement"),
						}
					},
				}
			},
			new MemberGroup
			{
				Region    = "Test Region 2",
				IsCompact = true,
				Members   =
				{
					new Field   ("int",    "Field12") { EndLineComment = "Field3 comnt" },
					new Field   ("string", "Field22_____"),
					new Property("string", "PField121"),
					new Property("string", "PField221", new[] { "var a = 1;", "return null;" }),
					new Property("string", "PField222", new[] { "return null;" }) { EndLineComment = "Field3 comment" },
					new Property("string", "PField23",  new[] { "return null;" }, new[] { "value.ToString();" }) { EndLineComment = "Fieomment" },
				}
			},
			new Field
			{
				Type           = "List<int>",
				Name           = "Field3",
				EndLineComment = "Field3 comment",
				Attributes     =
				{
					//new Attribute { Name = "DisplayName" },
					new Attribute("XmlArrayItem", "typeof(int)", "DataType=\"List\""),
				}
			},
			new Property("char", "Property1",
				new[]
				{
					"int a = 1;",
					"return 'a';"
				},
				new[]
				{
					"var a = value;",
					"a.ToString();"
				})
			{
				EndLineComment = "Property1 comment",
				Attributes     =
				{
					new Attribute("DisplayName", "\"Prop\""),
					new Attribute("XmlArrayItem", "typeof(int)", "DataType=\"List\""),
				}
			},
			new Property("char", "Property11",
				new[]
				{
					"return 'a';"
				},
				new[]
				{
					"var a = value;",
				}),
			new Field
			{
				Type = "List<int>",
				Name = "Field31"
			},
			new MemberGroup
			{
				Members =
				{
					new Field("double",    "Field5"),
					new Field("List<int>", "Field6"),
				}
			},
			new MemberGroup
			{
				IsCompact = true,
				Members   =
				{
					new Field   ("double",       "Fld7")          { EndLineComment = "Fld7" },
					new Field   ("List<int>",    "Field8"),
					new Field   ("DateTime",     "FieldLongName") { EndLineComment = "field long name" },
					new Property("List<string>", "Property2")     { EndLineComment = "Property2" },
					new Property("List<int?>",   "Property3")     { EndLineComment = "Property3", HasSetter = false },
					new Property("int?",         "Prop1")         { EndLineComment = "Prop1" },
				}
			},
			new Field { Type = "List<string>", Name = "Field4" },
			new MemberGroup
			{
				Region  = "Group : string",
				Members =
				{
					new Field   ("string", "_testProperty1") { AccessModifier = AccessModifier.Private },
					new Property(" string", " TestProperty1",
						new[] { "return _testProperty1;" },
						@"
							if (value != _testProperty1)
							{
								BeforePropertyChanged(value);
								_testProperty1 = value;
								AfterPropertyChanged();

								OnTestProperty1Changed();
							}
						".TrimEnd('\t').Trim('\r', '\n').Split('\n').Select(s => s.Replace("\t\t\t\t\t\t\t", "").Trim('\r', '\n'))),
					new MemberGroup
					{
						IsCompact = true,
						Members   =
						{
							new Method("void", "BeforePropertyChanged", new[] { "string newValue" }) { AccessModifier = AccessModifier.Partial },
							new Method("void", "AfterPropertyChanged")  { AccessModifier = AccessModifier.Partial },
							new Method("void", "OnTestProperty1Changed", null, new[] { "OnPropertyChanged(\"TestProperty1\");" })
							{
								AccessModifier = AccessModifier.Private,
							}
						}
					}
				},
			},
			new MemberGroup
			{
				Region    = "INotifyPropertyChanged",
				Members   =
				{
					new Event("PropertyChangedEventHandler", "PropertyChanged"),
					new Method("void", "OnPropertyChanged",
						new[]
						{
							"string propertyName"
						},
						new[] { "OnPropertyChanged(\"TestProperty1\");" })
						{
							AccessModifier = AccessModifier.Protected
						},
				}
			}
		}
	});

	Source.Namespaces[0].Types.Add(new Class
	{
		Name       = "TestClass2",
		BaseClass  = "TestClass1",
		//Interfaces = { "IDisposable" }
		Attributes =
		{
			new Attribute("Serializable"),
			new Attribute("DisplayName", "\"TestClass\""),
		}
	});
	
	GenerateModel();
#>
