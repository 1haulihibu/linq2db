<#@ template language="C#" debug="True" hostSpecific="True"                          #>
<#@ output extension=".generated.cs"                                                 #>
<#@ include file="$(ProjectDir)LinqToDB.Templates\LinqToDB.Informix.Tools.ttinclude" #>
<#@ include file="$(ProjectDir)LinqToDB.Templates\PluralizationService.ttinclude"    #>
<#
	/*
		1. Download and install IBM Data Server Provider for .NET.

		2. Add a reference to IBM.Data.Informix.dll.

		3. Copy this file to a folder where you would like to generate your data model,
		   rename it, and delete .txt extension. For example:

			MyProject
				DataModels
					MyDatabase.tt

		4. Modify the connection settings below to connect to your database.

		5. Add connection string to the web/app.config file:

			<connectionStrings>
				<add name="MyDatabase"
					connectionString="Host=MyServer;Service=9088;Server=ol_informix1170;Protocol=onsoctcp;Database=MyDatabase;UID=informix;PWD=TestPassword;"
					providerName="IBM.Data.Informix"/>
			</connectionStrings>

		6. To access your database use the following code:

			using (var db = new MyDatabaseDB())
			{
				var q =
					from c in db.Customers
					select c;

				foreach (var c in q)
					Console.WriteLine(c.ContactName);
			}
	*/

	NamespaceName            = "DataModels";       // Namespace of the generated classes.

//	DataContextName          = null;               // DataContext class name. If null - database name + "DB".
//	BaseDataContextClass     = null;               // Base DataContext class name. If null - LinqToDB.Data.DataConnection.
//	GenerateConstructors     = true;               // Enforce generating DataContext constructors.
//	DefaultConfiguration     = null;               // Defines default configuration for default DataContext constructor.

//	BaseEntityClass          = null;               // Base Entity class name. If null - none.
//	DatabaseName             = null;               // Table database name - [Table(Database="DatabaseName")].
//	GenerateDatabaseName     = false;              // Always generate table database name, even though DatabaseName is null.
//	IncludeDefaultSchema     = true;               // Default schema name is generated - [Table(Database="Northwind", Schema="dbo", Name="Customers")]
//	OneToManyAssociationType = "IEnumerable<{0}>"; // One To Many association type. Change it to "List<{0}>" if needed.
//	GenerateAssociations     = true;               // Enforce generating associations.
//	GenerateBackReferences   = true;               // Enforce generating backreference associations.

//	ReplaceSimilarTables     = true;               // Replaces stored procedure result class names with similar to existing table class names.
//	GenerateFindExtensions   = true;               // Generates find extension methods based on PKs information.
//	IsCompactColumns         = true;               // If true, column compact view.

//	PluralizeClassNames                 = false;   // If true, pluralizes table class names.
//	SingularizeClassNames               = true;    // If true, singularizes table class names.
//	PluralizeDataContextPropertyNames   = true;    // If true, pluralizes DataContext property names.
//	SingularizeDataContextPropertyNames = false;   // If true, singularizes DataContex pProperty names.

//	bool GenerateObsoleteAttributeForAliases = false;
//	IsCompactColumnAliases   = true;               // If true, column alias compact view.

//	GetSchemaOptions.ExcludedSchemas = new[] { "TestUser", "SYSSTAT" }; // Defines excluded schemas.
//	GetSchemaOptions.IncludedSchemas = new[] { "TestUser", "SYS" };     // Defines only included schemas.


	LoadInformixMetadata("MyServer", "9088", "ol_informix1170", "MyDatabase", "informix", "TestPassword");
//	LoadInformixMetadata(string connectionString);


//	GetTable("Person").TypeName = "MyName";                                             // Replaces table name.
//	GetColumn("Person", "PersonID").MemberName = "ID";                                  // Replaces column PersonID of Person table with ID.
//	GetFK("Orders", "FK_Orders_Customers").MemberName      = "Customers";               // Replaces association name.
//	GetFK("Orders", "FK_Orders_Customers").AssociationType = AssociationType.OneToMany; // Changes association type.

//	Model.Usings.Add("MyNamespace"); // Adds using of namespace.

//	// Replaces all the columns where name is 'TableName' + 'ID' with 'ID'.
//	foreach (var t in Tables.Values)
//		foreach (var c in t.Columns.Values)
//			if (c.IsPrimaryKey && c.MemberName == t.TypeName + "ID")
//				c.MemberName = "ID";


	GenerateModel();


/* Useful members and data structues.

Dictionary<string,Table>     Tables     = new Dictionary<string,Table>    ();
Dictionary<string,Procedure> Procedures = new Dictionary<string,Procedure>();

Table      GetTable     (string name);
Procedure  GetProcedure (string name);
Column     GetColumn    (string tableName, string columnName);
ForeignKey GetFK        (string tableName, string fkName);
ForeignKey GetForeignKey(string tableName, string fkName);

public class Table
{
	public string Schema;
	public string TableName;
	public string DataContextPropertyName;
	public bool   IsView;
	public string Description;
	public string AliasPropertyName;
	public string AliasTypeName;
	public string TypeName;

	public Dictionary<string,Column>     Columns;
	public Dictionary<string,ForeignKey> ForeignKeys;
}

public partial class Column : Property
{
	public string    ColumnName; // Column name in database
	public bool      IsNullable;
	public bool      IsIdentity;
	public string    ColumnType; // Type of the column in database
	public DbType    DbType;
	public string    Description;
	public bool      IsPrimaryKey;
	public int       PrimaryKeyOrder;
	public bool      SkipOnUpdate;
	public bool      SkipOnInsert;
	public bool      IsDuplicateOrEmpty;
	public string    AliasName;
	public string    MemberName;
}

public enum AssociationType
{
	Auto,
	OneToOne,
	OneToMany,
	ManyToOne,
}

public partial class ForeignKey : Property
{
	public string           KeyName;
	public Table            OtherTable;
	public List<Column>     ThisColumns;
	public List<Column>     OtherColumns;
	public bool             CanBeNull;
	public ForeignKey       BackReference;
	public string           MemberName;
	public AssociationType  AssociationType;
}

public partial class Procedure : Method
{
	public string          Schema;
	public string          ProcedureName;
	public bool            IsFunction;
	public bool            IsTableFunction;
	public bool            IsDefaultSchema;

	public Table           ResultTable;
	public Exception       ResultException;
	public List<Table>     SimilarTables;
	public List<Parameter> ProcParameters;
}

public class Parameter
{
	public string   SchemaName;
	public string   SchemaType;
	public bool     IsIn;
	public bool     IsOut;
	public bool     IsResult;
	public int?     Size;
	public string   ParameterName;
	public string   ParameterType;
	public Type     SystemType;
	public string   DataType;
}

*/
#>
