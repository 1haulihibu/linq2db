<#@ include file="LinqToDB.ttinclude" #>
<#@ import namespace="LinqToDB.DataProvider.SapHana"   #>
<#
	LinqToDB.DataProvider.SapHana.SapHanaTools.ResolveSapHana(
		typeof(Sap.Data.Hana.HanaConnection).Assembly);

	var afterGenerateLinqToDBModel = AfterGenerateLinqToDBModel;
	AfterGenerateLinqToDBModel = () =>
	{
		afterGenerateLinqToDBModel();
		GenerateViewWithParametersMethod();
	};

	GenerateProviderSpecificTable = (Table t) => {
		var body = new List<string> {
			string.Format("\r\n\treturn GetViewWithParams<{0}>(new List<DataParameter>{{", t.TypeName)
        };
		body.AddRange(t.Parameters.Select(p => 
			String.Format("\r\n\t\tnew DataParameter(\"{0}\", {0}),", 
				p.ParameterName)));
		body.Add("});");

		return new Method(
			String.Format("ITable<{0}>", t.TypeName),
			t.DataContextPropertyName,
			t.Parameters.Select(p => p.ParameterType + " " + p.ParameterName),
			body
			);
    };

	LoadProviderSpecificTable = (TableSchema t) => {
		var v = t as ViewWithParametersTableSchema;
		return new Table
			{				
				Schema                  = (t.IsDefaultSchema && !IncludeDefaultSchema) || string.IsNullOrEmpty(t.SchemaName)? null : t.SchemaName,
				BaseClass               = BaseEntityClass,
				TableName               = t.TableName,
				TypeName                =
					PluralizeClassNames   ? ToPlural  (t.TypeName) :
					SingularizeClassNames ? ToSingular(t.TypeName) : t.TypeName,
				DataContextPropertyName =
					PluralizeDataContextPropertyNames   ? ToPlural  (t.TypeName) :
					SingularizeDataContextPropertyNames ? ToSingular(t.TypeName) : t.TypeName,
				IsView                  = t.IsView,
				IsProviderSpecific      = true,
				Description             = t.Description,
				Columns                 = t.Columns.ToDictionary(
					c => c.ColumnName,
					c => new Column
					{
						ColumnName      = c.ColumnName,
						ColumnType      = c.ColumnType,
						IsNullable      = c.IsNullable,
						IsIdentity      = c.IsIdentity,
						IsPrimaryKey    = c.IsPrimaryKey,
						PrimaryKeyOrder = c.PrimaryKeyOrder,
						MemberName      = CheckType(c.SystemType, c.MemberName),
						Type            = c.MemberType,
						SkipOnInsert    = c.SkipOnInsert,
						SkipOnUpdate    = c.SkipOnUpdate,
						Description     = c.Description,
					}),
				Parameters = v.Parameters
					.Select(pr => new Parameter
					{
						SchemaName    = pr.SchemaName,
						SchemaType    = pr.SchemaType,
						IsIn          = pr.IsIn,
						IsOut         = pr.IsOut,
						IsResult      = pr.IsResult,
						Size          = pr.Size,
						ParameterName = pr.ParameterName,
						ParameterType = pr.ParameterType,
						SystemType    = pr.SystemType,
						DataType      = pr.DataType.ToString(),
					})
					.ToList()
			};
    };


#>
<#+

public partial class Table {

	public List<Parameter>	Parameters;
}

void GenerateViewWithParametersMethod()
{
	Model.Usings.Add("System.Collections.Generic");
	Model.Usings.Add("System.Reflection");
	Model.Usings.Add("LinqToDB.Data");
	Model.Usings.Add("LinqToDB.DataProvider.SapHana");

	DataContextObject.Members.Add(
		new MemberGroup
		{
			Region  = "CalculationViewWithParameters",
			Members =
			{
				new Method("ITable<TTable>", "GetViewWithParams<TTable>",
					new[] { "IEnumerable<DataParameter> pList" }, 
					new[]
					{
						"return this.GetTable<TTable>(",
						"	this,",
						"	((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable)),",
						"	pList);"
					})
				{
					Attributes = { new Attribute("CalculationViewInputParametersExpression") },
					AfterSignature = new List<string> { "where TTable: class" }
				}
			}
		}
	);
}

LinqToDB.Data.DataConnection GetSapHanaConnection(string connectionString)
{
	return LinqToDB.DataProvider.SapHana.SapHanaTools.CreateDataConnection(connectionString);
}

LinqToDB.Data.DataConnection GetSapHanaConnection(string server, string schema, string uid, string password)
{
	return GetSapHanaConnection(string.Format("Server={0};Current Schema={1};UserID={2};Password={3};", server, schema, uid, password));
}

void LoadSapHanaMetadata(string connectionString)
{
	var dataConnection = GetSapHanaConnection(connectionString);
	LoadMetadata(dataConnection);
}

void LoadSapHanaMetadata(string server, string schema, string uid, string password)
{
	var dataConnection = GetSapHanaConnection(server, schema, uid, password);
	LoadMetadata(dataConnection);
}
#>
