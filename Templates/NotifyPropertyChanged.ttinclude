//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/igor-tkachev/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows;

using MS.Finance.BFact.DataModel;

namespace MS.Finance.BFact.Silverlight.ViewModels
{
	public partial class AppViewModel : INotifyPropertyChanged
	{
		#region UserID : string

		private string _userID;
		public  string  UserID
		{
			get { return _userID; }
			set
			{
				if (_userID != value)
				{
					BeforeUserIDChanged(value);
					_userID = value;
					AfterUserIDChanged();

					OnUserIDChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeUserIDChanged(string newValue);
		partial void AfterUserIDChanged ();

		public const string NameOfUserID = "UserID";

		private static readonly PropertyChangedEventArgs _userIDChangedEventArgs = new PropertyChangedEventArgs(NameOfUserID);

		private void OnUserIDChanged()
		{
			OnPropertyChanged(_userIDChangedEventArgs);
		}

		#endregion

		#endregion

		#region IsLoaded : bool

		private bool _isLoaded;
		public  bool  IsLoaded
		{
			get { return _isLoaded; }
			set
			{
				if (_isLoaded != value)
				{
					BeforeIsLoadedChanged(value);
					_isLoaded = value;
					AfterIsLoadedChanged();

					OnIsLoadedChanged();
					OnIsLoadingChanged();
					OnVisibleIfLoadedChanged();
					OnVisibleIfLoadingChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeIsLoadedChanged(bool newValue);
		partial void AfterIsLoadedChanged ();

		public const string NameOfIsLoaded = "IsLoaded";

		private static readonly PropertyChangedEventArgs _isLoadedChangedEventArgs = new PropertyChangedEventArgs(NameOfIsLoaded);

		private void OnIsLoadedChanged()
		{
			OnPropertyChanged(_isLoadedChangedEventArgs);
		}

		#endregion

		#endregion

		#region IsLoading : bool

		public bool IsLoading
		{
			get { return !IsLoaded; }
		}

		#region INotifyPropertyChanged support

		public const string NameOfIsLoading = "IsLoading";

		private static readonly PropertyChangedEventArgs _isLoadingChangedEventArgs = new PropertyChangedEventArgs(NameOfIsLoading);

		private void OnIsLoadingChanged()
		{
			OnPropertyChanged(_isLoadingChangedEventArgs);
		}

		#endregion

		#endregion

		#region VisibleIfLoaded : Visibility

		public Visibility VisibleIfLoaded
		{
			get { return IsLoaded  ? Visibility.Visible : Visibility.Collapsed; }
		}

		#region INotifyPropertyChanged support

		public const string NameOfVisibleIfLoaded = "VisibleIfLoaded";

		private static readonly PropertyChangedEventArgs _visibleIfLoadedChangedEventArgs = new PropertyChangedEventArgs(NameOfVisibleIfLoaded);

		private void OnVisibleIfLoadedChanged()
		{
			OnPropertyChanged(_visibleIfLoadedChangedEventArgs);
		}

		#endregion

		#endregion

		#region VisibleIfLoading : Visibility

		public Visibility VisibleIfLoading
		{
			get { return IsLoading ? Visibility.Visible : Visibility.Collapsed; }
		}

		#region INotifyPropertyChanged support

		public const string NameOfVisibleIfLoading = "VisibleIfLoading";

		private static readonly PropertyChangedEventArgs _visibleIfLoadingChangedEventArgs = new PropertyChangedEventArgs(NameOfVisibleIfLoading);

		private void OnVisibleIfLoadingChanged()
		{
			OnPropertyChanged(_visibleIfLoadingChangedEventArgs);
		}

		#endregion

		#endregion

		#region LoadingProgress : string

		private string _loadingProgress = "Loading...";
		public  string  LoadingProgress
		{
			get { return _loadingProgress; }
			set
			{
				if (_loadingProgress != value)
				{
					BeforeLoadingProgressChanged(value);
					_loadingProgress = value;
					AfterLoadingProgressChanged();

					OnLoadingProgressChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeLoadingProgressChanged(string newValue);
		partial void AfterLoadingProgressChanged ();

		public const string NameOfLoadingProgress = "LoadingProgress";

		private static readonly PropertyChangedEventArgs _loadingProgressChangedEventArgs = new PropertyChangedEventArgs(NameOfLoadingProgress);

		private void OnLoadingProgressChanged()
		{
			OnPropertyChanged(_loadingProgressChangedEventArgs);
		}

		#endregion

		#endregion

		#region CostCenterList : List<CostCenterViewModel>

		private List<CostCenterViewModel> _costCenterList;
		public  List<CostCenterViewModel>  CostCenterList
		{
			get { return _costCenterList; }
			set
			{
				if (_costCenterList != value)
				{
					BeforeCostCenterListChanged(value);
					_costCenterList = value;
					AfterCostCenterListChanged();

					OnCostCenterListChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeCostCenterListChanged(List<CostCenterViewModel> newValue);
		partial void AfterCostCenterListChanged ();

		public const string NameOfCostCenterList = "CostCenterList";

		private static readonly PropertyChangedEventArgs _costCenterListChangedEventArgs = new PropertyChangedEventArgs(NameOfCostCenterList);

		private void OnCostCenterListChanged()
		{
			OnPropertyChanged(_costCenterListChangedEventArgs);
		}

		#endregion

		#endregion

		#region SelectedCostCenter : CostCenterViewModel

		private CostCenterViewModel _selectedCostCenter;
		public  CostCenterViewModel  SelectedCostCenter
		{
			get { return _selectedCostCenter; }
			set
			{
				if (_selectedCostCenter != value)
				{
					BeforeSelectedCostCenterChanged(value);
					_selectedCostCenter = value;
					AfterSelectedCostCenterChanged();

					OnSelectedCostCenterChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeSelectedCostCenterChanged(CostCenterViewModel newValue);
		partial void AfterSelectedCostCenterChanged ();

		public const string NameOfSelectedCostCenter = "SelectedCostCenter";

		private static readonly PropertyChangedEventArgs _selectedCostCenterChangedEventArgs = new PropertyChangedEventArgs(NameOfSelectedCostCenter);

		private void OnSelectedCostCenterChanged()
		{
			OnPropertyChanged(_selectedCostCenterChangedEventArgs);
		}

		#endregion

		#endregion

		#region GrandTotalMonth1 : int

		private int _grandTotalMonth1;
		public  int  GrandTotalMonth1
		{
			get { return _grandTotalMonth1; }
			set
			{
				if (_grandTotalMonth1 != value)
				{
					BeforeGrandTotalMonth1Changed(value);
					_grandTotalMonth1 = value;
					AfterGrandTotalMonth1Changed();

					OnGrandTotalMonth1Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeGrandTotalMonth1Changed(int newValue);
		partial void AfterGrandTotalMonth1Changed ();

		public const string NameOfGrandTotalMonth1 = "GrandTotalMonth1";

		private static readonly PropertyChangedEventArgs _grandTotalMonth1ChangedEventArgs = new PropertyChangedEventArgs(NameOfGrandTotalMonth1);

		private void OnGrandTotalMonth1Changed()
		{
			OnPropertyChanged(_grandTotalMonth1ChangedEventArgs);
		}

		#endregion

		#endregion

		#region GrandTotalMonth2 : int

		private int _grandTotalMonth2;
		public  int  GrandTotalMonth2
		{
			get { return _grandTotalMonth2; }
			set
			{
				if (_grandTotalMonth2 != value)
				{
					BeforeGrandTotalMonth2Changed(value);
					_grandTotalMonth2 = value;
					AfterGrandTotalMonth2Changed();

					OnGrandTotalMonth2Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeGrandTotalMonth2Changed(int newValue);
		partial void AfterGrandTotalMonth2Changed ();

		public const string NameOfGrandTotalMonth2 = "GrandTotalMonth2";

		private static readonly PropertyChangedEventArgs _grandTotalMonth2ChangedEventArgs = new PropertyChangedEventArgs(NameOfGrandTotalMonth2);

		private void OnGrandTotalMonth2Changed()
		{
			OnPropertyChanged(_grandTotalMonth2ChangedEventArgs);
		}

		#endregion

		#endregion

		#region GrandTotalMonth3 : int

		private int _grandTotalMonth3;
		public  int  GrandTotalMonth3
		{
			get { return _grandTotalMonth3; }
			set
			{
				if (_grandTotalMonth3 != value)
				{
					BeforeGrandTotalMonth3Changed(value);
					_grandTotalMonth3 = value;
					AfterGrandTotalMonth3Changed();

					OnGrandTotalMonth3Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeGrandTotalMonth3Changed(int newValue);
		partial void AfterGrandTotalMonth3Changed ();

		public const string NameOfGrandTotalMonth3 = "GrandTotalMonth3";

		private static readonly PropertyChangedEventArgs _grandTotalMonth3ChangedEventArgs = new PropertyChangedEventArgs(NameOfGrandTotalMonth3);

		private void OnGrandTotalMonth3Changed()
		{
			OnPropertyChanged(_grandTotalMonth3ChangedEventArgs);
		}

		#endregion

		#endregion

		#region GrandTotalMonth4 : int

		private int _grandTotalMonth4;
		public  int  GrandTotalMonth4
		{
			get { return _grandTotalMonth4; }
			set
			{
				if (_grandTotalMonth4 != value)
				{
					BeforeGrandTotalMonth4Changed(value);
					_grandTotalMonth4 = value;
					AfterGrandTotalMonth4Changed();

					OnGrandTotalMonth4Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeGrandTotalMonth4Changed(int newValue);
		partial void AfterGrandTotalMonth4Changed ();

		public const string NameOfGrandTotalMonth4 = "GrandTotalMonth4";

		private static readonly PropertyChangedEventArgs _grandTotalMonth4ChangedEventArgs = new PropertyChangedEventArgs(NameOfGrandTotalMonth4);

		private void OnGrandTotalMonth4Changed()
		{
			OnPropertyChanged(_grandTotalMonth4ChangedEventArgs);
		}

		#endregion

		#endregion

		#region GrandTotalMonth5 : int

		private int _grandTotalMonth5;
		public  int  GrandTotalMonth5
		{
			get { return _grandTotalMonth5; }
			set
			{
				if (_grandTotalMonth5 != value)
				{
					BeforeGrandTotalMonth5Changed(value);
					_grandTotalMonth5 = value;
					AfterGrandTotalMonth5Changed();

					OnGrandTotalMonth5Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeGrandTotalMonth5Changed(int newValue);
		partial void AfterGrandTotalMonth5Changed ();

		public const string NameOfGrandTotalMonth5 = "GrandTotalMonth5";

		private static readonly PropertyChangedEventArgs _grandTotalMonth5ChangedEventArgs = new PropertyChangedEventArgs(NameOfGrandTotalMonth5);

		private void OnGrandTotalMonth5Changed()
		{
			OnPropertyChanged(_grandTotalMonth5ChangedEventArgs);
		}

		#endregion

		#endregion

		#region GrandTotalMonth6 : int

		private int _grandTotalMonth6;
		public  int  GrandTotalMonth6
		{
			get { return _grandTotalMonth6; }
			set
			{
				if (_grandTotalMonth6 != value)
				{
					BeforeGrandTotalMonth6Changed(value);
					_grandTotalMonth6 = value;
					AfterGrandTotalMonth6Changed();

					OnGrandTotalMonth6Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeGrandTotalMonth6Changed(int newValue);
		partial void AfterGrandTotalMonth6Changed ();

		public const string NameOfGrandTotalMonth6 = "GrandTotalMonth6";

		private static readonly PropertyChangedEventArgs _grandTotalMonth6ChangedEventArgs = new PropertyChangedEventArgs(NameOfGrandTotalMonth6);

		private void OnGrandTotalMonth6Changed()
		{
			OnPropertyChanged(_grandTotalMonth6ChangedEventArgs);
		}

		#endregion

		#endregion

		#region GrandTotalMonth7 : int

		private int _grandTotalMonth7;
		public  int  GrandTotalMonth7
		{
			get { return _grandTotalMonth7; }
			set
			{
				if (_grandTotalMonth7 != value)
				{
					BeforeGrandTotalMonth7Changed(value);
					_grandTotalMonth7 = value;
					AfterGrandTotalMonth7Changed();

					OnGrandTotalMonth7Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeGrandTotalMonth7Changed(int newValue);
		partial void AfterGrandTotalMonth7Changed ();

		public const string NameOfGrandTotalMonth7 = "GrandTotalMonth7";

		private static readonly PropertyChangedEventArgs _grandTotalMonth7ChangedEventArgs = new PropertyChangedEventArgs(NameOfGrandTotalMonth7);

		private void OnGrandTotalMonth7Changed()
		{
			OnPropertyChanged(_grandTotalMonth7ChangedEventArgs);
		}

		#endregion

		#endregion

		#region GrandTotalMonth8 : int

		private int _grandTotalMonth8;
		public  int  GrandTotalMonth8
		{
			get { return _grandTotalMonth8; }
			set
			{
				if (_grandTotalMonth8 != value)
				{
					BeforeGrandTotalMonth8Changed(value);
					_grandTotalMonth8 = value;
					AfterGrandTotalMonth8Changed();

					OnGrandTotalMonth8Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeGrandTotalMonth8Changed(int newValue);
		partial void AfterGrandTotalMonth8Changed ();

		public const string NameOfGrandTotalMonth8 = "GrandTotalMonth8";

		private static readonly PropertyChangedEventArgs _grandTotalMonth8ChangedEventArgs = new PropertyChangedEventArgs(NameOfGrandTotalMonth8);

		private void OnGrandTotalMonth8Changed()
		{
			OnPropertyChanged(_grandTotalMonth8ChangedEventArgs);
		}

		#endregion

		#endregion

		#region GrandTotalMonth9 : int

		private int _grandTotalMonth9;
		public  int  GrandTotalMonth9
		{
			get { return _grandTotalMonth9; }
			set
			{
				if (_grandTotalMonth9 != value)
				{
					BeforeGrandTotalMonth9Changed(value);
					_grandTotalMonth9 = value;
					AfterGrandTotalMonth9Changed();

					OnGrandTotalMonth9Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeGrandTotalMonth9Changed(int newValue);
		partial void AfterGrandTotalMonth9Changed ();

		public const string NameOfGrandTotalMonth9 = "GrandTotalMonth9";

		private static readonly PropertyChangedEventArgs _grandTotalMonth9ChangedEventArgs = new PropertyChangedEventArgs(NameOfGrandTotalMonth9);

		private void OnGrandTotalMonth9Changed()
		{
			OnPropertyChanged(_grandTotalMonth9ChangedEventArgs);
		}

		#endregion

		#endregion

		#region GrandTotalMonth10 : int

		private int _grandTotalMonth10;
		public  int  GrandTotalMonth10
		{
			get { return _grandTotalMonth10; }
			set
			{
				if (_grandTotalMonth10 != value)
				{
					BeforeGrandTotalMonth10Changed(value);
					_grandTotalMonth10 = value;
					AfterGrandTotalMonth10Changed();

					OnGrandTotalMonth10Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeGrandTotalMonth10Changed(int newValue);
		partial void AfterGrandTotalMonth10Changed ();

		public const string NameOfGrandTotalMonth10 = "GrandTotalMonth10";

		private static readonly PropertyChangedEventArgs _grandTotalMonth10ChangedEventArgs = new PropertyChangedEventArgs(NameOfGrandTotalMonth10);

		private void OnGrandTotalMonth10Changed()
		{
			OnPropertyChanged(_grandTotalMonth10ChangedEventArgs);
		}

		#endregion

		#endregion

		#region GrandTotalMonth11 : int

		private int _grandTotalMonth11;
		public  int  GrandTotalMonth11
		{
			get { return _grandTotalMonth11; }
			set
			{
				if (_grandTotalMonth11 != value)
				{
					BeforeGrandTotalMonth11Changed(value);
					_grandTotalMonth11 = value;
					AfterGrandTotalMonth11Changed();

					OnGrandTotalMonth11Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeGrandTotalMonth11Changed(int newValue);
		partial void AfterGrandTotalMonth11Changed ();

		public const string NameOfGrandTotalMonth11 = "GrandTotalMonth11";

		private static readonly PropertyChangedEventArgs _grandTotalMonth11ChangedEventArgs = new PropertyChangedEventArgs(NameOfGrandTotalMonth11);

		private void OnGrandTotalMonth11Changed()
		{
			OnPropertyChanged(_grandTotalMonth11ChangedEventArgs);
		}

		#endregion

		#endregion

		#region GrandTotalMonth12 : int

		private int _grandTotalMonth12;
		public  int  GrandTotalMonth12
		{
			get { return _grandTotalMonth12; }
			set
			{
				if (_grandTotalMonth12 != value)
				{
					BeforeGrandTotalMonth12Changed(value);
					_grandTotalMonth12 = value;
					AfterGrandTotalMonth12Changed();

					OnGrandTotalMonth12Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeGrandTotalMonth12Changed(int newValue);
		partial void AfterGrandTotalMonth12Changed ();

		public const string NameOfGrandTotalMonth12 = "GrandTotalMonth12";

		private static readonly PropertyChangedEventArgs _grandTotalMonth12ChangedEventArgs = new PropertyChangedEventArgs(NameOfGrandTotalMonth12);

		private void OnGrandTotalMonth12Changed()
		{
			OnPropertyChanged(_grandTotalMonth12ChangedEventArgs);
		}

		#endregion

		#endregion

		#region Accounts : List<AccountModel>

		private List<AccountModel> _accounts;
		public  List<AccountModel>  Accounts
		{
			get { return _accounts; }
			set
			{
				if (_accounts != value)
				{
					BeforeAccountsChanged(value);
					_accounts = value;
					AfterAccountsChanged();

					OnAccountsChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeAccountsChanged(List<AccountModel> newValue);
		partial void AfterAccountsChanged ();

		public const string NameOfAccounts = "Accounts";

		private static readonly PropertyChangedEventArgs _accountsChangedEventArgs = new PropertyChangedEventArgs(NameOfAccounts);

		private void OnAccountsChanged()
		{
			OnPropertyChanged(_accountsChangedEventArgs);
		}

		#endregion

		#endregion

		#region INotifyPropertyChanged support

#if !SILVERLIGHT
		[field : NonSerialized]
#endif
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
#if SILVERLIGHT
				if (System.Windows.Deployment.Current.Dispatcher.CheckAccess())
					propertyChanged(this, new PropertyChangedEventArgs(propertyName));
				else
					System.Windows.Deployment.Current.Dispatcher.BeginInvoke(
						() =>
						{
							var pc = PropertyChanged;
							if (pc != null)
								pc(this, new PropertyChangedEventArgs(propertyName));
						});
#else
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
#endif
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
#if SILVERLIGHT
				if (System.Windows.Deployment.Current.Dispatcher.CheckAccess())
					propertyChanged(this, arg);
				else
					System.Windows.Deployment.Current.Dispatcher.BeginInvoke(
						() =>
						{
							var pc = PropertyChanged;
							if (pc != null)
								pc(this, arg);
						});
#else
				propertyChanged(this, arg);
#endif
			}
		}

		#endregion
	}
}
