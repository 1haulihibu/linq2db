//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591
#nullable enable

using System;
using System.Collections.Generic;

using LinqToDB;
using LinqToDB.Configuration;
using LinqToDB.Mapping;

namespace LinqToDB.Tools.DataProvider.SqlServer.Schemas
{
	/// <summary>
	/// Database       : master
	/// Data Source    : .
	/// Server Version : 15.00.2080
	/// </summary>
	public partial class SystemDB : LinqToDB.Data.DataConnection
	{

		#region Schemas

		public AvailabilityGroupSchema.DataContext AvailabilityGroup { get; set; } = null!;
		public ChangeTrackingSchema.DataContext    ChangeTracking    { get; set; } = null!;
		public CompatibilitySchema.DataContext     Compatibility     { get; set; } = null!;
		public DynamicManagementSchema.DataContext DynamicManagement { get; set; } = null!;
		public InformationSchema.DataContext       Information       { get; set; } = null!;
		public SystemSchema.DataContext            System            { get; set; } = null!;
		public XmlSchema.DataContext               Xml               { get; set; } = null!;

		public void InitSchemas()
		{
			AvailabilityGroup = new AvailabilityGroupSchema.DataContext(this);
			ChangeTracking    = new ChangeTrackingSchema.   DataContext(this);
			Compatibility     = new CompatibilitySchema.    DataContext(this);
			DynamicManagement = new DynamicManagementSchema.DataContext(this);
			Information       = new InformationSchema.      DataContext(this);
			System            = new SystemSchema.           DataContext(this);
			Xml               = new XmlSchema.              DataContext(this);
		}

		#endregion

		public SystemDB()
		{
			InitSchemas();
			InitDataContext();
			InitMappingSchema();
		}

		public SystemDB(string configuration)
			: base(configuration)
		{
			InitSchemas();
			InitDataContext();
			InitMappingSchema();
		}

		public SystemDB(LinqToDbConnectionOptions options)
			: base(options)
		{
			InitSchemas();
			InitDataContext();
			InitMappingSchema();
		}

		public SystemDB(LinqToDbConnectionOptions<SystemDB> options)
			: base(options)
		{
			InitSchemas();
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();
	}

	public static partial class AvailabilityGroupSchema
	{
		public partial class DataContext
		{
			/// <summary>
			/// Contains one row for each availability database on the instance of SQL Server that is hosting an availability replica for any Always On availability group in the Windows Server Failover Clustering (WSFC) cluster, regardless of whether the local copy database has been joined to the availability group yet.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-availability-databases-cluster-transact-sql?view=sql-server-ver15'>sys.availability_databases_cluster</a>.
			/// </summary>
			public ITable<AvailabilityDatabasesCluster>         AvailabilityDatabasesCluster         { get { return _dataContext.GetTable<AvailabilityDatabasesCluster>(); } }
			/// <summary>
			/// Returns a row for every IP address that is associated with any Always On availability group listener in the Windows Server Failover Clustering (WSFC) cluster.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-availability-group-listener-ip-addresses-transact-sql?view=sql-server-ver15'>sys.availability_group_listener_ip_addresses</a>.
			/// </summary>
			public ITable<AvailabilityGroupListenerIpAddresses> AvailabilityGroupListenerIpAddresses { get { return _dataContext.GetTable<AvailabilityGroupListenerIpAddresses>(); } }
			/// <summary>
			/// For each Always On availability group, returns either zero rows indicating that no network name is associated with the availability group, or returns a row for each availability-group listener configuration in the Windows Server Failover Clustering (WSFC) cluster. This view displays the real-time configuration gathered from cluster.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-availability-group-listeners-transact-sql?view=sql-server-ver15'>sys.availability_group_listeners</a>.
			/// </summary>
			public ITable<AvailabilityGroupListeners>           AvailabilityGroupListeners           { get { return _dataContext.GetTable<AvailabilityGroupListeners>(); } }
			/// <summary>
			/// Returns a row for each availability group for which the local instance of SQL Server hosts an availability replica. Each row contains a cached copy of the availability group metadata.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-availability-groups-transact-sql?view=sql-server-ver15'>sys.availability_groups</a>.
			/// </summary>
			public ITable<AvailabilityGroups>                   AvailabilityGroups                   { get { return _dataContext.GetTable<AvailabilityGroups>(); } }
			/// <summary>
			/// Returns a row for each Always On availability group in the Windows Server Failover Clustering (WSFC) . Each row contains the availability group metadata from the WSFC cluster.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-availability-groups-cluster-transact-sql?view=sql-server-ver15'>sys.availability_groups_cluster</a>.
			/// </summary>
			public ITable<AvailabilityGroupsCluster>            AvailabilityGroupsCluster            { get { return _dataContext.GetTable<AvailabilityGroupsCluster>(); } }
			/// <summary>
			/// Returns a row for the read only routing list of each availability replica in an Always On availability group in the WSFC failover cluster.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-availability-read-only-routing-lists-transact-sql?view=sql-server-ver15'>sys.availability_read_only_routing_lists</a>.
			/// </summary>
			public ITable<AvailabilityReadOnlyRoutingLists>     AvailabilityReadOnlyRoutingLists     { get { return _dataContext.GetTable<AvailabilityReadOnlyRoutingLists>(); } }
			/// <summary>
			/// Returns a row for each of the availability replicas that belong to any Always On availability group in the WSFC failover cluster.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-availability-replicas-transact-sql?view=sql-server-ver15'>sys.availability_replicas</a>.
			/// </summary>
			public ITable<AvailabilityReplicas>                 AvailabilityReplicas                 { get { return _dataContext.GetTable<AvailabilityReplicas>(); } }

			private readonly IDataContext _dataContext;

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		/// <summary>
		/// Contains one row for each availability database on the instance of SQL Server that is hosting an availability replica for any Always On availability group in the Windows Server Failover Clustering (WSFC) cluster, regardless of whether the local copy database has been joined to the availability group yet.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-availability-databases-cluster-transact-sql?view=sql-server-ver15'>sys.availability_databases_cluster</a>.
		/// </summary>
		[Table(Schema="sys", Name="availability_databases_cluster", IsView=true)]
		public partial class AvailabilityDatabasesCluster
		{
			/// <summary>
			/// Unique identifier of the availability group in which the availability group, if any, in which the database is participating.<br/> NULL = database is not part of an availability replica of in availability group.
			/// </summary>
			[Column("group_id"),          NotNull    ] public Guid     GroupID         { get; set; } // uniqueidentifier
			/// <summary>
			/// Unique identifier of the database within the availability group, if any, in which the database is participating. <b>group_database_id</b> is the same for this database on the primary replica and on every secondary replica on which the database has been joined to the availability group.<br/> NULL = database is not part of an availability replica in any availability group.
			/// </summary>
			[Column("group_database_id"), NotNull    ] public Guid     GroupDatabaseID { get; set; } // uniqueidentifier
			/// <summary>
			/// Name of the database that was added to the availability group.
			/// </summary>
			[Column("database_name"),        Nullable] public string?  DatabaseName    { get; set; } // sysname
			[Column("truncation_lsn"),       Nullable] public decimal? TruncationLsn   { get; set; } // numeric(25,0)
		}

		/// <summary>
		/// Returns a row for every IP address that is associated with any Always On availability group listener in the Windows Server Failover Clustering (WSFC) cluster.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-availability-group-listener-ip-addresses-transact-sql?view=sql-server-ver15'>sys.availability_group_listener_ip_addresses</a>.
		/// </summary>
		[Table(Schema="sys", Name="availability_group_listener_ip_addresses", IsView=true)]
		public partial class AvailabilityGroupListenerIpAddresses
		{
			/// <summary>
			/// Resource GUID from Windows Server Failover Clustering (WSFC) cluster.
			/// </summary>
			[Column("listener_id"),                     Nullable] public string? ListenerID                { get; set; } // nvarchar(36)
			/// <summary>
			/// Configured virtual IP address of the availability group listener. Returns a single IPv4 or IPv6 address.
			/// </summary>
			[Column("ip_address"),                      Nullable] public string? IpAddress                 { get; set; } // nvarchar(48)
			/// <summary>
			/// Configured IP subnet mask for the IPv4 address, if any, that is configured for the availability group listener.<br/> NULL = IPv6 subnet
			/// </summary>
			[Column("ip_subnet_mask"),                  Nullable] public string? IpSubnetMask              { get; set; } // nvarchar(15)
			/// <summary>
			/// Whether the IP address is configured by DHCP, one of:<br/> 0 = IP address is not configured by DHCP.<br/> 1 = IP address is configured by DHCP
			/// </summary>
			[Column("is_dhcp"),                      NotNull    ] public bool    IsDhcp                    { get; set; } // bit
			/// <summary>
			/// Network subnet IP address that specifies the subnet to which the IP address belongs.
			/// </summary>
			[Column("network_subnet_ip"),               Nullable] public string? NetworkSubnetIp           { get; set; } // nvarchar(48)
			/// <summary>
			/// Network subnet prefix length of the subnet to which the IP address belongs.
			/// </summary>
			[Column("network_subnet_prefix_length"),    Nullable] public int?    NetworkSubnetPrefixLength { get; set; } // int
			/// <summary>
			/// Network subnet mask of the subnet to which the IP address belongs. <b>network_subnet_ipv4_mask</b> to specify the DHCP &lt;network_subnet_option&gt; options in a WITH DHCP clause of the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/create-availability-group-transact-sql?view=sql-server-ver15'>CREATE AVAILABILITY GROUP</a> or <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/alter-availability-group-transact-sql?view=sql-server-ver15'>ALTER AVAILABILITY GROUP</a>Transact-SQL statement.<br/> NULL = IPv6 subnet
			/// </summary>
			[Column("network_subnet_ipv4_mask"),        Nullable] public string? NetworkSubnetIpv4Mask     { get; set; } // nvarchar(45)
			/// <summary>
			/// IP resource ONLINE/OFFLINE state from the WSFC cluster, one of:<br/> 1 = Online. IP resource is online.<br/> 0 = Offline. IP resource is offline.<br/> 2 = Online Pending. IP resource is offline but is being brought online.<br/> 3 = Failed. IP resource was being brought online but failed.
			/// </summary>
			[Column("state"),                           Nullable] public byte?   State                     { get; set; } // tinyint
			/// <summary>
			/// Description of <b>state</b>, one of:<br/> ONLINE<br/> OFFLINE<br/> ONLINE_PENDING<br/> FAILED
			/// </summary>
			[Column("state_desc"),                      Nullable] public string? StateDesc                 { get; set; } // nvarchar(60)
		}

		/// <summary>
		/// For each Always On availability group, returns either zero rows indicating that no network name is associated with the availability group, or returns a row for each availability-group listener configuration in the Windows Server Failover Clustering (WSFC) cluster. This view displays the real-time configuration gathered from cluster.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-availability-group-listeners-transact-sql?view=sql-server-ver15'>sys.availability_group_listeners</a>.
		/// </summary>
		[Table(Schema="sys", Name="availability_group_listeners", IsView=true)]
		public partial class AvailabilityGroupListeners
		{
			/// <summary>
			/// Availability group ID (<b>group_id</b>) from <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-availability-groups-transact-sql?view=sql-server-ver15'>sys.availability_groups</a>.
			/// </summary>
			[Column("group_id"),                             NotNull    ] public Guid    GroupID                          { get; set; } // uniqueidentifier
			/// <summary>
			/// GUID from the cluster resource ID.
			/// </summary>
			[Column("listener_id"),                             Nullable] public string? ListenerID                       { get; set; } // nvarchar(36)
			/// <summary>
			/// Configured network name (hostname) of the availability group listener.
			/// </summary>
			[Column("dns_name"),                                Nullable] public string? DnsName                          { get; set; } // nvarchar(63)
			/// <summary>
			/// The TCP port number configured for the availability group listener.<br/> NULL = Listener was configured outside SQL Server and its port number has not been added to the availability group. To add the port, pleaseuse the MODIFY LISTENER  option of the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/alter-availability-group-transact-sql?view=sql-server-ver15'>ALTER AVAILABILITY GROUP</a>Transact-SQL statement.
			/// </summary>
			[Column("port"),                                    Nullable] public int?    Port                             { get; set; } // int
			/// <summary>
			/// Whether this IP configuration is conformant, one of:<br/> 1 = Listener is conformant. Only &amp;quot;OR&amp;quot; relations exist among its Internet Protocol (IP) addresses. <em>Conformant</em> encompasses every an IP configuration that was created by the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/create-availability-group-transact-sql?view=sql-server-ver15'>CREATE AVAILABILITY GROUP</a>Transact-SQL statement. In addition, if an IP configuration that was created outside of SQL Server, for example by using the WSFC Failover Cluster Manager, but can be modified by the ALTER AVAILABILITY GROUP tsql statement, the IP configuration qualifies as conformant.<br/> 0 = Listener is nonconformant. Typically, this indicates  an IP address that could not be configured by using SQL Server commands and, instead, was defined directly in the WSFC cluster.
			/// </summary>
			[Column("is_conformant"),                        NotNull    ] public bool    IsConformant                     { get; set; } // bit
			/// <summary>
			/// Cluster IP configuration strings, if any, for this listener. NULL = Listener has no virtual IP addresses. For example:<br/> IPv4 address:  <i>65.55.39.10</i>.<br/> IPv6 address:  <i>2001::4898:23:1002:20f:1fff:feff:b3a3</i>
			/// </summary>
			[Column("ip_configuration_string_from_cluster"),    Nullable] public string? IpConfigurationStringFromCluster { get; set; } // nvarchar(max)
		}

		/// <summary>
		/// Returns a row for each availability group for which the local instance of SQL Server hosts an availability replica. Each row contains a cached copy of the availability group metadata.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-availability-groups-transact-sql?view=sql-server-ver15'>sys.availability_groups</a>.
		/// </summary>
		[Table(Schema="sys", Name="availability_groups", IsView=true)]
		public partial class AvailabilityGroups
		{
			/// <summary>
			/// Unique identifier (GUID) of the availability group.
			/// </summary>
			[Column("group_id"),                                    NotNull    ] public Guid    GroupID                                 { get; set; } // uniqueidentifier
			/// <summary>
			/// Name of the availability group. This is a user-specified name that must be unique within the Windows Server Failover Cluster (WSFC).
			/// </summary>
			[Column("name"),                                           Nullable] public string? Name                                    { get; set; } // sysname
			/// <summary>
			/// Resource ID for the WSFC cluster resource.
			/// </summary>
			[Column("resource_id"),                                    Nullable] public string? ResourceID                              { get; set; } // nvarchar(40)
			/// <summary>
			/// Resource Group ID for the WSFC cluster resource group of the availability group.
			/// </summary>
			[Column("resource_group_id"),                              Nullable] public string? ResourceGroupID                         { get; set; } // nvarchar(40)
			/// <summary>
			/// User-defined failure condition level under which an automatic failover must be triggered, one of the integer values shown in the table immediately below this table.<br/> The failure-condition levels (1-5) range from the least restrictive, level 1, to the most restrictive, level 5. A given condition level encompasses all of the less restrictive levels. Thus, the strictest condition level, 5, includes the four less restrictive condition levels (1-4), level 4 includes levels 1-3, and so forth.<br/> To change this value, use the FAILURE_CONDITION_LEVEL option of the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/alter-availability-group-transact-sql?view=sql-server-ver15'>ALTER AVAILABILITY GROUP</a>Transact-SQL statement.
			/// </summary>
			[Column("failure_condition_level"),                        Nullable] public int?    FailureConditionLevel                   { get; set; } // int
			/// <summary>
			/// Wait time (in milliseconds) for the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../system-stored-procedures/sp-server-diagnostics-transact-sql?view=sql-server-ver15'>sp_server_diagnostics</a> system stored procedure to return server-health information, before the server instance is assumed to be slow or not responding. The default value is 30000 milliseconds (30 seconds).<br/> To change this value, use the HEALTH_CHECK_TIMEOUT option of the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/alter-availability-group-transact-sql?view=sql-server-ver15'>ALTER AVAILABILITY GROUP</a>Transact-SQL statement.
			/// </summary>
			[Column("health_check_timeout"),                           Nullable] public int?    HealthCheckTimeout                      { get; set; } // int
			/// <summary>
			/// Preferred location for performing backups on the availability databases in this availability group. The following are the possible values and their descriptions.<br/> <br/> 0 : Primary. Backups should always occur on the primary replica.<br/> 1 : Secondary only. Performing backups on a secondary replica is preferable.<br/> 2 : Prefer Secondary. Performing backups on a secondary replica preferable, but performing backups on the primary replica is acceptable if no secondary replica is available for backup operations. This is the default behavior.<br/> 3 : Any Replica. No preference about whether backups are performed on the primary replica or on a secondary replica.<br/> <br/> For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../database-engine/availability-groups/windows/active-secondaries-backup-on-secondary-replicas-always-on-availability-groups?view=sql-server-ver15'>Active Secondaries: Backup on Secondary Replicas (Always On Availability Groups)</a>.
			/// </summary>
			[Column("automated_backup_preference"),                    Nullable] public byte?   AutomatedBackupPreference               { get; set; } // tinyint
			/// <summary>
			/// Description of <b>automated_backup_preference</b>, one of:<br/> PRIMARY<br/> SECONDARY_ONLY<br/> SECONDARY<br/> NONE
			/// </summary>
			[Column("automated_backup_preference_desc"),               Nullable] public string? AutomatedBackupPreferenceDesc           { get; set; } // nvarchar(60)
			/// <summary>
			/// The version of the availability group metadata stored in the Windows Failover Cluster. This version number is incremented when new features are added.
			/// </summary>
			[Column("version"),                                        Nullable] public short?  Version                                 { get; set; } // smallint
			/// <summary>
			/// Specifies whether this is a Basic availability group. For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../database-engine/availability-groups/windows/basic-availability-groups-always-on-availability-groups?view=sql-server-ver15'>Basic Availability Groups (Always On Availability Groups)</a>.
			/// </summary>
			[Column("basic_features"),                                 Nullable] public bool?   BasicFeatures                           { get; set; } // bit
			/// <summary>
			/// Specifies whether DTC support has been enabled for this availability group. The <b>DTC_SUPPORT</b> option of <b>CREATE AVAILABILITY GROUP</b> controls this setting.
			/// </summary>
			[Column("dtc_support"),                                    Nullable] public bool?   DtcSupport                              { get; set; } // bit
			/// <summary>
			/// Specifies whether the availability group supports failover for database health conditions. The <b>DB_FAILOVER</b> option of <b>CREATE AVAILABILITY GROUP</b> controls this setting.
			/// </summary>
			[Column("db_failover"),                                    Nullable] public bool?   DbFailover                              { get; set; } // bit
			/// <summary>
			/// Specifies whether this is a distributed availability group. For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../database-engine/availability-groups/windows/distributed-availability-groups?view=sql-server-ver15'>Distributed Availability Groups (Always On Availability Groups)</a>.
			/// </summary>
			[Column("is_distributed"),                                 Nullable] public bool?   IsDistributed                           { get; set; } // bit
			/// <summary>
			/// 0: Windows Server failover cluster <br/><br/>1: External cluster (for example, Linux Pacemaker)<br/><br/>2: None
			/// </summary>
			[Column("cluster_type"),                                   Nullable] public byte?   ClusterType                             { get; set; } // tinyint
			/// <summary>
			/// Text description of cluster type
			/// </summary>
			[Column("cluster_type_desc"),                              Nullable] public string? ClusterTypeDesc                         { get; set; } // nvarchar(60)
			/// <summary>
			/// The number of secondary replicas that must be in a synchronized state for a commit  to complete
			/// </summary>
			[Column("required_synchronized_secondaries_to_commit"),    Nullable] public int?    RequiredSynchronizedSecondariesToCommit { get; set; } // int
			/// <summary>
			/// Identifies the availability group configuration sequence. Incrementally increases every time the availability group primary replica updates the configuration of the group.
			/// </summary>
			[Column("sequence_number"),                                Nullable] public long?   SequenceNumber                          { get; set; } // bigint
			/// <summary>
			/// 1: Big data cluster master instance configured for high-availability. <br/> 0: all other.
			/// </summary>
			[Column("is_contained"),                                   Nullable] public bool?   IsContained                             { get; set; } // bit
		}

		/// <summary>
		/// Returns a row for each Always On availability group in the Windows Server Failover Clustering (WSFC) . Each row contains the availability group metadata from the WSFC cluster.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-availability-groups-cluster-transact-sql?view=sql-server-ver15'>sys.availability_groups_cluster</a>.
		/// </summary>
		[Table(Schema="sys", Name="availability_groups_cluster", IsView=true)]
		public partial class AvailabilityGroupsCluster
		{
			/// <summary>
			/// Unique identifier (GUID) of the availability group.
			/// </summary>
			[Column("group_id"),                         NotNull    ] public Guid    GroupID                       { get; set; } // uniqueidentifier
			/// <summary>
			/// Name of the availability group. This is a user-specified name that must be unique within the Windows Server Failover Cluster (WSFC).
			/// </summary>
			[Column("name"),                                Nullable] public string? Name                          { get; set; } // sysname
			/// <summary>
			/// Resource ID for the WSFC cluster resource.
			/// </summary>
			[Column("resource_id"),                         Nullable] public string? ResourceID                    { get; set; } // nvarchar(40)
			/// <summary>
			/// Resource Group ID for the WSFC cluster resource group of the availability group.
			/// </summary>
			[Column("resource_group_id"),                   Nullable] public string? ResourceGroupID               { get; set; } // nvarchar(40)
			/// <summary>
			/// User-defined failure condition level under which an automatic failover must be triggered, one of the following integer values:<br/> 1: Specifies that an automatic failover should be initiated when any of the following occurs: <br/>- The SQL Server service is down.<br/>- The lease of the availability group for connecting to the WSFC failover cluster expires because no ACK is received from the server instance. For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/https://techcommunity.microsoft.com/t5/sql-server-support/how-it-works-sql-server-alwayson-lease-timeout/ba-p/317268&quot; data-linktype=&quot;external&quot;&gt;How It Works: SQL Server Always On Lease Timeout</a>.<br/> 2: Specifies that an automatic failover should be initiated when any of the following occurs:  <br/>- The instance of SQL Server does not connect to cluster, and the user-specified <b>health_check_timeout</b> threshold of the availability group is exceeded. <br/>- The availability replica is in failed state. <br/>3: Specifies that an automatic failover should be initiated on critical SQL Server internal errors, such as orphaned spinlocks, serious write-access violations, or too much dumping. This is the default value. <br/>4: Specifies that an automatic failover should be initiated on moderate SQL Server internal errors, such as a persistent out-of-memory condition in the SQL Server internal resource pool.<br/>5: Specifies that an automatic failover should be initiated on any qualified failure conditions, including:<br/>- Exhaustion of SQL Engine worker-threads. <br/>- Detection of an unsolvable deadlock.<br/> The failure-condition levels (1-5) range from the least restrictive, level 1, to the most restrictive, level 5. A given condition level encompasses all of the less restrictive levels. Thus, the strictest condition level, 5, includes the four less restrictive condition levels (1-4), level 4 includes levels 1-3, and so forth.<br/> To change this value, use the FAILURE_CONDITION_LEVEL option of the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/alter-availability-group-transact-sql?view=sql-server-ver15'>ALTER AVAILABILITY GROUP</a>Transact-SQL statement.
			/// </summary>
			[Column("failure_condition_level"),             Nullable] public int?    FailureConditionLevel         { get; set; } // int
			/// <summary>
			/// Wait time (in milliseconds) for the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../system-stored-procedures/sp-server-diagnostics-transact-sql?view=sql-server-ver15'>sp_server_diagnostics</a> system stored procedure to return server-health information, before the server instance is assumed to be slow or not responding. The default value is 30000 milliseconds (30 seconds).<br/> To change this value, use the HEALTH_CHECK_TIMEOUT option of <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/alter-availability-group-transact-sql?view=sql-server-ver15'>ALTER AVAILABILITY GROUP</a>Transact-SQL statement.
			/// </summary>
			[Column("health_check_timeout"),                Nullable] public int?    HealthCheckTimeout            { get; set; } // int
			/// <summary>
			/// Preferred location for performing backups on the availability databases in this availability group. One of the following values:<br/> 0: Primary. Backups should always occur on the primary replica.<br/>1: Secondary only. Performing backups on a secondary replica is preferable.<br/>2: Prefer Secondary. Performing backups on a secondary replica preferable, but performing backups on the primary replica is acceptable if no secondary replica is available for backup operations. This is the default behavior.<br/>3: Any Replica. No preference about whether backups are performed on the primary replica or on a secondary replica.<br/> For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../database-engine/availability-groups/windows/active-secondaries-backup-on-secondary-replicas-always-on-availability-groups?view=sql-server-ver15'>Active Secondaries: Backup on Secondary Replicas (Always On Availability Groups)</a>.
			/// </summary>
			[Column("automated_backup_preference"),         Nullable] public byte?   AutomatedBackupPreference     { get; set; } // tinyint
			/// <summary>
			/// Description of <b>automated_backup_preference</b>, one of:<br/> PRIMARY<br/> SECONDARY_ONLY<br/> SECONDARY<br/> NONE
			/// </summary>
			[Column("automated_backup_preference_desc"),    Nullable] public string? AutomatedBackupPreferenceDesc { get; set; } // nvarchar(60)
		}

		/// <summary>
		/// Returns a row for the read only routing list of each availability replica in an Always On availability group in the WSFC failover cluster.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-availability-read-only-routing-lists-transact-sql?view=sql-server-ver15'>sys.availability_read_only_routing_lists</a>.
		/// </summary>
		[Table(Schema="sys", Name="availability_read_only_routing_lists", IsView=true)]
		public partial class AvailabilityReadOnlyRoutingLists
		{
			/// <summary>
			/// Unique ID of the availability replica that owns the routing list.
			/// </summary>
			[Column("replica_id"),           NotNull] public Guid ReplicaID         { get; set; } // uniqueidentifier
			/// <summary>
			/// Priority order for routing (1 is first, 2 is second, and so forth).
			/// </summary>
			[Column("routing_priority"),     NotNull] public int  RoutingPriority   { get; set; } // int
			/// <summary>
			/// Unique ID of the availability replica to which a read-only workload will be routed.
			/// </summary>
			[Column("read_only_replica_id"), NotNull] public Guid ReadOnlyReplicaID { get; set; } // uniqueidentifier
		}

		/// <summary>
		/// Returns a row for each of the availability replicas that belong to any Always On availability group in the WSFC failover cluster.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-availability-replicas-transact-sql?view=sql-server-ver15'>sys.availability_replicas</a>.
		/// </summary>
		[Table(Schema="sys", Name="availability_replicas", IsView=true)]
		public partial class AvailabilityReplicas
		{
			/// <summary>
			/// Unique ID of the replica.
			/// </summary>
			[Column("replica_id"),                            Nullable] public Guid?     ReplicaID                         { get; set; } // uniqueidentifier
			/// <summary>
			/// Unique ID of the availability group to which the replica belongs.
			/// </summary>
			[Column("group_id"),                              Nullable] public Guid?     GroupID                           { get; set; } // uniqueidentifier
			/// <summary>
			/// ID for the local metadata object for availability replicas in the Database Engine.
			/// </summary>
			[Column("replica_metadata_id"),                   Nullable] public int?      ReplicaMetadataID                 { get; set; } // int
			/// <summary>
			/// Server name of the instance of SQL Server that is hosting this replica and, for a non-default instance, its instance name.
			/// </summary>
			[Column("replica_server_name"),                   Nullable] public string?   ReplicaServerName                 { get; set; } // nvarchar(256)
			/// <summary>
			/// Security identifier (SID) registered to this server instance for the external owner of this availability replica.<br/> NULL for non-local availability replicas.
			/// </summary>
			[Column("owner_sid"),                             Nullable] public byte[]?   OwnerSid                          { get; set; } // varbinary(85)
			/// <summary>
			/// String representation of the user-specified database mirroring endpoint that is used by connections between primary and secondary replicas for data synchronization. For information about the syntax of endpoint URLs, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../database-engine/availability-groups/windows/specify-endpoint-url-adding-or-modifying-availability-replica?view=sql-server-ver15'>Specify the Endpoint URL When Adding or Modifying an Availability Replica (SQL Server)</a>.<br/> NULL = Unable to talk to the WSFC failover cluster.<br/> To change this endpoint, use the ENDPOINT_URL option of <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/alter-availability-group-transact-sql?view=sql-server-ver15'>ALTER AVAILABILITY GROUP</a>Transact-SQL statement.
			/// </summary>
			[Column("endpoint_url"),                          Nullable] public string?   EndpointUrl                       { get; set; } // nvarchar(128)
			/// <summary>
			/// The availability mode of the replica, one of:<br/> 0 | Asynchronous commit. The primary replica can commit transactions without waiting for the secondary to write the log to disk.<br/> 1 | Synchronous commit. The primary replica waits to commit a given transaction until the secondary replica has written the transaction to disk.<br/><br/>4 | Configuration only. The primary replica sends availability group configuration metadata to the replica synchronously. User data is not transmitted to the replica. Available in SQL Server 2017 CU1 and later.<br/> For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../database-engine/availability-groups/windows/availability-modes-always-on-availability-groups?view=sql-server-ver15'>Availability Modes (Always On Availability Groups)</a>.
			/// </summary>
			[Column("availability_mode"),                     Nullable] public byte?     AvailabilityMode                  { get; set; } // tinyint
			/// <summary>
			/// Description of <b>availability_mode</b>, one of:<br/> ASYNCHRONOUS_COMMIT<br/> SYNCHRONOUS_COMMIT<br/> CONFIGURATION_ONLY<br/> To change this the availability mode of an availability replica, use the AVAILABILITY_MODE option of <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/alter-availability-group-transact-sql?view=sql-server-ver15'>ALTER AVAILABILITY GROUP</a>Transact-SQL statement.<br/><br/>You cannot change the availability mode of a replica to CONFIGURATION_ONLY. You cannot change a CONFIGURATION_ONLY replica to a secondary or primary replica.
			/// </summary>
			[Column("availability_mode_desc"),                Nullable] public string?   AvailabilityModeDesc              { get; set; } // nvarchar(60)
			/// <summary>
			/// The <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../database-engine/availability-groups/windows/failover-and-failover-modes-always-on-availability-groups?view=sql-server-ver15'>failover mode</a> of the availability replica, one of:<br/> 0 | Automatic failover. The replica is a potential target for automatic failovers.  Automatic failover is supported only if the availability mode is set to synchronous commit (<b>availability_mode</b> = 1) and the availability replica is currently synchronized.<br/> 1 | Manual failover. A failover to a secondary replica set to manual failover must be manually initiated by the database administrator. The type of failover that is performed will depend on whether the secondary replica is synchronized, as follows:<br/> If the availability replica is not synchronizing or is still synchronizing, only forced failover (with possible data loss) can occur.<br/> If the availability mode is set to synchronous commit (<b>availability_mode</b> = 1) and the availability replica is currently synchronized, manual failover without data loss can occur.<br/> To view a rollup of the database synchronization health of every availability database in an availability replica, use the <b>synchronization_health</b> and <b>synchronization_health_desc</b> columns of  the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../system-dynamic-management-views/sys-dm-hadr-availability-replica-states-transact-sql?view=sql-server-ver15'>sys.dm_hadr_availability_replica_states</a> dynamic management view. The rollup considers the synchronization state of every availability database and the availability mode of its availability replica.<br/> <b>Note:</b> To view the synchronization health of a given availability database, query the <b>synchronization_state</b> and <b>synchronization_health</b> columns of the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../system-dynamic-management-views/sys-dm-hadr-database-replica-states-transact-sql?view=sql-server-ver15'>sys.dm_hadr_database_replica_states</a> dynamic management view.
			/// </summary>
			[Column("failover_mode"),                         Nullable] public byte?     FailoverMode                      { get; set; } // tinyint
			/// <summary>
			/// Description of <b>failover_mode</b>, one of:<br/> MANUAL<br/> AUTOMATIC<br/> To change the failover mode, use the FAILOVER_MODE option of <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/alter-availability-group-transact-sql?view=sql-server-ver15'>ALTER AVAILABILITY GROUP</a>Transact-SQL statement.
			/// </summary>
			[Column("failover_mode_desc"),                    Nullable] public string?   FailoverModeDesc                  { get; set; } // nvarchar(60)
			/// <summary>
			/// The time-out period, in seconds. The time-out period is the maximum time that the replica waits to receive a message  from another replica before considering connection between the primary and secondary replica have failed. Session timeout detects whether secondaries are connected the primary replica.<br/> On detecting a failed connection with a secondary replica, the primary replica  considers the secondary replica to be NOT_SYNCHRONIZED. On detecting a failed connection with the primary replica, a secondary replica simply attempts to reconnect.<br/> <b>Note:</b> Session timeouts do not cause automatic failovers.<br/> To change this value, use the SESSION_TIMEOUT option of <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/alter-availability-group-transact-sql?view=sql-server-ver15'>ALTER AVAILABILITY GROUP</a>Transact-SQL statement.
			/// </summary>
			[Column("session_timeout"),                       Nullable] public int?      SessionTimeout                    { get; set; } // int
			/// <summary>
			/// Whether the availability allows all connections or only read-write connections, one of:<br/> 2 = All (default)<br/> 3 = Read write
			/// </summary>
			[Column("primary_role_allow_connections"),        Nullable] public byte?     PrimaryRoleAllowConnections       { get; set; } // tinyint
			/// <summary>
			/// Description of <b>primary_role_allow_connections</b>, one of:<br/> ALL<br/> READ_WRITE
			/// </summary>
			[Column("primary_role_allow_connections_desc"),   Nullable] public string?   PrimaryRoleAllowConnectionsDesc   { get; set; } // nvarchar(60)
			/// <summary>
			/// Whether an availability replica that is performing the secondary role (that is, a secondary replica) can accept connections from clients, one of:<br/> 0 = No. No connections are allowed to the databases in the secondary replica, and the databases are not available for read access. This is the default setting.<br/> 1 = Read only. Only read-only connections are allowed to the databases in the secondary replica. All database(s) in the replica are available for read access.<br/> 2 = All. All connections are allowed to the databases in the secondary replica for read-only access.<br/> For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../database-engine/availability-groups/windows/active-secondaries-readable-secondary-replicas-always-on-availability-groups?view=sql-server-ver15'>Active Secondaries: Readable Secondary Replicas (Always On Availability Groups)</a>.
			/// </summary>
			[Column("secondary_role_allow_connections"),      Nullable] public byte?     SecondaryRoleAllowConnections     { get; set; } // tinyint
			/// <summary>
			/// Description of <b>secondary_role_allow_connections</b>, one of:<br/> NO<br/> READ_ONLY<br/> ALL
			/// </summary>
			[Column("secondary_role_allow_connections_desc"), Nullable] public string?   SecondaryRoleAllowConnectionsDesc { get; set; } // nvarchar(60)
			/// <summary>
			/// Date that the replica was created.<br/> NULL = Replica not on this server instance.
			/// </summary>
			[Column("create_date"),                           Nullable] public DateTime? CreateDate                        { get; set; } // datetime
			/// <summary>
			/// Date that the replica was last modified.<br/> NULL = Replica not on this server instance.
			/// </summary>
			[Column("modify_date"),                           Nullable] public DateTime? ModifyDate                        { get; set; } // datetime
			/// <summary>
			/// Represents the user-specified priority for performing backups on this replica relative to the other replicas in the same availability group. The value is an integer in the range of 0..100.<br/> For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../database-engine/availability-groups/windows/active-secondaries-backup-on-secondary-replicas-always-on-availability-groups?view=sql-server-ver15'>Active Secondaries: Backup on Secondary Replicas (Always On Availability Groups)</a>.
			/// </summary>
			[Column("backup_priority"),                       Nullable] public int?      BackupPriority                    { get; set; } // int
			/// <summary>
			/// Connectivity endpoint (URL) of the read only availability replica. For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../database-engine/availability-groups/windows/configure-read-only-routing-for-an-availability-group-sql-server?view=sql-server-ver15'>Configure Read-Only Routing for an Availability Group (SQL Server)</a>.
			/// </summary>
			[Column("read_only_routing_url"),                 Nullable] public string?   ReadOnlyRoutingUrl                { get; set; } // nvarchar(256)
			/// <summary>
			/// One of: <br/> 0: Automatic &lt;/br&gt;<br/> 1: Manual
			/// </summary>
			[Column("seeding_mode"),                          Nullable] public byte?     SeedingMode                       { get; set; } // tinyint
			/// <summary>
			/// Describes seeding mode. <br/> AUTOMATIC &lt;/br&gt;<br/>MANUAL
			/// </summary>
			[Column("seeding_mode_desc"),                     Nullable] public string?   SeedingModeDesc                   { get; set; } // nvarchar(60)
			[Column("read_write_routing_url"),                Nullable] public string?   ReadWriteRoutingUrl               { get; set; } // nvarchar(256)
		}
	}

	public static partial class ChangeTrackingSchema
	{
		public partial class DataContext
		{
			/// <summary>
			/// Returns one row for each database that has change tracking enabled.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/change-tracking-catalog-views-sys-change-tracking-databases?view=sql-server-ver15'>sys.change_tracking_databases</a>.
			/// </summary>
			public ITable<ChangeTrackingDatabases> ChangeTrackingDatabases { get { return _dataContext.GetTable<ChangeTrackingDatabases>(); } }
			/// <summary>
			/// Returns one row for each table in the current database that has change tracking enabled.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/change-tracking-catalog-views-sys-change-tracking-tables?view=sql-server-ver15'>sys.change_tracking_tables</a>.
			/// </summary>
			public ITable<ChangeTrackingTables>    ChangeTrackingTables    { get { return _dataContext.GetTable<ChangeTrackingTables>(); } }

			private readonly IDataContext _dataContext;

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		/// <summary>
		/// Returns one row for each database that has change tracking enabled.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/change-tracking-catalog-views-sys-change-tracking-databases?view=sql-server-ver15'>sys.change_tracking_databases</a>.
		/// </summary>
		[Table(Schema="sys", Name="change_tracking_databases", IsView=true)]
		public partial class ChangeTrackingDatabases
		{
			/// <summary>
			/// ID of the database. This is unique within the instance of SQL Server.
			/// </summary>
			[Column("database_id"),                 NotNull    ] public int     DatabaseID               { get; set; } // int
			/// <summary>
			/// Indicates whether change tracking data is automatically cleaned up after the configured retention period:<br/> 0 = Off<br/> 1 = On
			/// </summary>
			[Column("is_auto_cleanup_on"),             Nullable] public byte?   IsAutoCleanupOn          { get; set; } // bit
			/// <summary>
			/// If autocleanup is being used, the retention period specifies how long the change tracking data is kept in the database.
			/// </summary>
			[Column("retention_period"),               Nullable] public int?    RetentionPeriod          { get; set; } // int
			/// <summary>
			/// Unit of time for the retention period:<br/> 1 = Minutes<br/> 2 = Hours<br/> 3 = Days
			/// </summary>
			[Column("retention_period_units"),         Nullable] public byte?   RetentionPeriodUnits     { get; set; } // tinyint
			/// <summary>
			/// Specifies the description of the retention period:<br/> Minutes<br/> Hours<br/> Days
			/// </summary>
			[Column("retention_period_units_desc"),    Nullable] public string? RetentionPeriodUnitsDesc { get; set; } // nvarchar(60)
			[Column("max_cleanup_version"),            Nullable] public long?   MaxCleanupVersion        { get; set; } // bigint
		}

		/// <summary>
		/// Returns one row for each table in the current database that has change tracking enabled.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/change-tracking-catalog-views-sys-change-tracking-tables?view=sql-server-ver15'>sys.change_tracking_tables</a>.
		/// </summary>
		[Table(Schema="sys", Name="change_tracking_tables", IsView=true)]
		public partial class ChangeTrackingTables
		{
			/// <summary>
			/// ID of a table that has a change journal. The table can have a change journal even if change tracking is currently off.<br/> The table ID is unique within the database.
			/// </summary>
			[Column("object_id"),                   NotNull    ] public int   ObjectID                { get; set; } // int
			/// <summary>
			/// Current state of change tracking on the table:<br/> 0 = OFF<br/> 1 = ON
			/// </summary>
			[Column("is_track_columns_updated_on"), NotNull    ] public bool  IsTrackColumnsUpdatedOn { get; set; } // bit
			/// <summary>
			/// Minimum valid version of change tracking information that is available for the table.<br/> When obtaining changes from the table that is associated with this row, the value of last_sync_version must be greater than or equal to the version reported by this column. For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../system-functions/change-tracking-min-valid-version-transact-sql?view=sql-server-ver15'>CHANGE_TRACKING_MIN_VALID_VERSION (Transact-SQL)</a>.
			/// </summary>
			[Column("min_valid_version"),              Nullable] public long? MinValidVersion         { get; set; } // bigint
			/// <summary>
			/// Version of the database when change tracking began for the table. This version is usually indicates when change tracking was enabled, but this value is reset if the table is truncated.
			/// </summary>
			[Column("begin_version"),                  Nullable] public long? BeginVersion            { get; set; } // bigint
			/// <summary>
			/// Version up to which cleanup might have removed change tracking information.
			/// </summary>
			[Column("cleanup_version"),                Nullable] public long? CleanupVersion          { get; set; } // bigint

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="ChangeTrackingTables")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}
	}

	public static partial class CompatibilitySchema
	{
		public partial class DataContext
		{
			public ITable<SysAltFiles>         SysAltFiles         { get { return _dataContext.GetTable<SysAltFiles>(); } }
			public ITable<SysCacheObjects>     SysCacheObjects     { get { return _dataContext.GetTable<SysCacheObjects>(); } }
			public ITable<SysCharSets>         SysCharSets         { get { return _dataContext.GetTable<SysCharSets>(); } }
			public ITable<SysColumns>          SysColumns          { get { return _dataContext.GetTable<SysColumns>(); } }
			public ITable<SysComments>         SysComments         { get { return _dataContext.GetTable<SysComments>(); } }
			public ITable<SysConfigures>       SysConfigures       { get { return _dataContext.GetTable<SysConfigures>(); } }
			public ITable<SysConstraints>      SysConstraints      { get { return _dataContext.GetTable<SysConstraints>(); } }
			public ITable<SysCsContainers>     SysCsContainers     { get { return _dataContext.GetTable<SysCsContainers>(); } }
			public ITable<SysCurConfigs>       SysCurConfigs       { get { return _dataContext.GetTable<SysCurConfigs>(); } }
			public ITable<SysCursorColumns>    SysCursorColumns    { get { return _dataContext.GetTable<SysCursorColumns>(); } }
			public ITable<SysCursorRefs>       SysCursorRefs       { get { return _dataContext.GetTable<SysCursorRefs>(); } }
			public ITable<SysCursors>          SysCursors          { get { return _dataContext.GetTable<SysCursors>(); } }
			public ITable<SysCursorTables>     SysCursorTables     { get { return _dataContext.GetTable<SysCursorTables>(); } }
			public ITable<SysDatabases>        SysDatabases        { get { return _dataContext.GetTable<SysDatabases>(); } }
			public ITable<SysDepends>          SysDepends          { get { return _dataContext.GetTable<SysDepends>(); } }
			public ITable<SysDevices>          SysDevices          { get { return _dataContext.GetTable<SysDevices>(); } }
			public ITable<SysFileGroups>       SysFileGroups       { get { return _dataContext.GetTable<SysFileGroups>(); } }
			public ITable<SysFiles>            SysFiles            { get { return _dataContext.GetTable<SysFiles>(); } }
			public ITable<SysForeignKeys>      SysForeignKeys      { get { return _dataContext.GetTable<SysForeignKeys>(); } }
			public ITable<SysFullTextCatalogs> SysFullTextCatalogs { get { return _dataContext.GetTable<SysFullTextCatalogs>(); } }
			public ITable<SysIndexes>          SysIndexes          { get { return _dataContext.GetTable<SysIndexes>(); } }
			public ITable<SysIndexKeys>        SysIndexKeys        { get { return _dataContext.GetTable<SysIndexKeys>(); } }
			public ITable<SysLanguages>        SysLanguages        { get { return _dataContext.GetTable<SysLanguages>(); } }
			public ITable<SysLockInfo>         SysLockInfo         { get { return _dataContext.GetTable<SysLockInfo>(); } }
			public ITable<SysLogins>           SysLogins           { get { return _dataContext.GetTable<SysLogins>(); } }
			public ITable<SysMembers>          SysMembers          { get { return _dataContext.GetTable<SysMembers>(); } }
			public ITable<SysMessages>         SysMessages         { get { return _dataContext.GetTable<SysMessages>(); } }
			public ITable<SysObjects>          SysObjects          { get { return _dataContext.GetTable<SysObjects>(); } }
			public ITable<SysOleDBUsers>       SysOleDBUsers       { get { return _dataContext.GetTable<SysOleDBUsers>(); } }
			public ITable<SysOpenTapes>        SysOpenTapes        { get { return _dataContext.GetTable<SysOpenTapes>(); } }
			public ITable<SysPerfInfo>         SysPerfInfo         { get { return _dataContext.GetTable<SysPerfInfo>(); } }
			public ITable<SysPermissions>      SysPermissions      { get { return _dataContext.GetTable<SysPermissions>(); } }
			public ITable<SysProcesses>        SysProcesses        { get { return _dataContext.GetTable<SysProcesses>(); } }
			public ITable<SysProtects>         SysProtects         { get { return _dataContext.GetTable<SysProtects>(); } }
			public ITable<SysReferences>       SysReferences       { get { return _dataContext.GetTable<SysReferences>(); } }
			public ITable<SysRemoteLogins>     SysRemoteLogins     { get { return _dataContext.GetTable<SysRemoteLogins>(); } }
			public ITable<SysServers>          SysServers          { get { return _dataContext.GetTable<SysServers>(); } }
			public ITable<SysTypes>            SysTypes            { get { return _dataContext.GetTable<SysTypes>(); } }
			public ITable<SysUsers>            SysUsers            { get { return _dataContext.GetTable<SysUsers>(); } }

			private readonly IDataContext _dataContext;

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		[Table(Schema="sys", Name="sysaltfiles", IsView=true)]
		public partial class SysAltFiles
		{
			[Column("fileid"),      Nullable] public short?  Fileid   { get; set; } // smallint
			[Column("groupid"),     Nullable] public short?  Groupid  { get; set; } // smallint
			[Column("size"),     NotNull    ] public int     Size     { get; set; } // int
			[Column("maxsize"),  NotNull    ] public int     Maxsize  { get; set; } // int
			[Column("growth"),   NotNull    ] public int     Growth   { get; set; } // int
			[Column("status"),      Nullable] public int?    Status   { get; set; } // int
			[Column("perf"),        Nullable] public int?    Perf     { get; set; } // int
			[Column("dbid"),        Nullable] public short?  Dbid     { get; set; } // smallint
			[Column("name"),     NotNull    ] public string  Name     { get; set; } = null!; // sysname
			[Column("filename"),    Nullable] public string? Filename { get; set; } // nvarchar(260)
		}

		[Table(Schema="sys", Name="syscacheobjects", IsView=true)]
		public partial class SysCacheObjects
		{
			[Column("bucketid"),     NotNull    ] public int     Bucketid     { get; set; } // int
			[Column("cacheobjtype"), NotNull    ] public string  Cacheobjtype { get; set; } = null!; // nvarchar(50)
			[Column("objtype"),      NotNull    ] public string  Objtype      { get; set; } = null!; // nvarchar(20)
			[Column("objid"),           Nullable] public int?    Objid        { get; set; } // int
			[Column("dbid"),            Nullable] public short?  Dbid         { get; set; } // smallint
			[Column("dbidexec"),        Nullable] public short?  Dbidexec     { get; set; } // smallint
			[Column("uid"),             Nullable] public short?  Uid          { get; set; } // smallint
			[Column("refcounts"),    NotNull    ] public int     Refcounts    { get; set; } // int
			[Column("usecounts"),    NotNull    ] public int     Usecounts    { get; set; } // int
			[Column("pagesused"),       Nullable] public int?    Pagesused    { get; set; } // int
			[Column("setopts"),         Nullable] public int?    Setopts      { get; set; } // int
			[Column("langid"),          Nullable] public short?  Langid       { get; set; } // smallint
			[Column("dateformat"),      Nullable] public short?  Dateformat   { get; set; } // smallint
			[Column("status"),          Nullable] public int?    Status       { get; set; } // int
			[Column("lasttime"),        Nullable] public long?   Lasttime     { get; set; } // bigint
			[Column("maxexectime"),     Nullable] public long?   Maxexectime  { get; set; } // bigint
			[Column("avgexectime"),     Nullable] public long?   Avgexectime  { get; set; } // bigint
			[Column("lastreads"),       Nullable] public long?   Lastreads    { get; set; } // bigint
			[Column("lastwrites"),      Nullable] public long?   Lastwrites   { get; set; } // bigint
			[Column("sqlbytes"),        Nullable] public int?    Sqlbytes     { get; set; } // int
			[Column("sql"),             Nullable] public string? Sql          { get; set; } // nvarchar(3900)
		}

		[Table(Schema="sys", Name="syscharsets", IsView=true)]
		public partial class SysCharSets
		{
			[Column("type"),             NotNull    ] public short   Type             { get; set; } // smallint
			[Column("id"),               NotNull    ] public byte    Id               { get; set; } // tinyint
			[Column("csid"),             NotNull    ] public byte    Csid             { get; set; } // tinyint
			[Column("status"),              Nullable] public short?  Status           { get; set; } // smallint
			[Column("name"),             NotNull    ] public string  Name             { get; set; } = null!; // nvarchar(128)
			[Column("description"),      NotNull    ] public string  Description      { get; set; } = null!; // nvarchar(255)
			[Column("binarydefinition"),    Nullable] public byte[]? Binarydefinition { get; set; } // varbinary(6000)
			[Column("definition"),          Nullable] public byte[]? Definition       { get; set; } // image(16)
		}

		[Table(Schema="sys", Name="syscolumns", IsView=true)]
		public partial class SysColumns
		{
			[Column("name"),            Nullable] public string? Name         { get; set; } // sysname
			[Column("id"),           NotNull    ] public int     Id           { get; set; } // int
			[Column("xtype"),        NotNull    ] public byte    Xtype        { get; set; } // tinyint
			[Column("typestat"),        Nullable] public byte?   Typestat     { get; set; } // tinyint
			[Column("xusertype"),       Nullable] public short?  Xusertype    { get; set; } // smallint
			[Column("length"),       NotNull    ] public short   Length       { get; set; } // smallint
			[Column("xprec"),        NotNull    ] public byte    Xprec        { get; set; } // tinyint
			[Column("xscale"),       NotNull    ] public byte    Xscale       { get; set; } // tinyint
			[Column("colid"),           Nullable] public short?  Colid        { get; set; } // smallint
			[Column("xoffset"),         Nullable] public short?  Xoffset      { get; set; } // smallint
			[Column("bitpos"),          Nullable] public byte?   Bitpos       { get; set; } // tinyint
			[Column("reserved"),        Nullable] public byte?   Reserved     { get; set; } // tinyint
			[Column("colstat"),         Nullable] public short?  Colstat      { get; set; } // smallint
			[Column("cdefault"),     NotNull    ] public int     Cdefault     { get; set; } // int
			[Column("domain"),       NotNull    ] public int     Domain       { get; set; } // int
			[Column("number"),          Nullable] public short?  Number       { get; set; } // smallint
			[Column("colorder"),        Nullable] public short?  Colorder     { get; set; } // smallint
			[Column("autoval"),         Nullable] public byte[]? Autoval      { get; set; } // varbinary(8000)
			[Column("offset"),          Nullable] public short?  Offset       { get; set; } // smallint
			[Column("collationid"),     Nullable] public int?    Collationid  { get; set; } // int
			[Column("language"),        Nullable] public int?    Language     { get; set; } // int
			[Column("status"),          Nullable] public byte?   Status       { get; set; } // tinyint
			[Column("type"),         NotNull    ] public byte    Type         { get; set; } // tinyint
			[Column("usertype"),        Nullable] public short?  Usertype     { get; set; } // smallint
			[Column("printfmt"),        Nullable] public string? Printfmt     { get; set; } // varchar(255)
			[Column("prec"),            Nullable] public short?  Prec         { get; set; } // smallint
			[Column("scale"),           Nullable] public int?    Scale        { get; set; } // int
			[Column("iscomputed"),      Nullable] public int?    Iscomputed   { get; set; } // int
			[Column("isoutparam"),      Nullable] public int?    Isoutparam   { get; set; } // int
			[Column("isnullable"),      Nullable] public int?    Isnullable   { get; set; } // int
			[Column("collation"),       Nullable] public string? Collation    { get; set; } // sysname
			[Column("tdscollation"),    Nullable] public byte[]? Tdscollation { get; set; } // binary(5)
		}

		[Table(Schema="sys", Name="syscomments", IsView=true)]
		public partial class SysComments
		{
			[Column("id"),         NotNull    ] public int     Id         { get; set; } // int
			[Column("number"),        Nullable] public short?  Number     { get; set; } // smallint
			[Column("colid"),      NotNull    ] public short   Colid      { get; set; } // smallint
			[Column("status"),     NotNull    ] public short   Status     { get; set; } // smallint
			[Column("ctext"),         Nullable] public byte[]? Ctext      { get; set; } // varbinary(8000)
			[Column("texttype"),      Nullable] public short?  Texttype   { get; set; } // smallint
			[Column("language"),      Nullable] public short?  Language   { get; set; } // smallint
			[Column("encrypted"),  NotNull    ] public bool    Encrypted  { get; set; } // bit
			[Column("compressed"), NotNull    ] public bool    Compressed { get; set; } // bit
			[Column("text"),          Nullable] public string? Text       { get; set; } // nvarchar(4000)
		}

		[Table(Schema="sys", Name="sysconfigures", IsView=true)]
		public partial class SysConfigures
		{
			[Column("value"),      Nullable] public int?   Value   { get; set; } // int
			[Column("config"),  NotNull    ] public int    Config  { get; set; } // int
			[Column("comment"), NotNull    ] public string Comment { get; set; } = null!; // nvarchar(255)
			[Column("status"),     Nullable] public short? Status  { get; set; } // smallint
		}

		[Table(Schema="sys", Name="sysconstraints", IsView=true)]
		public partial class SysConstraints
		{
			[Column("constid"), NotNull    ] public int    Constid { get; set; } // int
			[Column("id"),      NotNull    ] public int    Id      { get; set; } // int
			[Column("colid"),      Nullable] public short? Colid   { get; set; } // smallint
			[Column("spare1"),     Nullable] public byte?  Spare1  { get; set; } // tinyint
			[Column("status"),     Nullable] public int?   Status  { get; set; } // int
			[Column("actions"),    Nullable] public int?   Actions { get; set; } // int
			[Column("error"),      Nullable] public int?   Error   { get; set; } // int
		}

		[Table(Schema="sys", Name="syscscontainers", IsView=true)]
		public partial class SysCsContainers
		{
			[Column("blob_container_id"),   NotNull    ] public short   BlobContainerID   { get; set; } // smallint
			[Column("blob_container_url"),     Nullable] public string? BlobContainerUrl  { get; set; } // nvarchar(261)
			[Column("blob_container_type"),    Nullable] public byte?   BlobContainerType { get; set; } // tinyint
		}

		[Table(Schema="sys", Name="syscurconfigs", IsView=true)]
		public partial class SysCurConfigs
		{
			[Column("value"),   NotNull    ] public int    Value   { get; set; } // int
			[Column("config"),     Nullable] public short? Config  { get; set; } // smallint
			[Column("comment"), NotNull    ] public string Comment { get; set; } = null!; // nvarchar(255)
			[Column("status"),     Nullable] public short? Status  { get; set; } // smallint
		}

		[Table(Schema="sys", Name="syscursorcolumns", IsView=true)]
		public partial class SysCursorColumns
		{
			[Column("cursor_handle"),                NotNull    ] public int     CursorHandle               { get; set; } // int
			[Column("column_name"),                     Nullable] public string? ColumnName                 { get; set; } // nvarchar(128)
			[Column("ordinal_position"),             NotNull    ] public int     OrdinalPosition            { get; set; } // int
			[Column("column_characteristics_flags"), NotNull    ] public int     ColumnCharacteristicsFlags { get; set; } // int
			[Column("column_size"),                  NotNull    ] public int     ColumnSize                 { get; set; } // int
			[Column("data_type_sql"),                NotNull    ] public int     DataTypeSql                { get; set; } // int
			[Column("column_precision"),             NotNull    ] public byte    ColumnPrecision            { get; set; } // tinyint
			[Column("column_scale"),                 NotNull    ] public byte    ColumnScale                { get; set; } // tinyint
			[Column("order_position"),               NotNull    ] public int     OrderPosition              { get; set; } // int
			[Column("order_direction"),                 Nullable] public string? OrderDirection             { get; set; } // nvarchar(1)
			[Column("hidden_column"),                NotNull    ] public short   HiddenColumn               { get; set; } // smallint
			[Column("columnid"),                     NotNull    ] public int     Columnid                   { get; set; } // int
			[Column("objectid"),                     NotNull    ] public int     Objectid                   { get; set; } // int
			[Column("dbid"),                         NotNull    ] public int     Dbid                       { get; set; } // int
			[Column("dbname"),                          Nullable] public string? Dbname                     { get; set; } // nvarchar(128)
		}

		[Table(Schema="sys", Name="syscursorrefs", IsView=true)]
		public partial class SysCursorRefs
		{
			[Column("reference_name"),    Nullable] public string? ReferenceName { get; set; } // nvarchar(128)
			[Column("cursor_scope"),   NotNull    ] public byte    CursorScope   { get; set; } // tinyint
			[Column("cursor_handl"),   NotNull    ] public int     CursorHandl   { get; set; } // int
		}

		[Table(Schema="sys", Name="syscursors", IsView=true)]
		public partial class SysCursors
		{
			[Column("cursor_handle"),  NotNull    ] public int      CursorHandle  { get; set; } // int
			[Column("cursor_name"),       Nullable] public string?  CursorName    { get; set; } // nvarchar(128)
			[Column("status"),         NotNull    ] public int      Status        { get; set; } // int
			[Column("model"),          NotNull    ] public byte     Model         { get; set; } // tinyint
			[Column("concurrency"),    NotNull    ] public byte     Concurrency   { get; set; } // tinyint
			[Column("scrollable"),     NotNull    ] public byte     Scrollable    { get; set; } // tinyint
			[Column("open_status"),    NotNull    ] public byte     OpenStatus    { get; set; } // tinyint
			[Column("cursor_rows"),       Nullable] public decimal? CursorRows    { get; set; } // numeric(10,0)
			[Column("fetch_status"),   NotNull    ] public short    FetchStatus   { get; set; } // smallint
			[Column("column_count"),   NotNull    ] public short    ColumnCount   { get; set; } // smallint
			[Column("row_count"),         Nullable] public decimal? RowCount      { get; set; } // numeric(10,0)
			[Column("last_operation"), NotNull    ] public byte     LastOperation { get; set; } // tinyint
		}

		[Table(Schema="sys", Name="syscursortables", IsView=true)]
		public partial class SysCursorTables
		{
			[Column("cursor_handle"),  NotNull    ] public int     CursorHandle  { get; set; } // int
			[Column("table_owner"),       Nullable] public string? TableOwner    { get; set; } // nvarchar(128)
			[Column("table_name"),        Nullable] public string? TableName     { get; set; } // nvarchar(128)
			[Column("optimizer_hint"), NotNull    ] public short   OptimizerHint { get; set; } // smallint
			[Column("lock_type"),      NotNull    ] public short   LockType      { get; set; } // smallint
			[Column("server_name"),       Nullable] public string? ServerName    { get; set; } // nvarchar(128)
			[Column("objectid"),       NotNull    ] public int     Objectid      { get; set; } // int
			[Column("dbid"),           NotNull    ] public int     Dbid          { get; set; } // int
			[Column("dbname"),            Nullable] public string? Dbname        { get; set; } // nvarchar(128)
		}

		[Table(Schema="sys", Name="sysdatabases", IsView=true)]
		public partial class SysDatabases
		{
			[Column("name"),         Nullable] public string?   Name      { get; set; } // sysname
			[Column("dbid"),         Nullable] public short?    Dbid      { get; set; } // smallint
			[Column("sid"),          Nullable] public byte[]?   Sid       { get; set; } // varbinary(85)
			[Column("mode"),         Nullable] public short?    Mode      { get; set; } // smallint
			[Column("status"),       Nullable] public int?      Status    { get; set; } // int
			[Column("status2"),      Nullable] public int?      Status2   { get; set; } // int
			[Column("crdate"),    NotNull    ] public DateTime  Crdate    { get; set; } // datetime
			[Column("reserved"),     Nullable] public DateTime? Reserved  { get; set; } // datetime
			[Column("category"),     Nullable] public int?      Category  { get; set; } // int
			[Column("cmptlevel"), NotNull    ] public byte      Cmptlevel { get; set; } // tinyint
			[Column("filename"),     Nullable] public string?   Filename  { get; set; } // nvarchar(260)
			[Column("version"),      Nullable] public short?    Version   { get; set; } // smallint
		}

		[Table(Schema="sys", Name="sysdepends", IsView=true)]
		public partial class SysDepends
		{
			[Column("id"),        NotNull    ] public int    Id        { get; set; } // int
			[Column("depid"),     NotNull    ] public int    Depid     { get; set; } // int
			[Column("number"),       Nullable] public short? Number    { get; set; } // smallint
			[Column("depnumber"),    Nullable] public short? Depnumber { get; set; } // smallint
			[Column("status"),       Nullable] public short? Status    { get; set; } // smallint
			[Column("deptype"),   NotNull    ] public byte   Deptype   { get; set; } // tinyint
			[Column("depdbid"),      Nullable] public short? Depdbid   { get; set; } // smallint
			[Column("depsiteid"),    Nullable] public short? Depsiteid { get; set; } // smallint
			[Column("selall"),    NotNull    ] public bool   Selall    { get; set; } // bit
			[Column("resultobj"), NotNull    ] public bool   Resultobj { get; set; } // bit
			[Column("readobj"),   NotNull    ] public bool   Readobj   { get; set; } // bit
		}

		[Table(Schema="sys", Name="sysdevices", IsView=true)]
		public partial class SysDevices
		{
			[Column("name"),      NotNull    ] public string  Name      { get; set; } = null!; // sysname
			[Column("size"),         Nullable] public int?    Size      { get; set; } // int
			[Column("low"),          Nullable] public int?    Low       { get; set; } // int
			[Column("high"),         Nullable] public int?    High      { get; set; } // int
			[Column("status"),       Nullable] public short?  Status    { get; set; } // smallint
			[Column("cntrltype"),    Nullable] public short?  Cntrltype { get; set; } // smallint
			[Column("phyname"),      Nullable] public string? Phyname   { get; set; } // nvarchar(260)
		}

		[Table(Schema="sys", Name="sysfilegroups", IsView=true)]
		public partial class SysFileGroups
		{
			[Column("groupid"),        Nullable] public short? Groupid     { get; set; } // smallint
			[Column("allocpolicy"),    Nullable] public short? Allocpolicy { get; set; } // smallint
			[Column("status"),         Nullable] public int?   Status      { get; set; } // int
			[Column("groupname"),   NotNull    ] public string Groupname   { get; set; } = null!; // sysname
		}

		[Table(Schema="sys", Name="sysfiles", IsView=true)]
		public partial class SysFiles
		{
			[Column("fileid"),      Nullable] public short?  Fileid   { get; set; } // smallint
			[Column("groupid"),     Nullable] public short?  Groupid  { get; set; } // smallint
			[Column("size"),     NotNull    ] public int     Size     { get; set; } // int
			[Column("maxsize"),  NotNull    ] public int     Maxsize  { get; set; } // int
			[Column("growth"),   NotNull    ] public int     Growth   { get; set; } // int
			[Column("status"),      Nullable] public int?    Status   { get; set; } // int
			[Column("perf"),        Nullable] public int?    Perf     { get; set; } // int
			[Column("name"),     NotNull    ] public string  Name     { get; set; } = null!; // sysname
			[Column("filename"),    Nullable] public string? Filename { get; set; } // nvarchar(260)
		}

		[Table(Schema="sys", Name="sysforeignkeys", IsView=true)]
		public partial class SysForeignKeys
		{
			[Column("constid"), NotNull    ] public int    Constid { get; set; } // int
			[Column("fkeyid"),  NotNull    ] public int    Fkeyid  { get; set; } // int
			[Column("rkeyid"),  NotNull    ] public int    Rkeyid  { get; set; } // int
			[Column("fkey"),       Nullable] public short? Fkey    { get; set; } // smallint
			[Column("rkey"),       Nullable] public short? Rkey    { get; set; } // smallint
			[Column("keyno"),      Nullable] public short? Keyno   { get; set; } // smallint
		}

		[Table(Schema="sys", Name="sysfulltextcatalogs", IsView=true)]
		public partial class SysFullTextCatalogs
		{
			[Column("ftcatid"),    Nullable] public short?  Ftcatid { get; set; } // smallint
			[Column("name"),    NotNull    ] public string  Name    { get; set; } = null!; // sysname
			[Column("status"),     Nullable] public short?  Status  { get; set; } // smallint
			[Column("path"),       Nullable] public string? Path    { get; set; } // nvarchar(260)
		}

		[Table(Schema="sys", Name="sysindexes", IsView=true)]
		public partial class SysIndexes
		{
			[Column("id"),        NotNull    ] public int     Id             { get; set; } // int
			[Column("status"),       Nullable] public int?    Status         { get; set; } // int
			[Column("first"),        Nullable] public byte[]? First          { get; set; } // binary(6)
			[Column("indid"),        Nullable] public short?  Indid          { get; set; } // smallint
			[Column("root"),         Nullable] public byte[]? Root           { get; set; } // binary(6)
			[Column("minlen"),       Nullable] public short?  Minlen         { get; set; } // smallint
			[Column("keycnt"),       Nullable] public short?  Keycnt         { get; set; } // smallint
			[Column("groupid"),      Nullable] public short?  Groupid        { get; set; } // smallint
			[Column("dpages"),       Nullable] public int?    Dpages         { get; set; } // int
			[Column("reserved"),     Nullable] public int?    Reserved       { get; set; } // int
			[Column("used"),         Nullable] public int?    Used           { get; set; } // int
			[Column("rowcnt"),       Nullable] public long?   Rowcnt         { get; set; } // bigint
			[Column("rowmodctr"),    Nullable] public int?    Rowmodctr      { get; set; } // int
			[Column("reserved3"),    Nullable] public byte?   Reserved3      { get; set; } // tinyint
			[Column("reserved4"),    Nullable] public byte?   Reserved4      { get; set; } // tinyint
			[Column("xmaxlen"),      Nullable] public short?  Xmaxlen        { get; set; } // smallint
			[Column("maxirow"),      Nullable] public short?  Maxirow        { get; set; } // smallint
			[Column(),               Nullable] public byte?   OrigFillFactor { get; set; } // tinyint
			[Column(),               Nullable] public byte?   StatVersion    { get; set; } // tinyint
			[Column("reserved2"),    Nullable] public int?    Reserved2      { get; set; } // int
			[Column(),               Nullable] public byte[]? FirstIAM       { get; set; } // binary(6)
			[Column("impid"),        Nullable] public short?  Impid          { get; set; } // smallint
			[Column("lockflags"),    Nullable] public short?  Lockflags      { get; set; } // smallint
			[Column("pgmodctr"),     Nullable] public int?    Pgmodctr       { get; set; } // int
			[Column("keys"),         Nullable] public byte[]? Keys           { get; set; } // varbinary(1088)
			[Column("name"),         Nullable] public string? Name           { get; set; } // sysname
			[Column("statblob"),     Nullable] public byte[]? Statblob       { get; set; } // image(16)
			[Column("maxlen"),       Nullable] public int?    Maxlen         { get; set; } // int
			[Column("rows"),         Nullable] public int?    Rows           { get; set; } // int
		}

		[Table(Schema="sys", Name="sysindexkeys", IsView=true)]
		public partial class SysIndexKeys
		{
			[Column("id"),    NotNull    ] public int    Id    { get; set; } // int
			[Column("indid"),    Nullable] public short? Indid { get; set; } // smallint
			[Column("colid"),    Nullable] public short? Colid { get; set; } // smallint
			[Column("keyno"),    Nullable] public short? Keyno { get; set; } // smallint
		}

		[Table(Schema="sys", Name="syslanguages", IsView=true)]
		public partial class SysLanguages
		{
			[Column("langid"),      NotNull    ] public short   Langid      { get; set; } // smallint
			[Column("dateformat"),  NotNull    ] public string  Dateformat  { get; set; } = null!; // nchar(3)
			[Column("datefirst"),   NotNull    ] public byte    Datefirst   { get; set; } // tinyint
			[Column("upgrade"),        Nullable] public int?    Upgrade     { get; set; } // int
			[Column("name"),        NotNull    ] public string  Name        { get; set; } = null!; // nvarchar(128)
			[Column("alias"),       NotNull    ] public string  Alias       { get; set; } = null!; // nvarchar(128)
			[Column("months"),         Nullable] public string? Months      { get; set; } // nvarchar(372)
			[Column("shortmonths"),    Nullable] public string? Shortmonths { get; set; } // nvarchar(132)
			[Column("days"),           Nullable] public string? Days        { get; set; } // nvarchar(217)
			[Column("lcid"),        NotNull    ] public int     Lcid        { get; set; } // int
			[Column("msglangid"),   NotNull    ] public short   Msglangid   { get; set; } // smallint
		}

		[Table(Schema="sys", Name="syslockinfo", IsView=true)]
		public partial class SysLockInfo
		{
			[Column("rsc_text"),           NotNull    ] public string RscText           { get; set; } = null!; // nchar(32)
			[Column("rsc_bin"),            NotNull    ] public byte[] RscBin            { get; set; } = null!; // binary(16)
			[Column("rsc_valblk"),         NotNull    ] public byte[] RscValblk         { get; set; } = null!; // binary(16)
			[Column("rsc_dbid"),           NotNull    ] public short  RscDbid           { get; set; } // smallint
			[Column("rsc_indid"),          NotNull    ] public short  RscIndid          { get; set; } // smallint
			[Column("rsc_objid"),          NotNull    ] public int    RscObjid          { get; set; } // int
			[Column("rsc_type"),           NotNull    ] public byte   RscType           { get; set; } // tinyint
			[Column("rsc_flag"),           NotNull    ] public byte   RscFlag           { get; set; } // tinyint
			[Column("req_mode"),           NotNull    ] public byte   ReqMode           { get; set; } // tinyint
			[Column("req_status"),         NotNull    ] public byte   ReqStatus         { get; set; } // tinyint
			[Column("req_refcnt"),         NotNull    ] public short  ReqRefcnt         { get; set; } // smallint
			[Column("req_cryrefcnt"),      NotNull    ] public short  ReqCryrefcnt      { get; set; } // smallint
			[Column("req_lifetime"),       NotNull    ] public int    ReqLifetime       { get; set; } // int
			[Column("req_spid"),           NotNull    ] public int    ReqSpid           { get; set; } // int
			[Column("req_ecid"),           NotNull    ] public int    ReqEcid           { get; set; } // int
			[Column("req_ownertype"),      NotNull    ] public short  ReqOwnertype      { get; set; } // smallint
			[Column("req_transactionID"),     Nullable] public long?  ReqTransactionID  { get; set; } // bigint
			[Column("req_transactionUOW"),    Nullable] public Guid?  ReqTransactionUOW { get; set; } // uniqueidentifier
		}

		[Table(Schema="sys", Name="syslogins", IsView=true)]
		public partial class SysLogins
		{
			[Column("sid"),              Nullable] public byte[]?  Sid           { get; set; } // varbinary(85)
			[Column("status"),           Nullable] public short?   Status        { get; set; } // smallint
			[Column("createdate"),    NotNull    ] public DateTime Createdate    { get; set; } // datetime
			[Column("updatedate"),    NotNull    ] public DateTime Updatedate    { get; set; } // datetime
			[Column("accdate"),       NotNull    ] public DateTime Accdate       { get; set; } // datetime
			[Column("totcpu"),           Nullable] public int?     Totcpu        { get; set; } // int
			[Column("totio"),            Nullable] public int?     Totio         { get; set; } // int
			[Column("spacelimit"),       Nullable] public int?     Spacelimit    { get; set; } // int
			[Column("timelimit"),        Nullable] public int?     Timelimit     { get; set; } // int
			[Column("resultlimit"),      Nullable] public int?     Resultlimit   { get; set; } // int
			[Column("name"),          NotNull    ] public string   Name          { get; set; } = null!; // sysname
			[Column("dbname"),           Nullable] public string?  Dbname        { get; set; } // sysname
			[Column("password"),         Nullable] public string?  Password      { get; set; } // sysname
			[Column("language"),         Nullable] public string?  Language      { get; set; } // sysname
			[Column("denylogin"),        Nullable] public int?     Denylogin     { get; set; } // int
			[Column("hasaccess"),        Nullable] public int?     Hasaccess     { get; set; } // int
			[Column("isntname"),         Nullable] public int?     Isntname      { get; set; } // int
			[Column("isntgroup"),        Nullable] public int?     Isntgroup     { get; set; } // int
			[Column("isntuser"),         Nullable] public int?     Isntuser      { get; set; } // int
			[Column("sysadmin"),         Nullable] public int?     Sysadmin      { get; set; } // int
			[Column("securityadmin"),    Nullable] public int?     Securityadmin { get; set; } // int
			[Column("serveradmin"),      Nullable] public int?     Serveradmin   { get; set; } // int
			[Column("setupadmin"),       Nullable] public int?     Setupadmin    { get; set; } // int
			[Column("processadmin"),     Nullable] public int?     Processadmin  { get; set; } // int
			[Column("diskadmin"),        Nullable] public int?     Diskadmin     { get; set; } // int
			[Column("dbcreator"),        Nullable] public int?     Dbcreator     { get; set; } // int
			[Column("bulkadmin"),        Nullable] public int?     Bulkadmin     { get; set; } // int
			[Column("loginname"),     NotNull    ] public string   Loginname     { get; set; } = null!; // sysname
		}

		[Table(Schema="sys", Name="sysmembers", IsView=true)]
		public partial class SysMembers
		{
			[Column("memberuid"), Nullable] public short? Memberuid { get; set; } // smallint
			[Column("groupuid"),  Nullable] public short? Groupuid  { get; set; } // smallint
		}

		[Table(Schema="sys", Name="sysmessages", IsView=true)]
		public partial class SysMessages
		{
			[Column("error"),       NotNull    ] public int     Error       { get; set; } // int
			[Column("severity"),       Nullable] public byte?   Severity    { get; set; } // tinyint
			[Column("dlevel"),         Nullable] public short?  Dlevel      { get; set; } // smallint
			[Column("description"),    Nullable] public string? Description { get; set; } // nvarchar(255)
			[Column("msglangid"),   NotNull    ] public short   Msglangid   { get; set; } // smallint
		}

		[Table(Schema="sys", Name="sysobjects", IsView=true)]
		public partial class SysObjects
		{
			[Column("name"),             NotNull    ] public string   Name           { get; set; } = null!; // sysname
			[Column("id"),               NotNull    ] public int      Id             { get; set; } // int
			[Column("xtype"),            NotNull    ] public string   Xtype          { get; set; } = null!; // char(2)
			[Column("uid"),                 Nullable] public short?   Uid            { get; set; } // smallint
			[Column("info"),                Nullable] public short?   Info           { get; set; } // smallint
			[Column("status"),              Nullable] public int?     Status         { get; set; } // int
			[Column("base_schema_ver"),     Nullable] public int?     BaseSchemaVer  { get; set; } // int
			[Column("replinfo"),            Nullable] public int?     Replinfo       { get; set; } // int
			[Column("parent_obj"),       NotNull    ] public int      ParentObj      { get; set; } // int
			[Column("crdate"),           NotNull    ] public DateTime Crdate         { get; set; } // datetime
			[Column("ftcatid"),             Nullable] public short?   Ftcatid        { get; set; } // smallint
			[Column("schema_ver"),          Nullable] public int?     SchemaVer      { get; set; } // int
			[Column("stats_schema_ver"),    Nullable] public int?     StatsSchemaVer { get; set; } // int
			[Column("type"),                Nullable] public string?  Type           { get; set; } // char(2)
			[Column("userstat"),            Nullable] public short?   Userstat       { get; set; } // smallint
			[Column("sysstat"),             Nullable] public short?   Sysstat        { get; set; } // smallint
			[Column("indexdel"),            Nullable] public short?   Indexdel       { get; set; } // smallint
			[Column("refdate"),          NotNull    ] public DateTime Refdate        { get; set; } // datetime
			[Column("version"),             Nullable] public int?     Version        { get; set; } // int
			[Column("deltrig"),             Nullable] public int?     Deltrig        { get; set; } // int
			[Column("instrig"),             Nullable] public int?     Instrig        { get; set; } // int
			[Column("updtrig"),             Nullable] public int?     Updtrig        { get; set; } // int
			[Column("seltrig"),             Nullable] public int?     Seltrig        { get; set; } // int
			[Column("category"),            Nullable] public int?     Category       { get; set; } // int
			[Column("cache"),               Nullable] public short?   Cache          { get; set; } // smallint
		}

		[Table(Schema="sys", Name="sysoledbusers", IsView=true)]
		public partial class SysOleDBUsers
		{
			[Column("rmtsrvid"),       Nullable] public short?   Rmtsrvid    { get; set; } // smallint
			[Column("rmtloginame"),    Nullable] public string?  Rmtloginame { get; set; } // sysname
			[Column("rmtpassword"),    Nullable] public string?  Rmtpassword { get; set; } // sysname
			[Column("loginsid"),       Nullable] public byte[]?  Loginsid    { get; set; } // varbinary(85)
			[Column("status"),         Nullable] public short?   Status      { get; set; } // smallint
			[Column("changedate"),  NotNull    ] public DateTime Changedate  { get; set; } // datetime
		}

		[Table(Schema="sys", Name="sysopentapes", IsView=true)]
		public partial class SysOpenTapes
		{
			[Column("openTape"), NotNull] public string OpenTape { get; set; } = null!; // nvarchar(64)
		}

		[Table(Schema="sys", Name="sysperfinfo", IsView=true)]
		public partial class SysPerfInfo
		{
			[Column("object_name"),   NotNull    ] public string  ObjectName   { get; set; } = null!; // nchar(128)
			[Column("counter_name"),  NotNull    ] public string  CounterName  { get; set; } = null!; // nchar(128)
			[Column("instance_name"),    Nullable] public string? InstanceName { get; set; } // nchar(128)
			[Column("cntr_value"),    NotNull    ] public long    CntrValue    { get; set; } // bigint
			[Column("cntr_type"),     NotNull    ] public int     CntrType     { get; set; } // int
		}

		[Table(Schema="sys", Name="syspermissions", IsView=true)]
		public partial class SysPermissions
		{
			[Column("id"),      NotNull    ] public int     Id      { get; set; } // int
			[Column("grantee"),    Nullable] public short?  Grantee { get; set; } // smallint
			[Column("grantor"),    Nullable] public short?  Grantor { get; set; } // smallint
			[Column("actadd"),     Nullable] public short?  Actadd  { get; set; } // smallint
			[Column("actmod"),     Nullable] public short?  Actmod  { get; set; } // smallint
			[Column("seladd"),     Nullable] public byte[]? Seladd  { get; set; } // varbinary(4000)
			[Column("selmod"),     Nullable] public byte[]? Selmod  { get; set; } // varbinary(4000)
			[Column("updadd"),     Nullable] public byte[]? Updadd  { get; set; } // varbinary(4000)
			[Column("updmod"),     Nullable] public byte[]? Updmod  { get; set; } // varbinary(4000)
			[Column("refadd"),     Nullable] public byte[]? Refadd  { get; set; } // varbinary(4000)
			[Column("refmod"),     Nullable] public byte[]? Refmod  { get; set; } // varbinary(4000)
		}

		[Table(Schema="sys", Name="sysprocesses", IsView=true)]
		public partial class SysProcesses
		{
			[Column("spid"),          NotNull    ] public short    Spid         { get; set; } // smallint
			[Column("kpid"),          NotNull    ] public short    Kpid         { get; set; } // smallint
			[Column("blocked"),       NotNull    ] public short    Blocked      { get; set; } // smallint
			[Column("waittype"),      NotNull    ] public byte[]   Waittype     { get; set; } = null!; // binary(2)
			[Column("waittime"),      NotNull    ] public long     Waittime     { get; set; } // bigint
			[Column("lastwaittype"),  NotNull    ] public string   Lastwaittype { get; set; } = null!; // nchar(32)
			[Column("waitresource"),  NotNull    ] public string   Waitresource { get; set; } = null!; // nchar(256)
			[Column("dbid"),          NotNull    ] public short    Dbid         { get; set; } // smallint
			[Column("uid"),              Nullable] public short?   Uid          { get; set; } // smallint
			[Column("cpu"),           NotNull    ] public int      Cpu          { get; set; } // int
			[Column("physical_io"),   NotNull    ] public long     PhysicalIo   { get; set; } // bigint
			[Column("memusage"),      NotNull    ] public int      Memusage     { get; set; } // int
			[Column("login_time"),    NotNull    ] public DateTime LoginTime    { get; set; } // datetime
			[Column("last_batch"),    NotNull    ] public DateTime LastBatch    { get; set; } // datetime
			[Column("ecid"),          NotNull    ] public short    Ecid         { get; set; } // smallint
			[Column("open_tran"),     NotNull    ] public short    OpenTran     { get; set; } // smallint
			[Column("status"),        NotNull    ] public string   Status       { get; set; } = null!; // nchar(30)
			[Column("sid"),           NotNull    ] public byte[]   Sid          { get; set; } = null!; // binary(86)
			[Column("hostname"),      NotNull    ] public string   Hostname     { get; set; } = null!; // nchar(128)
			[Column("program_name"),  NotNull    ] public string   ProgramName  { get; set; } = null!; // nchar(128)
			[Column("hostprocess"),   NotNull    ] public string   Hostprocess  { get; set; } = null!; // nchar(10)
			[Column("cmd"),           NotNull    ] public string   Cmd          { get; set; } = null!; // nchar(26)
			[Column("nt_domain"),     NotNull    ] public string   NtDomain     { get; set; } = null!; // nchar(128)
			[Column("nt_username"),   NotNull    ] public string   NtUsername   { get; set; } = null!; // nchar(128)
			[Column("net_address"),   NotNull    ] public string   NetAddress   { get; set; } = null!; // nchar(12)
			[Column("net_library"),   NotNull    ] public string   NetLibrary   { get; set; } = null!; // nchar(12)
			[Column("loginame"),      NotNull    ] public string   Loginame     { get; set; } = null!; // nchar(128)
			[Column("context_info"),  NotNull    ] public byte[]   ContextInfo  { get; set; } = null!; // binary(128)
			[Column("sql_handle"),    NotNull    ] public byte[]   SqlHandle    { get; set; } = null!; // binary(20)
			[Column("stmt_start"),    NotNull    ] public int      StmtStart    { get; set; } // int
			[Column("stmt_end"),      NotNull    ] public int      StmtEnd      { get; set; } // int
			[Column("request_id"),    NotNull    ] public int      RequestID    { get; set; } // int
			[Column("page_resource"),    Nullable] public byte[]?  PageResource { get; set; } // varbinary(8)
		}

		[Table(Schema="sys", Name="sysprotects", IsView=true)]
		public partial class SysProtects
		{
			[Column("id"),          NotNull    ] public int     Id          { get; set; } // int
			[Column("uid"),            Nullable] public short?  Uid         { get; set; } // smallint
			[Column("action"),         Nullable] public byte?   Action      { get; set; } // tinyint
			[Column("protecttype"),    Nullable] public byte?   Protecttype { get; set; } // tinyint
			[Column("columns"),        Nullable] public byte[]? Columns     { get; set; } // varbinary(8000)
			[Column("grantor"),        Nullable] public short?  Grantor     { get; set; } // smallint
		}

		[Table(Schema="sys", Name="sysreferences", IsView=true)]
		public partial class SysReferences
		{
			[Column("constid"),   NotNull    ] public int     Constid   { get; set; } // int
			[Column("fkeyid"),    NotNull    ] public int     Fkeyid    { get; set; } // int
			[Column("rkeyid"),       Nullable] public int?    Rkeyid    { get; set; } // int
			[Column("rkeyindid"),    Nullable] public short?  Rkeyindid { get; set; } // smallint
			[Column("keycnt"),       Nullable] public short?  Keycnt    { get; set; } // smallint
			[Column("forkeys"),      Nullable] public byte[]? Forkeys   { get; set; } // varbinary(32)
			[Column("refkeys"),      Nullable] public byte[]? Refkeys   { get; set; } // varbinary(32)
			[Column("fkeydbid"),     Nullable] public short?  Fkeydbid  { get; set; } // smallint
			[Column("rkeydbid"),     Nullable] public short?  Rkeydbid  { get; set; } // smallint
			[Column("fkey1"),        Nullable] public short?  Fkey1     { get; set; } // smallint
			[Column("fkey2"),        Nullable] public short?  Fkey2     { get; set; } // smallint
			[Column("fkey3"),        Nullable] public short?  Fkey3     { get; set; } // smallint
			[Column("fkey4"),        Nullable] public short?  Fkey4     { get; set; } // smallint
			[Column("fkey5"),        Nullable] public short?  Fkey5     { get; set; } // smallint
			[Column("fkey6"),        Nullable] public short?  Fkey6     { get; set; } // smallint
			[Column("fkey7"),        Nullable] public short?  Fkey7     { get; set; } // smallint
			[Column("fkey8"),        Nullable] public short?  Fkey8     { get; set; } // smallint
			[Column("fkey9"),        Nullable] public short?  Fkey9     { get; set; } // smallint
			[Column("fkey10"),       Nullable] public short?  Fkey10    { get; set; } // smallint
			[Column("fkey11"),       Nullable] public short?  Fkey11    { get; set; } // smallint
			[Column("fkey12"),       Nullable] public short?  Fkey12    { get; set; } // smallint
			[Column("fkey13"),       Nullable] public short?  Fkey13    { get; set; } // smallint
			[Column("fkey14"),       Nullable] public short?  Fkey14    { get; set; } // smallint
			[Column("fkey15"),       Nullable] public short?  Fkey15    { get; set; } // smallint
			[Column("fkey16"),       Nullable] public short?  Fkey16    { get; set; } // smallint
			[Column("rkey1"),        Nullable] public short?  Rkey1     { get; set; } // smallint
			[Column("rkey2"),        Nullable] public short?  Rkey2     { get; set; } // smallint
			[Column("rkey3"),        Nullable] public short?  Rkey3     { get; set; } // smallint
			[Column("rkey4"),        Nullable] public short?  Rkey4     { get; set; } // smallint
			[Column("rkey5"),        Nullable] public short?  Rkey5     { get; set; } // smallint
			[Column("rkey6"),        Nullable] public short?  Rkey6     { get; set; } // smallint
			[Column("rkey7"),        Nullable] public short?  Rkey7     { get; set; } // smallint
			[Column("rkey8"),        Nullable] public short?  Rkey8     { get; set; } // smallint
			[Column("rkey9"),        Nullable] public short?  Rkey9     { get; set; } // smallint
			[Column("rkey10"),       Nullable] public short?  Rkey10    { get; set; } // smallint
			[Column("rkey11"),       Nullable] public short?  Rkey11    { get; set; } // smallint
			[Column("rkey12"),       Nullable] public short?  Rkey12    { get; set; } // smallint
			[Column("rkey13"),       Nullable] public short?  Rkey13    { get; set; } // smallint
			[Column("rkey14"),       Nullable] public short?  Rkey14    { get; set; } // smallint
			[Column("rkey15"),       Nullable] public short?  Rkey15    { get; set; } // smallint
			[Column("rkey16"),       Nullable] public short?  Rkey16    { get; set; } // smallint
		}

		[Table(Schema="sys", Name="sysremotelogins", IsView=true)]
		public partial class SysRemoteLogins
		{
			[Column("remoteserverid"),    Nullable] public short?   Remoteserverid { get; set; } // smallint
			[Column("remoteusername"),    Nullable] public string?  Remoteusername { get; set; } // sysname
			[Column("status"),            Nullable] public short?   Status         { get; set; } // smallint
			[Column("sid"),               Nullable] public byte[]?  Sid            { get; set; } // varbinary(85)
			[Column("changedate"),     NotNull    ] public DateTime Changedate     { get; set; } // datetime
		}

		[Table(Schema="sys", Name="sysservers", IsView=true)]
		public partial class SysServers
		{
			[Column("srvid"),                   Nullable] public short?   Srvid                { get; set; } // smallint
			[Column("srvstatus"),               Nullable] public short?   Srvstatus            { get; set; } // smallint
			[Column("srvname"),              NotNull    ] public string   Srvname              { get; set; } = null!; // sysname
			[Column("srvproduct"),           NotNull    ] public string   Srvproduct           { get; set; } = null!; // sysname
			[Column("providername"),         NotNull    ] public string   Providername         { get; set; } = null!; // nvarchar(128)
			[Column("datasource"),              Nullable] public string?  Datasource           { get; set; } // nvarchar(4000)
			[Column("location"),                Nullable] public string?  Location             { get; set; } // nvarchar(4000)
			[Column("providerstring"),          Nullable] public string?  Providerstring       { get; set; } // nvarchar(4000)
			[Column("schemadate"),           NotNull    ] public DateTime Schemadate           { get; set; } // datetime
			[Column("topologyx"),               Nullable] public int?     Topologyx            { get; set; } // int
			[Column("topologyy"),               Nullable] public int?     Topologyy            { get; set; } // int
			[Column("catalog"),                 Nullable] public string?  Catalog              { get; set; } // sysname
			[Column("srvcollation"),            Nullable] public string?  Srvcollation         { get; set; } // sysname
			[Column("connecttimeout"),          Nullable] public int?     Connecttimeout       { get; set; } // int
			[Column("querytimeout"),            Nullable] public int?     Querytimeout         { get; set; } // int
			[Column("srvnetname"),              Nullable] public string?  Srvnetname           { get; set; } // char(30)
			[Column("isremote"),                Nullable] public bool?    Isremote             { get; set; } // bit
			[Column("rpc"),                  NotNull    ] public bool     Rpc                  { get; set; } // bit
			[Column("pub"),                  NotNull    ] public bool     Pub                  { get; set; } // bit
			[Column("sub"),                     Nullable] public bool?    Sub                  { get; set; } // bit
			[Column("dist"),                    Nullable] public bool?    Dist                 { get; set; } // bit
			[Column("dpub"),                    Nullable] public bool?    Dpub                 { get; set; } // bit
			[Column("rpcout"),               NotNull    ] public bool     Rpcout               { get; set; } // bit
			[Column("dataaccess"),           NotNull    ] public bool     Dataaccess           { get; set; } // bit
			[Column("collationcompatible"),  NotNull    ] public bool     Collationcompatible  { get; set; } // bit
			[Column("system"),               NotNull    ] public bool     System               { get; set; } // bit
			[Column("useremotecollation"),   NotNull    ] public bool     Useremotecollation   { get; set; } // bit
			[Column("lazyschemavalidation"), NotNull    ] public bool     Lazyschemavalidation { get; set; } // bit
			[Column("collation"),               Nullable] public string?  Collation            { get; set; } // sysname
			[Column("nonsqlsub"),               Nullable] public bool?    Nonsqlsub            { get; set; } // bit
		}

		[Table(Schema="sys", Name="systypes", IsView=true)]
		public partial class SysTypes
		{
			[Column("name"),        NotNull    ] public string  Name        { get; set; } = null!; // sysname
			[Column("xtype"),       NotNull    ] public byte    Xtype       { get; set; } // tinyint
			[Column("status"),         Nullable] public byte?   Status      { get; set; } // tinyint
			[Column("xusertype"),      Nullable] public short?  Xusertype   { get; set; } // smallint
			[Column("length"),      NotNull    ] public short   Length      { get; set; } // smallint
			[Column("xprec"),       NotNull    ] public byte    Xprec       { get; set; } // tinyint
			[Column("xscale"),      NotNull    ] public byte    Xscale      { get; set; } // tinyint
			[Column("tdefault"),    NotNull    ] public int     Tdefault    { get; set; } // int
			[Column("domain"),      NotNull    ] public int     Domain      { get; set; } // int
			[Column("uid"),            Nullable] public short?  Uid         { get; set; } // smallint
			[Column("reserved"),       Nullable] public short?  Reserved    { get; set; } // smallint
			[Column("collationid"),    Nullable] public int?    Collationid { get; set; } // int
			[Column("usertype"),       Nullable] public short?  Usertype    { get; set; } // smallint
			[Column("variable"),    NotNull    ] public bool    Variable    { get; set; } // bit
			[Column("allownulls"),     Nullable] public bool?   Allownulls  { get; set; } // bit
			[Column("type"),        NotNull    ] public byte    Type        { get; set; } // tinyint
			[Column("printfmt"),       Nullable] public string? Printfmt    { get; set; } // varchar(255)
			[Column("prec"),           Nullable] public short?  Prec        { get; set; } // smallint
			[Column("scale"),          Nullable] public byte?   Scale       { get; set; } // tinyint
			[Column("collation"),      Nullable] public string? Collation   { get; set; } // sysname
		}

		[Table(Schema="sys", Name="sysusers", IsView=true)]
		public partial class SysUsers
		{
			[Column("uid"),            Nullable] public short?   Uid         { get; set; } // smallint
			[Column("status"),         Nullable] public short?   Status      { get; set; } // smallint
			[Column("name"),        NotNull    ] public string   Name        { get; set; } = null!; // sysname
			[Column("sid"),            Nullable] public byte[]?  Sid         { get; set; } // varbinary(85)
			[Column("roles"),          Nullable] public byte[]?  Roles       { get; set; } // varbinary(2048)
			[Column("createdate"),  NotNull    ] public DateTime Createdate  { get; set; } // datetime
			[Column("updatedate"),  NotNull    ] public DateTime Updatedate  { get; set; } // datetime
			[Column("altuid"),         Nullable] public short?   Altuid      { get; set; } // smallint
			[Column("password"),       Nullable] public byte[]?  Password    { get; set; } // varbinary(256)
			[Column("gid"),            Nullable] public short?   Gid         { get; set; } // smallint
			[Column("environ"),        Nullable] public string?  Environ     { get; set; } // varchar(255)
			[Column("hasdbaccess"),    Nullable] public int?     Hasdbaccess { get; set; } // int
			[Column("islogin"),        Nullable] public int?     Islogin     { get; set; } // int
			[Column("isntname"),       Nullable] public int?     Isntname    { get; set; } // int
			[Column("isntgroup"),      Nullable] public int?     Isntgroup   { get; set; } // int
			[Column("isntuser"),       Nullable] public int?     Isntuser    { get; set; } // int
			[Column("issqluser"),      Nullable] public int?     Issqluser   { get; set; } // int
			[Column("isaliased"),      Nullable] public int?     Isaliased   { get; set; } // int
			[Column("issqlrole"),      Nullable] public int?     Issqlrole   { get; set; } // int
			[Column("isapprole"),      Nullable] public int?     Isapprole   { get; set; } // int
		}
	}

	public static partial class DynamicManagementSchema
	{
		public partial class DataContext
		{
			public ITable<DmAuditActions>                                 DmAuditActions                                 { get { return _dataContext.GetTable<DmAuditActions>(); } }
			public ITable<DmAuditClassTypeMap>                            DmAuditClassTypeMap                            { get { return _dataContext.GetTable<DmAuditClassTypeMap>(); } }
			public ITable<DmBrokerActivatedTasks>                         DmBrokerActivatedTasks                         { get { return _dataContext.GetTable<DmBrokerActivatedTasks>(); } }
			public ITable<DmBrokerConnections>                            DmBrokerConnections                            { get { return _dataContext.GetTable<DmBrokerConnections>(); } }
			public ITable<DmBrokerForwardedMessages>                      DmBrokerForwardedMessages                      { get { return _dataContext.GetTable<DmBrokerForwardedMessages>(); } }
			public ITable<DmBrokerQueueMonitors>                          DmBrokerQueueMonitors                          { get { return _dataContext.GetTable<DmBrokerQueueMonitors>(); } }
			public ITable<DmCacheHitStats>                                DmCacheHitStats                                { get { return _dataContext.GetTable<DmCacheHitStats>(); } }
			public ITable<DmCacheSize>                                    DmCacheSize                                    { get { return _dataContext.GetTable<DmCacheSize>(); } }
			public ITable<DmCacheStats>                                   DmCacheStats                                   { get { return _dataContext.GetTable<DmCacheStats>(); } }
			public ITable<DmCdcErrors>                                    DmCdcErrors                                    { get { return _dataContext.GetTable<DmCdcErrors>(); } }
			public ITable<DmCdcLogScanSessions>                           DmCdcLogScanSessions                           { get { return _dataContext.GetTable<DmCdcLogScanSessions>(); } }
			public ITable<DmClrAppdomains>                                DmClrAppdomains                                { get { return _dataContext.GetTable<DmClrAppdomains>(); } }
			public ITable<DmClrLoadedAssemblies>                          DmClrLoadedAssemblies                          { get { return _dataContext.GetTable<DmClrLoadedAssemblies>(); } }
			public ITable<DmClrProperties>                                DmClrProperties                                { get { return _dataContext.GetTable<DmClrProperties>(); } }
			public ITable<DmClrTasks>                                     DmClrTasks                                     { get { return _dataContext.GetTable<DmClrTasks>(); } }
			public ITable<DmClusterEndpoints>                             DmClusterEndpoints                             { get { return _dataContext.GetTable<DmClusterEndpoints>(); } }
			public ITable<DmColumnEncryptionEnclave>                      DmColumnEncryptionEnclave                      { get { return _dataContext.GetTable<DmColumnEncryptionEnclave>(); } }
			public ITable<DmColumnEncryptionEnclaveOperationStats>        DmColumnEncryptionEnclaveOperationStats        { get { return _dataContext.GetTable<DmColumnEncryptionEnclaveOperationStats>(); } }
			public ITable<DmColumnStoreObjectPool>                        DmColumnStoreObjectPool                        { get { return _dataContext.GetTable<DmColumnStoreObjectPool>(); } }
			public ITable<DmCryptographicProviderProperties>              DmCryptographicProviderProperties              { get { return _dataContext.GetTable<DmCryptographicProviderProperties>(); } }
			public ITable<DmDatabaseEncryptionKeys>                       DmDatabaseEncryptionKeys                       { get { return _dataContext.GetTable<DmDatabaseEncryptionKeys>(); } }
			public ITable<DmDbColumnStoreRowGroupOperationalStats>        DmDbColumnStoreRowGroupOperationalStats        { get { return _dataContext.GetTable<DmDbColumnStoreRowGroupOperationalStats>(); } }
			public ITable<DmDbColumnStoreRowGroupPhysicalStats>           DmDbColumnStoreRowGroupPhysicalStats           { get { return _dataContext.GetTable<DmDbColumnStoreRowGroupPhysicalStats>(); } }
			public ITable<DmDbDataPools>                                  DmDbDataPools                                  { get { return _dataContext.GetTable<DmDbDataPools>(); } }
			public ITable<DmDbExternalLanguageStats>                      DmDbExternalLanguageStats                      { get { return _dataContext.GetTable<DmDbExternalLanguageStats>(); } }
			public ITable<DmDbExternalScriptExecutionStats>               DmDbExternalScriptExecutionStats               { get { return _dataContext.GetTable<DmDbExternalScriptExecutionStats>(); } }
			public ITable<DmDbFileSpaceUsage>                             DmDbFileSpaceUsage                             { get { return _dataContext.GetTable<DmDbFileSpaceUsage>(); } }
			public ITable<DmDbFtsIndexPhysicalStats>                      DmDbFtsIndexPhysicalStats                      { get { return _dataContext.GetTable<DmDbFtsIndexPhysicalStats>(); } }
			public ITable<DmDbIndexUsageStats>                            DmDbIndexUsageStats                            { get { return _dataContext.GetTable<DmDbIndexUsageStats>(); } }
			public ITable<DmDbLogSpaceUsage>                              DmDbLogSpaceUsage                              { get { return _dataContext.GetTable<DmDbLogSpaceUsage>(); } }
			public ITable<DmDbMirroringAutoPageRepair>                    DmDbMirroringAutoPageRepair                    { get { return _dataContext.GetTable<DmDbMirroringAutoPageRepair>(); } }
			public ITable<DmDbMirroringConnections>                       DmDbMirroringConnections                       { get { return _dataContext.GetTable<DmDbMirroringConnections>(); } }
			public ITable<DmDbMirroringPastActions>                       DmDbMirroringPastActions                       { get { return _dataContext.GetTable<DmDbMirroringPastActions>(); } }
			public ITable<DmDbMissingIndexDetails>                        DmDbMissingIndexDetails                        { get { return _dataContext.GetTable<DmDbMissingIndexDetails>(); } }
			public ITable<DmDbMissingIndexGroups>                         DmDbMissingIndexGroups                         { get { return _dataContext.GetTable<DmDbMissingIndexGroups>(); } }
			public ITable<DmDbMissingIndexGroupStats>                     DmDbMissingIndexGroupStats                     { get { return _dataContext.GetTable<DmDbMissingIndexGroupStats>(); } }
			public ITable<DmDbMissingIndexGroupStatsQuery>                DmDbMissingIndexGroupStatsQuery                { get { return _dataContext.GetTable<DmDbMissingIndexGroupStatsQuery>(); } }
			public ITable<DmDbPartitionStats>                             DmDbPartitionStats                             { get { return _dataContext.GetTable<DmDbPartitionStats>(); } }
			public ITable<DmDbPersistedSkuFeatures>                       DmDbPersistedSkuFeatures                       { get { return _dataContext.GetTable<DmDbPersistedSkuFeatures>(); } }
			public ITable<DmDbRdaMigrationStatus>                         DmDbRdaMigrationStatus                         { get { return _dataContext.GetTable<DmDbRdaMigrationStatus>(); } }
			public ITable<DmDbRdaSchemaUpdateStatus>                      DmDbRdaSchemaUpdateStatus                      { get { return _dataContext.GetTable<DmDbRdaSchemaUpdateStatus>(); } }
			public ITable<DmDbScriptLevel>                                DmDbScriptLevel                                { get { return _dataContext.GetTable<DmDbScriptLevel>(); } }
			public ITable<DmDbSessionSpaceUsage>                          DmDbSessionSpaceUsage                          { get { return _dataContext.GetTable<DmDbSessionSpaceUsage>(); } }
			public ITable<DmDbStoragePools>                               DmDbStoragePools                               { get { return _dataContext.GetTable<DmDbStoragePools>(); } }
			public ITable<DmDbTaskSpaceUsage>                             DmDbTaskSpaceUsage                             { get { return _dataContext.GetTable<DmDbTaskSpaceUsage>(); } }
			public ITable<DmDbTuningRecommendations>                      DmDbTuningRecommendations                      { get { return _dataContext.GetTable<DmDbTuningRecommendations>(); } }
			public ITable<DmDbUncontainedEntities>                        DmDbUncontainedEntities                        { get { return _dataContext.GetTable<DmDbUncontainedEntities>(); } }
			public ITable<DmDbXtpCheckpointFiles>                         DmDbXtpCheckpointFiles                         { get { return _dataContext.GetTable<DmDbXtpCheckpointFiles>(); } }
			public ITable<DmDbXtpCheckpointInternals>                     DmDbXtpCheckpointInternals                     { get { return _dataContext.GetTable<DmDbXtpCheckpointInternals>(); } }
			public ITable<DmDbXtpCheckpointStats>                         DmDbXtpCheckpointStats                         { get { return _dataContext.GetTable<DmDbXtpCheckpointStats>(); } }
			public ITable<DmDbXtpGcCycleStats>                            DmDbXtpGcCycleStats                            { get { return _dataContext.GetTable<DmDbXtpGcCycleStats>(); } }
			public ITable<DmDbXtpHashIndexStats>                          DmDbXtpHashIndexStats                          { get { return _dataContext.GetTable<DmDbXtpHashIndexStats>(); } }
			public ITable<DmDbXtpIndexStats>                              DmDbXtpIndexStats                              { get { return _dataContext.GetTable<DmDbXtpIndexStats>(); } }
			public ITable<DmDbXtpMemoryConsumers>                         DmDbXtpMemoryConsumers                         { get { return _dataContext.GetTable<DmDbXtpMemoryConsumers>(); } }
			public ITable<DmDbXtpNonclusteredIndexStats>                  DmDbXtpNonclusteredIndexStats                  { get { return _dataContext.GetTable<DmDbXtpNonclusteredIndexStats>(); } }
			public ITable<DmDbXtpObjectStats>                             DmDbXtpObjectStats                             { get { return _dataContext.GetTable<DmDbXtpObjectStats>(); } }
			public ITable<DmDbXtpTableMemoryStats>                        DmDbXtpTableMemoryStats                        { get { return _dataContext.GetTable<DmDbXtpTableMemoryStats>(); } }
			public ITable<DmDbXtpTransactions>                            DmDbXtpTransactions                            { get { return _dataContext.GetTable<DmDbXtpTransactions>(); } }
			public ITable<DmDistributedExchangeStats>                     DmDistributedExchangeStats                     { get { return _dataContext.GetTable<DmDistributedExchangeStats>(); } }
			public ITable<DmExecBackgroundJobQueue>                       DmExecBackgroundJobQueue                       { get { return _dataContext.GetTable<DmExecBackgroundJobQueue>(); } }
			public ITable<DmExecBackgroundJobQueueStats>                  DmExecBackgroundJobQueueStats                  { get { return _dataContext.GetTable<DmExecBackgroundJobQueueStats>(); } }
			public ITable<DmExecCachedPlans>                              DmExecCachedPlans                              { get { return _dataContext.GetTable<DmExecCachedPlans>(); } }
			public ITable<DmExecComputeNodeErrors>                        DmExecComputeNodeErrors                        { get { return _dataContext.GetTable<DmExecComputeNodeErrors>(); } }
			public ITable<DmExecComputeNodes>                             DmExecComputeNodes                             { get { return _dataContext.GetTable<DmExecComputeNodes>(); } }
			public ITable<DmExecComputeNodeStatus>                        DmExecComputeNodeStatus                        { get { return _dataContext.GetTable<DmExecComputeNodeStatus>(); } }
			public ITable<DmExecComputePools>                             DmExecComputePools                             { get { return _dataContext.GetTable<DmExecComputePools>(); } }
			public ITable<DmExecConnections>                              DmExecConnections                              { get { return _dataContext.GetTable<DmExecConnections>(); } }
			public ITable<DmExecDistributedRequests>                      DmExecDistributedRequests                      { get { return _dataContext.GetTable<DmExecDistributedRequests>(); } }
			public ITable<DmExecDistributedRequestSteps>                  DmExecDistributedRequestSteps                  { get { return _dataContext.GetTable<DmExecDistributedRequestSteps>(); } }
			public ITable<DmExecDistributedSqlRequests>                   DmExecDistributedSqlRequests                   { get { return _dataContext.GetTable<DmExecDistributedSqlRequests>(); } }
			public ITable<DmExecDmsServices>                              DmExecDmsServices                              { get { return _dataContext.GetTable<DmExecDmsServices>(); } }
			public ITable<DmExecDmsWorkers>                               DmExecDmsWorkers                               { get { return _dataContext.GetTable<DmExecDmsWorkers>(); } }
			public ITable<DmExecExternalOperations>                       DmExecExternalOperations                       { get { return _dataContext.GetTable<DmExecExternalOperations>(); } }
			public ITable<DmExecExternalWork>                             DmExecExternalWork                             { get { return _dataContext.GetTable<DmExecExternalWork>(); } }
			public ITable<DmExecFunctionStats>                            DmExecFunctionStats                            { get { return _dataContext.GetTable<DmExecFunctionStats>(); } }
			public ITable<DmExecProcedureStats>                           DmExecProcedureStats                           { get { return _dataContext.GetTable<DmExecProcedureStats>(); } }
			public ITable<DmExecQueryMemoryGrants>                        DmExecQueryMemoryGrants                        { get { return _dataContext.GetTable<DmExecQueryMemoryGrants>(); } }
			public ITable<DmExecQueryOptimizerInfo>                       DmExecQueryOptimizerInfo                       { get { return _dataContext.GetTable<DmExecQueryOptimizerInfo>(); } }
			public ITable<DmExecQueryOptimizerMemoryGateways>             DmExecQueryOptimizerMemoryGateways             { get { return _dataContext.GetTable<DmExecQueryOptimizerMemoryGateways>(); } }
			public ITable<DmExecQueryParallelWorkers>                     DmExecQueryParallelWorkers                     { get { return _dataContext.GetTable<DmExecQueryParallelWorkers>(); } }
			public ITable<DmExecQueryProfiles>                            DmExecQueryProfiles                            { get { return _dataContext.GetTable<DmExecQueryProfiles>(); } }
			public ITable<DmExecQueryResourceSemaphores>                  DmExecQueryResourceSemaphores                  { get { return _dataContext.GetTable<DmExecQueryResourceSemaphores>(); } }
			public ITable<DmExecQueryStats>                               DmExecQueryStats                               { get { return _dataContext.GetTable<DmExecQueryStats>(); } }
			public ITable<DmExecQueryTransformationStats>                 DmExecQueryTransformationStats                 { get { return _dataContext.GetTable<DmExecQueryTransformationStats>(); } }
			public ITable<DmExecRequests>                                 DmExecRequests                                 { get { return _dataContext.GetTable<DmExecRequests>(); } }
			public ITable<DmExecSessions>                                 DmExecSessions                                 { get { return _dataContext.GetTable<DmExecSessions>(); } }
			public ITable<DmExecSessionWaitStats>                         DmExecSessionWaitStats                         { get { return _dataContext.GetTable<DmExecSessionWaitStats>(); } }
			public ITable<DmExecTriggerStats>                             DmExecTriggerStats                             { get { return _dataContext.GetTable<DmExecTriggerStats>(); } }
			public ITable<DmExecValidUseHints>                            DmExecValidUseHints                            { get { return _dataContext.GetTable<DmExecValidUseHints>(); } }
			public ITable<DmExternalScriptExecutionStats>                 DmExternalScriptExecutionStats                 { get { return _dataContext.GetTable<DmExternalScriptExecutionStats>(); } }
			public ITable<DmExternalScriptRequests>                       DmExternalScriptRequests                       { get { return _dataContext.GetTable<DmExternalScriptRequests>(); } }
			public ITable<DmExternalScriptResourceUsageStats>             DmExternalScriptResourceUsageStats             { get { return _dataContext.GetTable<DmExternalScriptResourceUsageStats>(); } }
			public ITable<DmFilestreamFileIoHandles>                      DmFilestreamFileIoHandles                      { get { return _dataContext.GetTable<DmFilestreamFileIoHandles>(); } }
			public ITable<DmFilestreamFileIoRequests>                     DmFilestreamFileIoRequests                     { get { return _dataContext.GetTable<DmFilestreamFileIoRequests>(); } }
			public ITable<DmFilestreamNonTransactedHandles>               DmFilestreamNonTransactedHandles               { get { return _dataContext.GetTable<DmFilestreamNonTransactedHandles>(); } }
			public ITable<DmFtsActiveCatalogs>                            DmFtsActiveCatalogs                            { get { return _dataContext.GetTable<DmFtsActiveCatalogs>(); } }
			public ITable<DmFtsFdhosts>                                   DmFtsFdhosts                                   { get { return _dataContext.GetTable<DmFtsFdhosts>(); } }
			public ITable<DmFtsIndexPopulation>                           DmFtsIndexPopulation                           { get { return _dataContext.GetTable<DmFtsIndexPopulation>(); } }
			public ITable<DmFtsMemoryBuffers>                             DmFtsMemoryBuffers                             { get { return _dataContext.GetTable<DmFtsMemoryBuffers>(); } }
			public ITable<DmFtsMemoryPools>                               DmFtsMemoryPools                               { get { return _dataContext.GetTable<DmFtsMemoryPools>(); } }
			public ITable<DmFtsOutstandingBatches>                        DmFtsOutstandingBatches                        { get { return _dataContext.GetTable<DmFtsOutstandingBatches>(); } }
			public ITable<DmFtsPopulationRanges>                          DmFtsPopulationRanges                          { get { return _dataContext.GetTable<DmFtsPopulationRanges>(); } }
			public ITable<DmFtsSemanticSimilarityPopulation>              DmFtsSemanticSimilarityPopulation              { get { return _dataContext.GetTable<DmFtsSemanticSimilarityPopulation>(); } }
			public ITable<DmHadrAgThreads>                                DmHadrAgThreads                                { get { return _dataContext.GetTable<DmHadrAgThreads>(); } }
			public ITable<DmHadrAutomaticSeeding>                         DmHadrAutomaticSeeding                         { get { return _dataContext.GetTable<DmHadrAutomaticSeeding>(); } }
			public ITable<DmHadrAutoPageRepair>                           DmHadrAutoPageRepair                           { get { return _dataContext.GetTable<DmHadrAutoPageRepair>(); } }
			public ITable<DmHadrAvailabilityGroupStates>                  DmHadrAvailabilityGroupStates                  { get { return _dataContext.GetTable<DmHadrAvailabilityGroupStates>(); } }
			public ITable<DmHadrAvailabilityReplicaClusterNodes>          DmHadrAvailabilityReplicaClusterNodes          { get { return _dataContext.GetTable<DmHadrAvailabilityReplicaClusterNodes>(); } }
			public ITable<DmHadrAvailabilityReplicaClusterStates>         DmHadrAvailabilityReplicaClusterStates         { get { return _dataContext.GetTable<DmHadrAvailabilityReplicaClusterStates>(); } }
			public ITable<DmHadrAvailabilityReplicaStates>                DmHadrAvailabilityReplicaStates                { get { return _dataContext.GetTable<DmHadrAvailabilityReplicaStates>(); } }
			public ITable<DmHadrCluster>                                  DmHadrCluster                                  { get { return _dataContext.GetTable<DmHadrCluster>(); } }
			public ITable<DmHadrClusterMembers>                           DmHadrClusterMembers                           { get { return _dataContext.GetTable<DmHadrClusterMembers>(); } }
			public ITable<DmHadrClusterNetworks>                          DmHadrClusterNetworks                          { get { return _dataContext.GetTable<DmHadrClusterNetworks>(); } }
			public ITable<DmHadrDatabaseReplicaClusterStates>             DmHadrDatabaseReplicaClusterStates             { get { return _dataContext.GetTable<DmHadrDatabaseReplicaClusterStates>(); } }
			public ITable<DmHadrDatabaseReplicaStates>                    DmHadrDatabaseReplicaStates                    { get { return _dataContext.GetTable<DmHadrDatabaseReplicaStates>(); } }
			public ITable<DmHadrDbThreads>                                DmHadrDbThreads                                { get { return _dataContext.GetTable<DmHadrDbThreads>(); } }
			public ITable<DmHadrInstanceNodeMap>                          DmHadrInstanceNodeMap                          { get { return _dataContext.GetTable<DmHadrInstanceNodeMap>(); } }
			public ITable<DmHadrNameIdMap>                                DmHadrNameIdMap                                { get { return _dataContext.GetTable<DmHadrNameIdMap>(); } }
			public ITable<DmHadrPhysicalSeedingStats>                     DmHadrPhysicalSeedingStats                     { get { return _dataContext.GetTable<DmHadrPhysicalSeedingStats>(); } }
			public ITable<DmHpcDeviceStats>                               DmHpcDeviceStats                               { get { return _dataContext.GetTable<DmHpcDeviceStats>(); } }
			public ITable<DmHpcThreadProxyStats>                          DmHpcThreadProxyStats                          { get { return _dataContext.GetTable<DmHpcThreadProxyStats>(); } }
			public ITable<DmIoBackupTapes>                                DmIoBackupTapes                                { get { return _dataContext.GetTable<DmIoBackupTapes>(); } }
			public ITable<DmIoClusterSharedDrives>                        DmIoClusterSharedDrives                        { get { return _dataContext.GetTable<DmIoClusterSharedDrives>(); } }
			public ITable<DmIoClusterValidPathNames>                      DmIoClusterValidPathNames                      { get { return _dataContext.GetTable<DmIoClusterValidPathNames>(); } }
			public ITable<DmIoPendingIoRequests>                          DmIoPendingIoRequests                          { get { return _dataContext.GetTable<DmIoPendingIoRequests>(); } }
			public ITable<DmLogpoolHashentries>                           DmLogpoolHashentries                           { get { return _dataContext.GetTable<DmLogpoolHashentries>(); } }
			public ITable<DmLogpoolStats>                                 DmLogpoolStats                                 { get { return _dataContext.GetTable<DmLogpoolStats>(); } }
			public ITable<DmOsBufferDescriptors>                          DmOsBufferDescriptors                          { get { return _dataContext.GetTable<DmOsBufferDescriptors>(); } }
			public ITable<DmOsBufferPoolExtensionConfiguration>           DmOsBufferPoolExtensionConfiguration           { get { return _dataContext.GetTable<DmOsBufferPoolExtensionConfiguration>(); } }
			public ITable<DmOsChildInstances>                             DmOsChildInstances                             { get { return _dataContext.GetTable<DmOsChildInstances>(); } }
			public ITable<DmOsClusterNodes>                               DmOsClusterNodes                               { get { return _dataContext.GetTable<DmOsClusterNodes>(); } }
			public ITable<DmOsClusterProperties>                          DmOsClusterProperties                          { get { return _dataContext.GetTable<DmOsClusterProperties>(); } }
			public ITable<DmOsDispatcherPools>                            DmOsDispatcherPools                            { get { return _dataContext.GetTable<DmOsDispatcherPools>(); } }
			public ITable<DmOsDispatchers>                                DmOsDispatchers                                { get { return _dataContext.GetTable<DmOsDispatchers>(); } }
			public ITable<DmOsEnumerateFixedDrives>                       DmOsEnumerateFixedDrives                       { get { return _dataContext.GetTable<DmOsEnumerateFixedDrives>(); } }
			public ITable<DmOsHostInfo>                                   DmOsHostInfo                                   { get { return _dataContext.GetTable<DmOsHostInfo>(); } }
			public ITable<DmOsHosts>                                      DmOsHosts                                      { get { return _dataContext.GetTable<DmOsHosts>(); } }
			public ITable<DmOsJobObject>                                  DmOsJobObject                                  { get { return _dataContext.GetTable<DmOsJobObject>(); } }
			public ITable<DmOsLatchStats>                                 DmOsLatchStats                                 { get { return _dataContext.GetTable<DmOsLatchStats>(); } }
			public ITable<DmOsLoadedModules>                              DmOsLoadedModules                              { get { return _dataContext.GetTable<DmOsLoadedModules>(); } }
			public ITable<DmOsMemoryAllocations>                          DmOsMemoryAllocations                          { get { return _dataContext.GetTable<DmOsMemoryAllocations>(); } }
			public ITable<DmOsMemoryBrokerClerks>                         DmOsMemoryBrokerClerks                         { get { return _dataContext.GetTable<DmOsMemoryBrokerClerks>(); } }
			public ITable<DmOsMemoryBrokers>                              DmOsMemoryBrokers                              { get { return _dataContext.GetTable<DmOsMemoryBrokers>(); } }
			public ITable<DmOsMemoryCacheClockHands>                      DmOsMemoryCacheClockHands                      { get { return _dataContext.GetTable<DmOsMemoryCacheClockHands>(); } }
			public ITable<DmOsMemoryCacheCounters>                        DmOsMemoryCacheCounters                        { get { return _dataContext.GetTable<DmOsMemoryCacheCounters>(); } }
			public ITable<DmOsMemoryCacheEntries>                         DmOsMemoryCacheEntries                         { get { return _dataContext.GetTable<DmOsMemoryCacheEntries>(); } }
			public ITable<DmOsMemoryCacheHashTables>                      DmOsMemoryCacheHashTables                      { get { return _dataContext.GetTable<DmOsMemoryCacheHashTables>(); } }
			public ITable<DmOsMemoryClerks>                               DmOsMemoryClerks                               { get { return _dataContext.GetTable<DmOsMemoryClerks>(); } }
			public ITable<DmOsMemoryNodeAccessStats>                      DmOsMemoryNodeAccessStats                      { get { return _dataContext.GetTable<DmOsMemoryNodeAccessStats>(); } }
			public ITable<DmOsMemoryNodes>                                DmOsMemoryNodes                                { get { return _dataContext.GetTable<DmOsMemoryNodes>(); } }
			public ITable<DmOsMemoryObjects>                              DmOsMemoryObjects                              { get { return _dataContext.GetTable<DmOsMemoryObjects>(); } }
			public ITable<DmOsMemoryPools>                                DmOsMemoryPools                                { get { return _dataContext.GetTable<DmOsMemoryPools>(); } }
			public ITable<DmOsNodes>                                      DmOsNodes                                      { get { return _dataContext.GetTable<DmOsNodes>(); } }
			public ITable<DmOsPerformanceCounters>                        DmOsPerformanceCounters                        { get { return _dataContext.GetTable<DmOsPerformanceCounters>(); } }
			public ITable<DmOsProcessMemory>                              DmOsProcessMemory                              { get { return _dataContext.GetTable<DmOsProcessMemory>(); } }
			public ITable<DmOsRingBuffers>                                DmOsRingBuffers                                { get { return _dataContext.GetTable<DmOsRingBuffers>(); } }
			public ITable<DmOsSchedulers>                                 DmOsSchedulers                                 { get { return _dataContext.GetTable<DmOsSchedulers>(); } }
			public ITable<DmOsServerDiagnosticsLogConfigurations>         DmOsServerDiagnosticsLogConfigurations         { get { return _dataContext.GetTable<DmOsServerDiagnosticsLogConfigurations>(); } }
			public ITable<DmOsSpinlockStats>                              DmOsSpinlockStats                              { get { return _dataContext.GetTable<DmOsSpinlockStats>(); } }
			public ITable<DmOsStacks>                                     DmOsStacks                                     { get { return _dataContext.GetTable<DmOsStacks>(); } }
			public ITable<DmOsSublatches>                                 DmOsSublatches                                 { get { return _dataContext.GetTable<DmOsSublatches>(); } }
			public ITable<DmOsSysInfo>                                    DmOsSysInfo                                    { get { return _dataContext.GetTable<DmOsSysInfo>(); } }
			public ITable<DmOsSysMemory>                                  DmOsSysMemory                                  { get { return _dataContext.GetTable<DmOsSysMemory>(); } }
			public ITable<DmOsTasks>                                      DmOsTasks                                      { get { return _dataContext.GetTable<DmOsTasks>(); } }
			public ITable<DmOsThreads>                                    DmOsThreads                                    { get { return _dataContext.GetTable<DmOsThreads>(); } }
			public ITable<DmOsVirtualAddressDump>                         DmOsVirtualAddressDump                         { get { return _dataContext.GetTable<DmOsVirtualAddressDump>(); } }
			public ITable<DmOsWaitingTasks>                               DmOsWaitingTasks                               { get { return _dataContext.GetTable<DmOsWaitingTasks>(); } }
			public ITable<DmOsWaitStats>                                  DmOsWaitStats                                  { get { return _dataContext.GetTable<DmOsWaitStats>(); } }
			public ITable<DmOsWindowsInfo>                                DmOsWindowsInfo                                { get { return _dataContext.GetTable<DmOsWindowsInfo>(); } }
			public ITable<DmOsWorkerLocalStorage>                         DmOsWorkerLocalStorage                         { get { return _dataContext.GetTable<DmOsWorkerLocalStorage>(); } }
			public ITable<DmOsWorkers>                                    DmOsWorkers                                    { get { return _dataContext.GetTable<DmOsWorkers>(); } }
			public ITable<DmPalCpuStats>                                  DmPalCpuStats                                  { get { return _dataContext.GetTable<DmPalCpuStats>(); } }
			public ITable<DmPalDiskStats>                                 DmPalDiskStats                                 { get { return _dataContext.GetTable<DmPalDiskStats>(); } }
			public ITable<DmPalNetStats>                                  DmPalNetStats                                  { get { return _dataContext.GetTable<DmPalNetStats>(); } }
			public ITable<DmPalProcesses>                                 DmPalProcesses                                 { get { return _dataContext.GetTable<DmPalProcesses>(); } }
			public ITable<DmPalSpinlockStats>                             DmPalSpinlockStats                             { get { return _dataContext.GetTable<DmPalSpinlockStats>(); } }
			public ITable<DmPalVmStats>                                   DmPalVmStats                                   { get { return _dataContext.GetTable<DmPalVmStats>(); } }
			public ITable<DmPalWaitStats>                                 DmPalWaitStats                                 { get { return _dataContext.GetTable<DmPalWaitStats>(); } }
			public ITable<DmQnSubscriptions>                              DmQnSubscriptions                              { get { return _dataContext.GetTable<DmQnSubscriptions>(); } }
			public ITable<DmReplArticles>                                 DmReplArticles                                 { get { return _dataContext.GetTable<DmReplArticles>(); } }
			public ITable<DmReplSchemas>                                  DmReplSchemas                                  { get { return _dataContext.GetTable<DmReplSchemas>(); } }
			public ITable<DmReplTranhash>                                 DmReplTranhash                                 { get { return _dataContext.GetTable<DmReplTranhash>(); } }
			public ITable<DmReplTraninfo>                                 DmReplTraninfo                                 { get { return _dataContext.GetTable<DmReplTraninfo>(); } }
			public ITable<DmResourceGovernorConfiguration>                DmResourceGovernorConfiguration                { get { return _dataContext.GetTable<DmResourceGovernorConfiguration>(); } }
			public ITable<DmResourceGovernorExternalResourcePoolAffinity> DmResourceGovernorExternalResourcePoolAffinity { get { return _dataContext.GetTable<DmResourceGovernorExternalResourcePoolAffinity>(); } }
			public ITable<DmResourceGovernorExternalResourcePools>        DmResourceGovernorExternalResourcePools        { get { return _dataContext.GetTable<DmResourceGovernorExternalResourcePools>(); } }
			public ITable<DmResourceGovernorResourcePoolAffinity>         DmResourceGovernorResourcePoolAffinity         { get { return _dataContext.GetTable<DmResourceGovernorResourcePoolAffinity>(); } }
			public ITable<DmResourceGovernorResourcePools>                DmResourceGovernorResourcePools                { get { return _dataContext.GetTable<DmResourceGovernorResourcePools>(); } }
			public ITable<DmResourceGovernorResourcePoolVolumes>          DmResourceGovernorResourcePoolVolumes          { get { return _dataContext.GetTable<DmResourceGovernorResourcePoolVolumes>(); } }
			public ITable<DmResourceGovernorWorkloadGroups>               DmResourceGovernorWorkloadGroups               { get { return _dataContext.GetTable<DmResourceGovernorWorkloadGroups>(); } }
			public ITable<DmServerAuditStatus>                            DmServerAuditStatus                            { get { return _dataContext.GetTable<DmServerAuditStatus>(); } }
			public ITable<DmServerMemoryDumps>                            DmServerMemoryDumps                            { get { return _dataContext.GetTable<DmServerMemoryDumps>(); } }
			public ITable<DmServerRegistry>                               DmServerRegistry                               { get { return _dataContext.GetTable<DmServerRegistry>(); } }
			public ITable<DmServerServices>                               DmServerServices                               { get { return _dataContext.GetTable<DmServerServices>(); } }
			public ITable<DmTcpListenerStates>                            DmTcpListenerStates                            { get { return _dataContext.GetTable<DmTcpListenerStates>(); } }
			public ITable<DmTranAbortedTransactions>                      DmTranAbortedTransactions                      { get { return _dataContext.GetTable<DmTranAbortedTransactions>(); } }
			public ITable<DmTranActiveSnapshotDatabaseTransactions>       DmTranActiveSnapshotDatabaseTransactions       { get { return _dataContext.GetTable<DmTranActiveSnapshotDatabaseTransactions>(); } }
			public ITable<DmTranActiveTransactions>                       DmTranActiveTransactions                       { get { return _dataContext.GetTable<DmTranActiveTransactions>(); } }
			public ITable<DmTranCommitTable>                              DmTranCommitTable                              { get { return _dataContext.GetTable<DmTranCommitTable>(); } }
			public ITable<DmTranCurrentSnapshot>                          DmTranCurrentSnapshot                          { get { return _dataContext.GetTable<DmTranCurrentSnapshot>(); } }
			public ITable<DmTranCurrentTransaction>                       DmTranCurrentTransaction                       { get { return _dataContext.GetTable<DmTranCurrentTransaction>(); } }
			public ITable<DmTranDatabaseTransactions>                     DmTranDatabaseTransactions                     { get { return _dataContext.GetTable<DmTranDatabaseTransactions>(); } }
			public ITable<DmTranGlobalRecoveryTransactions>               DmTranGlobalRecoveryTransactions               { get { return _dataContext.GetTable<DmTranGlobalRecoveryTransactions>(); } }
			public ITable<DmTranGlobalTransactions>                       DmTranGlobalTransactions                       { get { return _dataContext.GetTable<DmTranGlobalTransactions>(); } }
			public ITable<DmTranGlobalTransactionsEnlistments>            DmTranGlobalTransactionsEnlistments            { get { return _dataContext.GetTable<DmTranGlobalTransactionsEnlistments>(); } }
			public ITable<DmTranGlobalTransactionsLog>                    DmTranGlobalTransactionsLog                    { get { return _dataContext.GetTable<DmTranGlobalTransactionsLog>(); } }
			public ITable<DmTranLocks>                                    DmTranLocks                                    { get { return _dataContext.GetTable<DmTranLocks>(); } }
			public ITable<DmTranPersistentVersionStore>                   DmTranPersistentVersionStore                   { get { return _dataContext.GetTable<DmTranPersistentVersionStore>(); } }
			public ITable<DmTranPersistentVersionStoreStats>              DmTranPersistentVersionStoreStats              { get { return _dataContext.GetTable<DmTranPersistentVersionStoreStats>(); } }
			public ITable<DmTranSessionTransactions>                      DmTranSessionTransactions                      { get { return _dataContext.GetTable<DmTranSessionTransactions>(); } }
			public ITable<DmTranTopVersionGenerators>                     DmTranTopVersionGenerators                     { get { return _dataContext.GetTable<DmTranTopVersionGenerators>(); } }
			public ITable<DmTranTransactionsSnapshot>                     DmTranTransactionsSnapshot                     { get { return _dataContext.GetTable<DmTranTransactionsSnapshot>(); } }
			public ITable<DmTranVersionStore>                             DmTranVersionStore                             { get { return _dataContext.GetTable<DmTranVersionStore>(); } }
			public ITable<DmTranVersionStoreSpaceUsage>                   DmTranVersionStoreSpaceUsage                   { get { return _dataContext.GetTable<DmTranVersionStoreSpaceUsage>(); } }
			public ITable<DmXeMapValues>                                  DmXeMapValues                                  { get { return _dataContext.GetTable<DmXeMapValues>(); } }
			public ITable<DmXeObjectColumns>                              DmXeObjectColumns                              { get { return _dataContext.GetTable<DmXeObjectColumns>(); } }
			public ITable<DmXeObjects>                                    DmXeObjects                                    { get { return _dataContext.GetTable<DmXeObjects>(); } }
			public ITable<DmXePackages>                                   DmXePackages                                   { get { return _dataContext.GetTable<DmXePackages>(); } }
			public ITable<DmXeSessionEventActions>                        DmXeSessionEventActions                        { get { return _dataContext.GetTable<DmXeSessionEventActions>(); } }
			public ITable<DmXeSessionEvents>                              DmXeSessionEvents                              { get { return _dataContext.GetTable<DmXeSessionEvents>(); } }
			public ITable<DmXeSessionObjectColumns>                       DmXeSessionObjectColumns                       { get { return _dataContext.GetTable<DmXeSessionObjectColumns>(); } }
			public ITable<DmXeSessions>                                   DmXeSessions                                   { get { return _dataContext.GetTable<DmXeSessions>(); } }
			public ITable<DmXeSessionTargets>                             DmXeSessionTargets                             { get { return _dataContext.GetTable<DmXeSessionTargets>(); } }
			public ITable<DmXtpGcQueueStats>                              DmXtpGcQueueStats                              { get { return _dataContext.GetTable<DmXtpGcQueueStats>(); } }
			public ITable<DmXtpGcStats>                                   DmXtpGcStats                                   { get { return _dataContext.GetTable<DmXtpGcStats>(); } }
			public ITable<DmXtpSystemMemoryConsumers>                     DmXtpSystemMemoryConsumers                     { get { return _dataContext.GetTable<DmXtpSystemMemoryConsumers>(); } }
			public ITable<DmXtpThreads>                                   DmXtpThreads                                   { get { return _dataContext.GetTable<DmXtpThreads>(); } }
			public ITable<DmXtpTransactionRecentRows>                     DmXtpTransactionRecentRows                     { get { return _dataContext.GetTable<DmXtpTransactionRecentRows>(); } }
			public ITable<DmXtpTransactionStats>                          DmXtpTransactionStats                          { get { return _dataContext.GetTable<DmXtpTransactionStats>(); } }

			private readonly IDataContext _dataContext;

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		[Table(Schema="sys", Name="dm_audit_actions", IsView=true)]
		public partial class DmAuditActions
		{
			[Column("action_id"),                      Nullable] public string? ActionID                 { get; set; } // varchar(4)
			[Column("name"),                           Nullable] public string? Name                     { get; set; } // nvarchar(128)
			[Column("class_desc"),                     Nullable] public string? ClassDesc                { get; set; } // nvarchar(35)
			[Column("covering_action_name"),           Nullable] public string? CoveringActionName       { get; set; } // nvarchar(128)
			[Column("parent_class_desc"),              Nullable] public string? ParentClassDesc          { get; set; } // nvarchar(35)
			[Column("covering_parent_action_name"),    Nullable] public string? CoveringParentActionName { get; set; } // nvarchar(128)
			[Column("configuration_level"),            Nullable] public string? ConfigurationLevel       { get; set; } // nvarchar(128)
			[Column("containing_group_name"),          Nullable] public string? ContainingGroupName      { get; set; } // nvarchar(128)
			[Column("action_in_log"),               NotNull    ] public bool    ActionInLog              { get; set; } // bit
		}

		[Table(Schema="sys", Name="dm_audit_class_type_map", IsView=true)]
		public partial class DmAuditClassTypeMap
		{
			[Column("class_type"),           Nullable] public string? ClassType          { get; set; } // varchar(2)
			[Column("class_type_desc"),      Nullable] public string? ClassTypeDesc      { get; set; } // nvarchar(35)
			[Column("securable_class_desc"), Nullable] public string? SecurableClassDesc { get; set; } // nvarchar(35)
		}

		[Table(Schema="sys", Name="dm_broker_activated_tasks", IsView=true)]
		public partial class DmBrokerActivatedTasks
		{
			[Column("spid"),           Nullable] public int?    Spid          { get; set; } // int
			[Column("database_id"),    Nullable] public short?  DatabaseID    { get; set; } // smallint
			[Column("queue_id"),       Nullable] public int?    QueueID       { get; set; } // int
			[Column("procedure_name"), Nullable] public string? ProcedureName { get; set; } // nvarchar(325)
			[Column("execute_as"),     Nullable] public int?    ExecuteAs     { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_broker_connections", IsView=true)]
		public partial class DmBrokerConnections
		{
			[Column("connection_id"),              Nullable] public Guid?     ConnectionID            { get; set; } // uniqueidentifier
			[Column("transport_stream_id"),        Nullable] public Guid?     TransportStreamID       { get; set; } // uniqueidentifier
			[Column("state"),                      Nullable] public short?    State                   { get; set; } // smallint
			[Column("state_desc"),                 Nullable] public string?   StateDesc               { get; set; } // nvarchar(60)
			[Column("connect_time"),               Nullable] public DateTime? ConnectTime             { get; set; } // datetime
			[Column("login_time"),                 Nullable] public DateTime? LoginTime               { get; set; } // datetime
			[Column("authentication_method"),      Nullable] public string?   AuthenticationMethod    { get; set; } // nvarchar(128)
			[Column("principal_name"),             Nullable] public string?   PrincipalName           { get; set; } // nvarchar(128)
			[Column("remote_user_name"),           Nullable] public string?   RemoteUserName          { get; set; } // nvarchar(128)
			[Column("last_activity_time"),         Nullable] public DateTime? LastActivityTime        { get; set; } // datetime
			[Column("is_accept"),                  Nullable] public bool?     IsAccept                { get; set; } // bit
			[Column("login_state"),                Nullable] public short?    LoginState              { get; set; } // smallint
			[Column("login_state_desc"),           Nullable] public string?   LoginStateDesc          { get; set; } // nvarchar(60)
			[Column("peer_certificate_id"),        Nullable] public int?      PeerCertificateID       { get; set; } // int
			[Column("encryption_algorithm"),       Nullable] public short?    EncryptionAlgorithm     { get; set; } // smallint
			[Column("encryption_algorithm_desc"),  Nullable] public string?   EncryptionAlgorithmDesc { get; set; } // nvarchar(60)
			[Column("receives_posted"),            Nullable] public short?    ReceivesPosted          { get; set; } // smallint
			[Column("is_receive_flow_controlled"), Nullable] public bool?     IsReceiveFlowControlled { get; set; } // bit
			[Column("sends_posted"),               Nullable] public short?    SendsPosted             { get; set; } // smallint
			[Column("is_send_flow_controlled"),    Nullable] public bool?     IsSendFlowControlled    { get; set; } // bit
			[Column("total_bytes_sent"),           Nullable] public long?     TotalBytesSent          { get; set; } // bigint
			[Column("total_bytes_received"),       Nullable] public long?     TotalBytesReceived      { get; set; } // bigint
			[Column("total_fragments_sent"),       Nullable] public long?     TotalFragmentsSent      { get; set; } // bigint
			[Column("total_fragments_received"),   Nullable] public long?     TotalFragmentsReceived  { get; set; } // bigint
			[Column("total_sends"),                Nullable] public long?     TotalSends              { get; set; } // bigint
			[Column("total_receives"),             Nullable] public long?     TotalReceives           { get; set; } // bigint
			[Column("peer_arbitration_id"),        Nullable] public Guid?     PeerArbitrationID       { get; set; } // uniqueidentifier
		}

		[Table(Schema="sys", Name="dm_broker_forwarded_messages", IsView=true)]
		public partial class DmBrokerForwardedMessages
		{
			[Column("conversation_id"),         Nullable] public Guid?   ConversationID        { get; set; } // uniqueidentifier
			[Column("is_initiator"),            Nullable] public bool?   IsInitiator           { get; set; } // bit
			[Column("to_service_name"),         Nullable] public string? ToServiceName         { get; set; } // nvarchar(256)
			[Column("to_broker_instance"),      Nullable] public string? ToBrokerInstance      { get; set; } // nvarchar(256)
			[Column("from_service_name"),       Nullable] public string? FromServiceName       { get; set; } // nvarchar(256)
			[Column("from_broker_instance"),    Nullable] public string? FromBrokerInstance    { get; set; } // nvarchar(256)
			[Column("adjacent_broker_address"), Nullable] public string? AdjacentBrokerAddress { get; set; } // nvarchar(256)
			[Column("message_sequence_number"), Nullable] public long?   MessageSequenceNumber { get; set; } // bigint
			[Column("message_fragment_number"), Nullable] public int?    MessageFragmentNumber { get; set; } // int
			[Column("hops_remaining"),          Nullable] public byte?   HopsRemaining         { get; set; } // tinyint
			[Column("time_to_live"),            Nullable] public int?    TimeToLive            { get; set; } // int
			[Column("time_consumed"),           Nullable] public int?    TimeConsumed          { get; set; } // int
			[Column("message_id"),              Nullable] public Guid?   MessageID             { get; set; } // uniqueidentifier
		}

		[Table(Schema="sys", Name="dm_broker_queue_monitors", IsView=true)]
		public partial class DmBrokerQueueMonitors
		{
			[Column("database_id"),            Nullable] public int?      DatabaseID          { get; set; } // int
			[Column("queue_id"),               Nullable] public int?      QueueID             { get; set; } // int
			[Column("state"),                  Nullable] public string?   State               { get; set; } // nvarchar(32)
			[Column("last_empty_rowset_time"), Nullable] public DateTime? LastEmptyRowsetTime { get; set; } // datetime
			[Column("last_activated_time"),    Nullable] public DateTime? LastActivatedTime   { get; set; } // datetime
			[Column("tasks_waiting"),          Nullable] public int?      TasksWaiting        { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_cache_hit_stats", IsView=true)]
		public partial class DmCacheHitStats
		{
			[Column("distribution_id"),       Nullable] public short?    DistributionID      { get; set; } // smallint
			[Column("cache_hit"),             Nullable] public long?     CacheHit            { get; set; } // bigint
			[Column("remote_hit"),            Nullable] public long?     RemoteHit           { get; set; } // bigint
			[Column("collection_start_time"), Nullable] public DateTime? CollectionStartTime { get; set; } // datetime
		}

		[Table(Schema="sys", Name="dm_cache_size", IsView=true)]
		public partial class DmCacheSize
		{
			[Column("distribution_id"), Nullable] public short? DistributionID { get; set; } // smallint
			[Column("cache_used"),      Nullable] public long?  CacheUsed      { get; set; } // bigint
			[Column("cache_available"), Nullable] public long?  CacheAvailable { get; set; } // bigint
			[Column("cache_capacity"),  Nullable] public long?  CacheCapacity  { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_cache_stats", IsView=true)]
		public partial class DmCacheStats
		{
			[Column("distribution_id"),       Nullable] public short?    DistributionID      { get; set; } // smallint
			[Column("cache_hit"),             Nullable] public long?     CacheHit            { get; set; } // bigint
			[Column("remote_hit"),            Nullable] public long?     RemoteHit           { get; set; } // bigint
			[Column("collection_start_time"), Nullable] public DateTime? CollectionStartTime { get; set; } // datetime
			[Column("cache_used"),            Nullable] public long?     CacheUsed           { get; set; } // bigint
			[Column("cache_available"),       Nullable] public long?     CacheAvailable      { get; set; } // bigint
			[Column("cache_capacity"),        Nullable] public long?     CacheCapacity       { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_cdc_errors", IsView=true)]
		public partial class DmCdcErrors
		{
			[Column("session_id"),     Nullable] public int?      SessionID     { get; set; } // int
			[Column("phase_number"),   Nullable] public int?      PhaseNumber   { get; set; } // int
			[Column("entry_time"),     Nullable] public DateTime? EntryTime     { get; set; } // datetime
			[Column("error_number"),   Nullable] public int?      ErrorNumber   { get; set; } // int
			[Column("error_severity"), Nullable] public int?      ErrorSeverity { get; set; } // int
			[Column("error_state"),    Nullable] public int?      ErrorState    { get; set; } // int
			[Column("error_message"),  Nullable] public string?   ErrorMessage  { get; set; } // nvarchar(1025)
			[Column("start_lsn"),      Nullable] public string?   StartLsn      { get; set; } // nvarchar(24)
			[Column("begin_lsn"),      Nullable] public string?   BeginLsn      { get; set; } // nvarchar(24)
			[Column("sequence_value"), Nullable] public string?   SequenceValue { get; set; } // nvarchar(24)
		}

		[Table(Schema="sys", Name="dm_cdc_log_scan_sessions", IsView=true)]
		public partial class DmCdcLogScanSessions
		{
			[Column("session_id"),            Nullable] public int?      SessionID           { get; set; } // int
			[Column("start_time"),            Nullable] public DateTime? StartTime           { get; set; } // datetime
			[Column("end_time"),              Nullable] public DateTime? EndTime             { get; set; } // datetime
			[Column("duration"),              Nullable] public int?      Duration            { get; set; } // int
			[Column("scan_phase"),            Nullable] public string?   ScanPhase           { get; set; } // nvarchar(200)
			[Column("error_count"),           Nullable] public int?      ErrorCount          { get; set; } // int
			[Column("start_lsn"),             Nullable] public string?   StartLsn            { get; set; } // nvarchar(24)
			[Column("current_lsn"),           Nullable] public string?   CurrentLsn          { get; set; } // nvarchar(24)
			[Column("end_lsn"),               Nullable] public string?   EndLsn              { get; set; } // nvarchar(24)
			[Column("tran_count"),            Nullable] public long?     TranCount           { get; set; } // bigint
			[Column("last_commit_lsn"),       Nullable] public string?   LastCommitLsn       { get; set; } // nvarchar(24)
			[Column("last_commit_time"),      Nullable] public DateTime? LastCommitTime      { get; set; } // datetime
			[Column("log_record_count"),      Nullable] public long?     LogRecordCount      { get; set; } // bigint
			[Column("schema_change_count"),   Nullable] public int?      SchemaChangeCount   { get; set; } // int
			[Column("command_count"),         Nullable] public long?     CommandCount        { get; set; } // bigint
			[Column("first_begin_cdc_lsn"),   Nullable] public string?   FirstBeginCdcLsn    { get; set; } // nvarchar(24)
			[Column("last_commit_cdc_lsn"),   Nullable] public string?   LastCommitCdcLsn    { get; set; } // nvarchar(24)
			[Column("last_commit_cdc_time"),  Nullable] public DateTime? LastCommitCdcTime   { get; set; } // datetime
			[Column("latency"),               Nullable] public int?      Latency             { get; set; } // int
			[Column("empty_scan_count"),      Nullable] public int?      EmptyScanCount      { get; set; } // int
			[Column("failed_sessions_count"), Nullable] public int?      FailedSessionsCount { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_clr_appdomains", IsView=true)]
		public partial class DmClrAppdomains
		{
			[Column("appdomain_address"),         Nullable] public byte[]?   AppdomainAddress       { get; set; } // varbinary(8)
			[Column("appdomain_id"),              Nullable] public int?      AppdomainID            { get; set; } // int
			[Column("appdomain_name"),            Nullable] public string?   AppdomainName          { get; set; } // nvarchar(386)
			[Column("creation_time"),             Nullable] public DateTime? CreationTime           { get; set; } // datetime
			[Column("db_id"),                     Nullable] public int?      DbID                   { get; set; } // int
			[Column("user_id"),                   Nullable] public int?      UserID                 { get; set; } // int
			[Column("state"),                     Nullable] public string?   State                  { get; set; } // nvarchar(128)
			[Column("strong_refcount"),           Nullable] public int?      StrongRefcount         { get; set; } // int
			[Column("weak_refcount"),             Nullable] public int?      WeakRefcount           { get; set; } // int
			[Column("cost"),                      Nullable] public int?      Cost                   { get; set; } // int
			[Column("value"),                     Nullable] public int?      Value                  { get; set; } // int
			[Column("compatibility_level"),       Nullable] public int?      CompatibilityLevel     { get; set; } // int
			[Column("total_processor_time_ms"),   Nullable] public long?     TotalProcessorTimeMs   { get; set; } // bigint
			[Column("total_allocated_memory_kb"), Nullable] public long?     TotalAllocatedMemoryKb { get; set; } // bigint
			[Column("survived_memory_kb"),        Nullable] public long?     SurvivedMemoryKb       { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_clr_loaded_assemblies", IsView=true)]
		public partial class DmClrLoadedAssemblies
		{
			[Column("assembly_id"),       Nullable] public int?      AssemblyID       { get; set; } // int
			[Column("appdomain_address"), Nullable] public byte[]?   AppdomainAddress { get; set; } // varbinary(8)
			[Column("load_time"),         Nullable] public DateTime? LoadTime         { get; set; } // datetime
		}

		[Table(Schema="sys", Name="dm_clr_properties", IsView=true)]
		public partial class DmClrProperties
		{
			[Column("name"),  Nullable] public string? Name  { get; set; } // nvarchar(128)
			[Column("value"), Nullable] public string? Value { get; set; } // nvarchar(128)
		}

		[Table(Schema="sys", Name="dm_clr_tasks", IsView=true)]
		public partial class DmClrTasks
		{
			[Column("task_address"),       Nullable] public byte[]? TaskAddress      { get; set; } // varbinary(8)
			[Column("sos_task_address"),   Nullable] public byte[]? SosTaskAddress   { get; set; } // varbinary(8)
			[Column("appdomain_address"),  Nullable] public byte[]? AppdomainAddress { get; set; } // varbinary(8)
			[Column("state"),              Nullable] public string? State            { get; set; } // nvarchar(128)
			[Column("abort_state"),        Nullable] public string? AbortState       { get; set; } // nvarchar(128)
			[Column("type"),               Nullable] public string? Type             { get; set; } // nvarchar(128)
			[Column("affinity_count"),     Nullable] public int?    AffinityCount    { get; set; } // int
			[Column("forced_yield_count"), Nullable] public int?    ForcedYieldCount { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_cluster_endpoints", IsView=true)]
		public partial class DmClusterEndpoints
		{
			[Column("name"),          NotNull    ] public string  Name         { get; set; } = null!; // nvarchar(256)
			[Column("description"),   NotNull    ] public string  Description  { get; set; } = null!; // nvarchar(4000)
			[Column("endpoint"),      NotNull    ] public string  Endpoint     { get; set; } = null!; // nvarchar(256)
			[Column("protocol_desc"),    Nullable] public string? ProtocolDesc { get; set; } // nvarchar(256)
		}

		[Table(Schema="sys", Name="dm_column_encryption_enclave", IsView=true)]
		public partial class DmColumnEncryptionEnclave
		{
			[Column("current_enclave_session_count"),       Nullable] public int?  CurrentEnclaveSessionCount      { get; set; } // int
			[Column("current_column_encryption_key_count"), Nullable] public int?  CurrentColumnEncryptionKeyCount { get; set; } // int
			[Column("current_memory_size_kb"),              Nullable] public long? CurrentMemorySizeKb             { get; set; } // bigint
			[Column("total_evicted_session_count"),         Nullable] public long? TotalEvictedSessionCount        { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_column_encryption_enclave_operation_stats", IsView=true)]
		public partial class DmColumnEncryptionEnclaveOperationStats
		{
			[Column("operation_type"),        Nullable] public string? OperationType       { get; set; } // nvarchar(128)
			[Column("total_operation_count"), Nullable] public long?   TotalOperationCount { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_column_store_object_pool", IsView=true)]
		public partial class DmColumnStoreObjectPool
		{
			[Column("database_id"),          NotNull    ] public int      DatabaseID        { get; set; } // int
			[Column("object_id"),            NotNull    ] public int      ObjectID          { get; set; } // int
			[Column("index_id"),             NotNull    ] public int      IndexID           { get; set; } // int
			[Column("partition_number"),     NotNull    ] public int      PartitionNumber   { get; set; } // int
			[Column("column_id"),               Nullable] public int?     ColumnID          { get; set; } // int
			[Column("row_group_id"),         NotNull    ] public int      RowGroupID        { get; set; } // int
			[Column("object_type"),          NotNull    ] public int      ObjectType        { get; set; } // int
			[Column("object_type_desc"),     NotNull    ] public string   ObjectTypeDesc    { get; set; } = null!; // nvarchar(60)
			[Column("access_count"),         NotNull    ] public long     AccessCount       { get; set; } // bigint
			[Column("memory_used_in_bytes"), NotNull    ] public long     MemoryUsedInBytes { get; set; } // bigint
			[Column("object_load_time"),     NotNull    ] public DateTime ObjectLoadTime    { get; set; } // datetime2(7)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="DmColumnStoreObjectPool")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="dm_cryptographic_provider_properties", IsView=true)]
		public partial class DmCryptographicProviderProperties
		{
			[Column("provider_id"),                Nullable] public int?    ProviderID               { get; set; } // int
			[Column("guid"),                       Nullable] public Guid?   Guid                     { get; set; } // uniqueidentifier
			[Column("provider_version"),           Nullable] public string? ProviderVersion          { get; set; } // nvarchar(128)
			[Column("sqlcrypt_version"),           Nullable] public string? SqlcryptVersion          { get; set; } // nvarchar(128)
			[Column("friendly_name"),              Nullable] public string? FriendlyName             { get; set; } // nvarchar(1024)
			[Column("authentication_type"),        Nullable] public string? AuthenticationType       { get; set; } // nvarchar(128)
			[Column("symmetric_key_support"),      Nullable] public byte?   SymmetricKeySupport      { get; set; } // tinyint
			[Column("symmetric_key_persistance"),  Nullable] public byte?   SymmetricKeyPersistance  { get; set; } // tinyint
			[Column("symmetric_key_export"),       Nullable] public byte?   SymmetricKeyExport       { get; set; } // tinyint
			[Column("symmetric_key_import"),       Nullable] public byte?   SymmetricKeyImport       { get; set; } // tinyint
			[Column("asymmetric_key_support"),     Nullable] public byte?   AsymmetricKeySupport     { get; set; } // tinyint
			[Column("asymmetric_key_persistance"), Nullable] public byte?   AsymmetricKeyPersistance { get; set; } // tinyint
			[Column("asymmetric_key_export"),      Nullable] public byte?   AsymmetricKeyExport      { get; set; } // tinyint
			[Column("asymmetric_key_import"),      Nullable] public byte?   AsymmetricKeyImport      { get; set; } // tinyint
		}

		[Table(Schema="sys", Name="dm_database_encryption_keys", IsView=true)]
		public partial class DmDatabaseEncryptionKeys
		{
			[Column("database_id"),                 Nullable] public int?      DatabaseID               { get; set; } // int
			[Column("encryption_state"),            Nullable] public int?      EncryptionState          { get; set; } // int
			[Column("create_date"),                 Nullable] public DateTime? CreateDate               { get; set; } // datetime
			[Column("regenerate_date"),             Nullable] public DateTime? RegenerateDate           { get; set; } // datetime
			[Column("modify_date"),                 Nullable] public DateTime? ModifyDate               { get; set; } // datetime
			[Column("set_date"),                    Nullable] public DateTime? SetDate                  { get; set; } // datetime
			[Column("opened_date"),                 Nullable] public DateTime? OpenedDate               { get; set; } // datetime
			[Column("key_algorithm"),               Nullable] public string?   KeyAlgorithm             { get; set; } // nvarchar(128)
			[Column("key_length"),                  Nullable] public int?      KeyLength                { get; set; } // int
			[Column("encryptor_thumbprint"),        Nullable] public byte[]?   EncryptorThumbprint      { get; set; } // varbinary(20)
			[Column("encryptor_type"),              Nullable] public string?   EncryptorType            { get; set; } // nvarchar(128)
			[Column("percent_complete"),            Nullable] public float?    PercentComplete          { get; set; } // real
			[Column("encryption_state_desc"),       Nullable] public string?   EncryptionStateDesc      { get; set; } // nvarchar(128)
			[Column("encryption_scan_state"),       Nullable] public int?      EncryptionScanState      { get; set; } // int
			[Column("encryption_scan_state_desc"),  Nullable] public string?   EncryptionScanStateDesc  { get; set; } // nvarchar(128)
			[Column("encryption_scan_modify_date"), Nullable] public DateTime? EncryptionScanModifyDate { get; set; } // datetime
		}

		[Table(Schema="sys", Name="dm_db_column_store_row_group_operational_stats", IsView=true)]
		public partial class DmDbColumnStoreRowGroupOperationalStats
		{
			[Column("object_id"),                 NotNull] public int  ObjectID               { get; set; } // int
			[Column("index_id"),                  NotNull] public int  IndexID                { get; set; } // int
			[Column("partition_number"),          NotNull] public int  PartitionNumber        { get; set; } // int
			[Column("row_group_id"),              NotNull] public int  RowGroupID             { get; set; } // int
			[Column("index_scan_count"),          NotNull] public long IndexScanCount         { get; set; } // bigint
			[Column("scan_count"),                NotNull] public long ScanCount              { get; set; } // bigint
			[Column("delete_buffer_scan_count"),  NotNull] public long DeleteBufferScanCount  { get; set; } // bigint
			[Column("row_group_lock_count"),      NotNull] public long RowGroupLockCount      { get; set; } // bigint
			[Column("row_group_lock_wait_count"), NotNull] public long RowGroupLockWaitCount  { get; set; } // bigint
			[Column("row_group_lock_wait_in_ms"), NotNull] public long RowGroupLockWaitInMs   { get; set; } // bigint
			[Column("returned_row_count"),        NotNull] public long ReturnedRowCount       { get; set; } // bigint
			[Column("returned_aggregate_count"),  NotNull] public long ReturnedAggregateCount { get; set; } // bigint
			[Column("returned_group_count"),      NotNull] public long ReturnedGroupCount     { get; set; } // bigint
			[Column("input_groupby_row_count"),   NotNull] public long InputGroupbyRowCount   { get; set; } // bigint

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="DmDbColumnStoreRowGroupOperationalStats")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="dm_db_column_store_row_group_physical_stats", IsView=true)]
		public partial class DmDbColumnStoreRowGroupPhysicalStats
		{
			[Column("object_id"),                              Nullable] public int?      ObjectID                        { get; set; } // int
			[Column("index_id"),                               Nullable] public int?      IndexID                         { get; set; } // int
			[Column("partition_number"),                       Nullable] public int?      PartitionNumber                 { get; set; } // int
			[Column("row_group_id"),                           Nullable] public int?      RowGroupID                      { get; set; } // int
			[Column("delta_store_hobt_id"),                    Nullable] public long?     DeltaStoreHobtID                { get; set; } // bigint
			[Column("state"),                                  Nullable] public byte?     State                           { get; set; } // tinyint
			[Column("state_desc"),                          NotNull    ] public string    StateDesc                       { get; set; } = null!; // nvarchar(60)
			[Column("total_rows"),                             Nullable] public long?     TotalRows                       { get; set; } // bigint
			[Column("deleted_rows"),                           Nullable] public long?     DeletedRows                     { get; set; } // bigint
			[Column("size_in_bytes"),                          Nullable] public long?     SizeInBytes                     { get; set; } // bigint
			[Column("trim_reason"),                            Nullable] public byte?     TrimReason                      { get; set; } // tinyint
			[Column("trim_reason_desc"),                       Nullable] public string?   TrimReasonDesc                  { get; set; } // nvarchar(60)
			[Column("transition_to_compressed_state"),         Nullable] public byte?     TransitionToCompressedState     { get; set; } // tinyint
			[Column("transition_to_compressed_state_desc"),    Nullable] public string?   TransitionToCompressedStateDesc { get; set; } // nvarchar(60)
			[Column("has_vertipaq_optimization"),              Nullable] public bool?     HasVertipaqOptimization         { get; set; } // bit
			[Column("generation"),                             Nullable] public long?     Generation                      { get; set; } // bigint
			[Column("created_time"),                           Nullable] public DateTime? CreatedTime                     { get; set; } // datetime
			[Column("closed_time"),                            Nullable] public DateTime? ClosedTime                      { get; set; } // datetime

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="DmDbColumnStoreRowGroupPhysicalStats")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="dm_db_data_pools", IsView=true)]
		public partial class DmDbDataPools
		{
			[Column("data_pool_id"), NotNull    ] public int     DataPoolID { get; set; } // int
			[Column("name"),            Nullable] public string? Name       { get; set; } // nvarchar(256)
			[Column("location"),     NotNull    ] public string  Location   { get; set; } = null!; // nvarchar(256)
		}

		[Table(Schema="sys", Name="dm_db_external_language_stats", IsView=true)]
		public partial class DmDbExternalLanguageStats
		{
			[Column("external_language_id"), NotNull] public int  ExternalLanguageID { get; set; } // int
			[Column("is_installed"),         NotNull] public bool IsInstalled        { get; set; } // bit
		}

		[Table(Schema="sys", Name="dm_db_external_script_execution_stats", IsView=true)]
		public partial class DmDbExternalScriptExecutionStats
		{
			[Column("external_language_id"), NotNull] public int    ExternalLanguageID { get; set; } // int
			[Column("counter_name"),         NotNull] public string CounterName        { get; set; } = null!; // nvarchar(256)
			[Column("counter_value"),        NotNull] public long   CounterValue       { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_db_file_space_usage", IsView=true)]
		public partial class DmDbFileSpaceUsage
		{
			[Column("database_id"),                         Nullable] public int?   DatabaseID                      { get; set; } // int
			[Column("file_id"),                             Nullable] public short? FileID                          { get; set; } // smallint
			[Column("filegroup_id"),                        Nullable] public short? FilegroupID                     { get; set; } // smallint
			[Column("total_page_count"),                    Nullable] public long?  TotalPageCount                  { get; set; } // bigint
			[Column("allocated_extent_page_count"),         Nullable] public long?  AllocatedExtentPageCount        { get; set; } // bigint
			[Column("unallocated_extent_page_count"),       Nullable] public long?  UnallocatedExtentPageCount      { get; set; } // bigint
			[Column("version_store_reserved_page_count"),   Nullable] public long?  VersionStoreReservedPageCount   { get; set; } // bigint
			[Column("user_object_reserved_page_count"),     Nullable] public long?  UserObjectReservedPageCount     { get; set; } // bigint
			[Column("internal_object_reserved_page_count"), Nullable] public long?  InternalObjectReservedPageCount { get; set; } // bigint
			[Column("mixed_extent_page_count"),             Nullable] public long?  MixedExtentPageCount            { get; set; } // bigint
			[Column("modified_extent_page_count"),          Nullable] public long?  ModifiedExtentPageCount         { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_db_fts_index_physical_stats", IsView=true)]
		public partial class DmDbFtsIndexPhysicalStats
		{
			[Column("object_id"),                   NotNull    ] public int   ObjectID                 { get; set; } // int
			[Column("fulltext_index_page_count"),      Nullable] public long? FulltextIndexPageCount   { get; set; } // bigint
			[Column("keyphrase_index_page_count"),     Nullable] public long? KeyphraseIndexPageCount  { get; set; } // bigint
			[Column("similarity_index_page_count"),    Nullable] public long? SimilarityIndexPageCount { get; set; } // bigint

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="DmDbFtsIndexPhysicalStats")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="dm_db_index_usage_stats", IsView=true)]
		public partial class DmDbIndexUsageStats
		{
			[Column("database_id"),        NotNull    ] public short     DatabaseID       { get; set; } // smallint
			[Column("object_id"),          NotNull    ] public int       ObjectID         { get; set; } // int
			[Column("index_id"),           NotNull    ] public int       IndexID          { get; set; } // int
			[Column("user_seeks"),         NotNull    ] public long      UserSeeks        { get; set; } // bigint
			[Column("user_scans"),         NotNull    ] public long      UserScans        { get; set; } // bigint
			[Column("user_lookups"),       NotNull    ] public long      UserLookups      { get; set; } // bigint
			[Column("user_updates"),       NotNull    ] public long      UserUpdates      { get; set; } // bigint
			[Column("last_user_seek"),        Nullable] public DateTime? LastUserSeek     { get; set; } // datetime
			[Column("last_user_scan"),        Nullable] public DateTime? LastUserScan     { get; set; } // datetime
			[Column("last_user_lookup"),      Nullable] public DateTime? LastUserLookup   { get; set; } // datetime
			[Column("last_user_update"),      Nullable] public DateTime? LastUserUpdate   { get; set; } // datetime
			[Column("system_seeks"),       NotNull    ] public long      SystemSeeks      { get; set; } // bigint
			[Column("system_scans"),       NotNull    ] public long      SystemScans      { get; set; } // bigint
			[Column("system_lookups"),     NotNull    ] public long      SystemLookups    { get; set; } // bigint
			[Column("system_updates"),     NotNull    ] public long      SystemUpdates    { get; set; } // bigint
			[Column("last_system_seek"),      Nullable] public DateTime? LastSystemSeek   { get; set; } // datetime
			[Column("last_system_scan"),      Nullable] public DateTime? LastSystemScan   { get; set; } // datetime
			[Column("last_system_lookup"),    Nullable] public DateTime? LastSystemLookup { get; set; } // datetime
			[Column("last_system_update"),    Nullable] public DateTime? LastSystemUpdate { get; set; } // datetime

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="DmDbIndexUsageStats")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="dm_db_log_space_usage", IsView=true)]
		public partial class DmDbLogSpaceUsage
		{
			[Column("database_id"),                          Nullable] public int?   DatabaseID                     { get; set; } // int
			[Column("total_log_size_in_bytes"),              Nullable] public long?  TotalLogSizeInBytes            { get; set; } // bigint
			[Column("used_log_space_in_bytes"),              Nullable] public long?  UsedLogSpaceInBytes            { get; set; } // bigint
			[Column("used_log_space_in_percent"),            Nullable] public float? UsedLogSpaceInPercent          { get; set; } // real
			[Column("log_space_in_bytes_since_last_backup"), Nullable] public long?  LogSpaceInBytesSinceLastBackup { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_db_mirroring_auto_page_repair", IsView=true)]
		public partial class DmDbMirroringAutoPageRepair
		{
			[Column("database_id"),       NotNull] public int      DatabaseID       { get; set; } // int
			[Column("file_id"),           NotNull] public int      FileID           { get; set; } // int
			[Column("page_id"),           NotNull] public long     PageID           { get; set; } // bigint
			[Column("error_type"),        NotNull] public short    ErrorType        { get; set; } // smallint
			[Column("page_status"),       NotNull] public byte     PageStatus       { get; set; } // tinyint
			[Column("modification_time"), NotNull] public DateTime ModificationTime { get; set; } // datetime
		}

		[Table(Schema="sys", Name="dm_db_mirroring_connections", IsView=true)]
		public partial class DmDbMirroringConnections
		{
			[Column("connection_id"),              Nullable] public Guid?     ConnectionID            { get; set; } // uniqueidentifier
			[Column("transport_stream_id"),        Nullable] public Guid?     TransportStreamID       { get; set; } // uniqueidentifier
			[Column("state"),                      Nullable] public short?    State                   { get; set; } // smallint
			[Column("state_desc"),                 Nullable] public string?   StateDesc               { get; set; } // nvarchar(60)
			[Column("connect_time"),               Nullable] public DateTime? ConnectTime             { get; set; } // datetime
			[Column("login_time"),                 Nullable] public DateTime? LoginTime               { get; set; } // datetime
			[Column("authentication_method"),      Nullable] public string?   AuthenticationMethod    { get; set; } // nvarchar(128)
			[Column("principal_name"),             Nullable] public string?   PrincipalName           { get; set; } // nvarchar(128)
			[Column("remote_user_name"),           Nullable] public string?   RemoteUserName          { get; set; } // nvarchar(128)
			[Column("last_activity_time"),         Nullable] public DateTime? LastActivityTime        { get; set; } // datetime
			[Column("is_accept"),                  Nullable] public bool?     IsAccept                { get; set; } // bit
			[Column("login_state"),                Nullable] public short?    LoginState              { get; set; } // smallint
			[Column("login_state_desc"),           Nullable] public string?   LoginStateDesc          { get; set; } // nvarchar(60)
			[Column("peer_certificate_id"),        Nullable] public int?      PeerCertificateID       { get; set; } // int
			[Column("encryption_algorithm"),       Nullable] public short?    EncryptionAlgorithm     { get; set; } // smallint
			[Column("encryption_algorithm_desc"),  Nullable] public string?   EncryptionAlgorithmDesc { get; set; } // nvarchar(60)
			[Column("receives_posted"),            Nullable] public short?    ReceivesPosted          { get; set; } // smallint
			[Column("is_receive_flow_controlled"), Nullable] public bool?     IsReceiveFlowControlled { get; set; } // bit
			[Column("sends_posted"),               Nullable] public short?    SendsPosted             { get; set; } // smallint
			[Column("is_send_flow_controlled"),    Nullable] public bool?     IsSendFlowControlled    { get; set; } // bit
			[Column("total_bytes_sent"),           Nullable] public long?     TotalBytesSent          { get; set; } // bigint
			[Column("total_bytes_received"),       Nullable] public long?     TotalBytesReceived      { get; set; } // bigint
			[Column("total_fragments_sent"),       Nullable] public long?     TotalFragmentsSent      { get; set; } // bigint
			[Column("total_fragments_received"),   Nullable] public long?     TotalFragmentsReceived  { get; set; } // bigint
			[Column("total_sends"),                Nullable] public long?     TotalSends              { get; set; } // bigint
			[Column("total_receives"),             Nullable] public long?     TotalReceives           { get; set; } // bigint
			[Column("peer_arbitration_id"),        Nullable] public Guid?     PeerArbitrationID       { get; set; } // uniqueidentifier
			[Column("address"),                    Nullable] public string?   Address                 { get; set; } // nvarchar(256)
		}

		[Table(Schema="sys", Name="dm_db_mirroring_past_actions", IsView=true)]
		public partial class DmDbMirroringPastActions
		{
			[Column("mirroring_guid"),        Nullable] public Guid?   MirroringGuid    { get; set; } // uniqueidentifier
			[Column("state_machine_name"),    Nullable] public string? StateMachineName { get; set; } // nvarchar(60)
			[Column("action_type"),           Nullable] public string? ActionType       { get; set; } // nvarchar(60)
			[Column("name"),                  Nullable] public string? Name             { get; set; } // nvarchar(60)
			[Column("current_state"),         Nullable] public string? CurrentState     { get; set; } // nvarchar(60)
			[Column("action_sequence"),    NotNull    ] public int     ActionSequence   { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_db_missing_index_details", IsView=true)]
		public partial class DmDbMissingIndexDetails
		{
			[Column("index_handle"),       NotNull    ] public int     IndexHandle       { get; set; } // int
			[Column("database_id"),        NotNull    ] public short   DatabaseID        { get; set; } // smallint
			[Column("object_id"),          NotNull    ] public int     ObjectID          { get; set; } // int
			[Column("equality_columns"),      Nullable] public string? EqualityColumns   { get; set; } // nvarchar(4000)
			[Column("inequality_columns"),    Nullable] public string? InequalityColumns { get; set; } // nvarchar(4000)
			[Column("included_columns"),      Nullable] public string? IncludedColumns   { get; set; } // nvarchar(4000)
			[Column("statement"),             Nullable] public string? Statement         { get; set; } // nvarchar(4000)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="DmDbMissingIndexDetails")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="dm_db_missing_index_groups", IsView=true)]
		public partial class DmDbMissingIndexGroups
		{
			[Column("index_group_handle"), NotNull] public int IndexGroupHandle { get; set; } // int
			[Column("index_handle"),       NotNull] public int IndexHandle      { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_db_missing_index_group_stats", IsView=true)]
		public partial class DmDbMissingIndexGroupStats
		{
			[Column("group_handle"),          NotNull    ] public int       GroupHandle        { get; set; } // int
			[Column("unique_compiles"),          Nullable] public long?     UniqueCompiles     { get; set; } // bigint
			[Column("user_seeks"),               Nullable] public long?     UserSeeks          { get; set; } // bigint
			[Column("user_scans"),               Nullable] public long?     UserScans          { get; set; } // bigint
			[Column("last_user_seek"),           Nullable] public DateTime? LastUserSeek       { get; set; } // datetime
			[Column("last_user_scan"),           Nullable] public DateTime? LastUserScan       { get; set; } // datetime
			[Column("avg_total_user_cost"),      Nullable] public double?   AvgTotalUserCost   { get; set; } // float
			[Column("avg_user_impact"),          Nullable] public double?   AvgUserImpact      { get; set; } // float
			[Column("system_seeks"),             Nullable] public long?     SystemSeeks        { get; set; } // bigint
			[Column("system_scans"),             Nullable] public long?     SystemScans        { get; set; } // bigint
			[Column("last_system_seek"),         Nullable] public DateTime? LastSystemSeek     { get; set; } // datetime
			[Column("last_system_scan"),         Nullable] public DateTime? LastSystemScan     { get; set; } // datetime
			[Column("avg_total_system_cost"),    Nullable] public double?   AvgTotalSystemCost { get; set; } // float
			[Column("avg_system_impact"),        Nullable] public double?   AvgSystemImpact    { get; set; } // float
		}

		[Table(Schema="sys", Name="dm_db_missing_index_group_stats_query", IsView=true)]
		public partial class DmDbMissingIndexGroupStatsQuery
		{
			[Column("group_handle"),                NotNull    ] public int       GroupHandle              { get; set; } // int
			[Column("query_hash"),                  NotNull    ] public byte[]    QueryHash                { get; set; } = null!; // binary(8)
			[Column("query_plan_hash"),             NotNull    ] public byte[]    QueryPlanHash            { get; set; } = null!; // binary(8)
			[Column("last_sql_handle"),             NotNull    ] public byte[]    LastSqlHandle            { get; set; } = null!; // varbinary(64)
			[Column("last_statement_start_offset"), NotNull    ] public int       LastStatementStartOffset { get; set; } // int
			[Column("last_statement_end_offset"),   NotNull    ] public int       LastStatementEndOffset   { get; set; } // int
			[Column("last_statement_sql_handle"),      Nullable] public byte[]?   LastStatementSqlHandle   { get; set; } // varbinary(64)
			[Column("user_seeks"),                  NotNull    ] public long      UserSeeks                { get; set; } // bigint
			[Column("user_scans"),                  NotNull    ] public long      UserScans                { get; set; } // bigint
			[Column("last_user_seek"),                 Nullable] public DateTime? LastUserSeek             { get; set; } // datetime
			[Column("last_user_scan"),                 Nullable] public DateTime? LastUserScan             { get; set; } // datetime
			[Column("avg_total_user_cost"),            Nullable] public double?   AvgTotalUserCost         { get; set; } // float
			[Column("avg_user_impact"),             NotNull    ] public double    AvgUserImpact            { get; set; } // float
			[Column("system_seeks"),                NotNull    ] public long      SystemSeeks              { get; set; } // bigint
			[Column("system_scans"),                NotNull    ] public long      SystemScans              { get; set; } // bigint
			[Column("last_system_seek"),               Nullable] public DateTime? LastSystemSeek           { get; set; } // datetime
			[Column("last_system_scan"),               Nullable] public DateTime? LastSystemScan           { get; set; } // datetime
			[Column("avg_total_system_cost"),          Nullable] public double?   AvgTotalSystemCost       { get; set; } // float
			[Column("avg_system_impact"),           NotNull    ] public double    AvgSystemImpact          { get; set; } // float
		}

		[Table(Schema="sys", Name="dm_db_partition_stats", IsView=true)]
		public partial class DmDbPartitionStats
		{
			[Column("partition_id"),                        Nullable] public long? PartitionID                  { get; set; } // bigint
			[Column("object_id"),                        NotNull    ] public int   ObjectID                     { get; set; } // int
			[Column("index_id"),                         NotNull    ] public int   IndexID                      { get; set; } // int
			[Column("partition_number"),                 NotNull    ] public int   PartitionNumber              { get; set; } // int
			[Column("in_row_data_page_count"),              Nullable] public long? InRowDataPageCount           { get; set; } // bigint
			[Column("in_row_used_page_count"),              Nullable] public long? InRowUsedPageCount           { get; set; } // bigint
			[Column("in_row_reserved_page_count"),          Nullable] public long? InRowReservedPageCount       { get; set; } // bigint
			[Column("lob_used_page_count"),                 Nullable] public long? LobUsedPageCount             { get; set; } // bigint
			[Column("lob_reserved_page_count"),             Nullable] public long? LobReservedPageCount         { get; set; } // bigint
			[Column("row_overflow_used_page_count"),        Nullable] public long? RowOverflowUsedPageCount     { get; set; } // bigint
			[Column("row_overflow_reserved_page_count"),    Nullable] public long? RowOverflowReservedPageCount { get; set; } // bigint
			[Column("used_page_count"),                     Nullable] public long? UsedPageCount                { get; set; } // bigint
			[Column("reserved_page_count"),                 Nullable] public long? ReservedPageCount            { get; set; } // bigint
			[Column("row_count"),                           Nullable] public long? RowCount                     { get; set; } // bigint

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="DmDbPartitionStats")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="dm_db_persisted_sku_features", IsView=true)]
		public partial class DmDbPersistedSkuFeatures
		{
			[Column("feature_name"),    Nullable] public string? FeatureName { get; set; } // nvarchar(4000)
			[Column("feature_id"),   NotNull    ] public int     FeatureID   { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_db_rda_migration_status", IsView=true)]
		public partial class DmDbRdaMigrationStatus
		{
			[Column("table_id"),       Nullable] public int?      TableID       { get; set; } // int
			[Column("database_id"),    Nullable] public int?      DatabaseID    { get; set; } // int
			[Column("migrated_rows"),  Nullable] public long?     MigratedRows  { get; set; } // bigint
			[Column("start_time_utc"), Nullable] public DateTime? StartTimeUtc  { get; set; } // datetime
			[Column("end_time_utc"),   Nullable] public DateTime? EndTimeUtc    { get; set; } // datetime
			[Column("error_number"),   Nullable] public int?      ErrorNumber   { get; set; } // int
			[Column("error_severity"), Nullable] public int?      ErrorSeverity { get; set; } // int
			[Column("error_state"),    Nullable] public int?      ErrorState    { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_db_rda_schema_update_status", IsView=true)]
		public partial class DmDbRdaSchemaUpdateStatus
		{
			[Column("table_id"),        Nullable] public int?      TableID       { get; set; } // int
			[Column("database_id"),     Nullable] public int?      DatabaseID    { get; set; } // int
			[Column("task_id"),         Nullable] public long?     TaskID        { get; set; } // bigint
			[Column("task_type"),       Nullable] public int?      TaskType      { get; set; } // int
			[Column("task_type_desc"),  Nullable] public string?   TaskTypeDesc  { get; set; } // nvarchar(60)
			[Column("task_state"),      Nullable] public int?      TaskState     { get; set; } // int
			[Column("task_state_desc"), Nullable] public string?   TaskStateDesc { get; set; } // nvarchar(60)
			[Column("start_time_utc"),  Nullable] public DateTime? StartTimeUtc  { get; set; } // datetime
			[Column("end_time_utc"),    Nullable] public DateTime? EndTimeUtc    { get; set; } // datetime
			[Column("error_number"),    Nullable] public int?      ErrorNumber   { get; set; } // int
			[Column("error_severity"),  Nullable] public int?      ErrorSeverity { get; set; } // int
			[Column("error_state"),     Nullable] public int?      ErrorState    { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_db_script_level", IsView=true)]
		public partial class DmDbScriptLevel
		{
			[Column("database_id"),            NotNull    ] public int     DatabaseID           { get; set; } // int
			[Column("script_id"),              NotNull    ] public int     ScriptID             { get; set; } // int
			[Column("script_name"),               Nullable] public string? ScriptName           { get; set; } // nvarchar(128)
			[Column("version"),                NotNull    ] public int     Version              { get; set; } // int
			[Column("script_level"),           NotNull    ] public int     ScriptLevel          { get; set; } // int
			[Column("downgrade_start_level"),  NotNull    ] public int     DowngradeStartLevel  { get; set; } // int
			[Column("downgrade_target_level"), NotNull    ] public int     DowngradeTargetLevel { get; set; } // int
			[Column("upgrade_start_level"),       Nullable] public int?    UpgradeStartLevel    { get; set; } // int
			[Column("upgrade_target_level"),      Nullable] public int?    UpgradeTargetLevel   { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_db_session_space_usage", IsView=true)]
		public partial class DmDbSessionSpaceUsage
		{
			[Column("session_id"),                               Nullable] public short? SessionID                           { get; set; } // smallint
			[Column("database_id"),                              Nullable] public int?   DatabaseID                          { get; set; } // int
			[Column("user_objects_alloc_page_count"),            Nullable] public long?  UserObjectsAllocPageCount           { get; set; } // bigint
			[Column("user_objects_dealloc_page_count"),          Nullable] public long?  UserObjectsDeallocPageCount         { get; set; } // bigint
			[Column("internal_objects_alloc_page_count"),        Nullable] public long?  InternalObjectsAllocPageCount       { get; set; } // bigint
			[Column("internal_objects_dealloc_page_count"),      Nullable] public long?  InternalObjectsDeallocPageCount     { get; set; } // bigint
			[Column("user_objects_deferred_dealloc_page_count"), Nullable] public long?  UserObjectsDeferredDeallocPageCount { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_db_storage_pools", IsView=true)]
		public partial class DmDbStoragePools
		{
			[Column("storage_pool_id"), NotNull    ] public int     StoragePoolID { get; set; } // int
			[Column("name"),               Nullable] public string? Name          { get; set; } // nvarchar(256)
			[Column("location"),        NotNull    ] public string  Location      { get; set; } = null!; // nvarchar(256)
		}

		[Table(Schema="sys", Name="dm_db_task_space_usage", IsView=true)]
		public partial class DmDbTaskSpaceUsage
		{
			[Column("task_address"),                           Nullable] public byte[]? TaskAddress                     { get; set; } // varbinary(8)
			[Column("is_remote_task"),                      NotNull    ] public bool    IsRemoteTask                    { get; set; } // bit
			[Column("session_id"),                             Nullable] public short?  SessionID                       { get; set; } // smallint
			[Column("request_id"),                             Nullable] public int?    RequestID                       { get; set; } // int
			[Column("exec_context_id"),                        Nullable] public int?    ExecContextID                   { get; set; } // int
			[Column("database_id"),                            Nullable] public int?    DatabaseID                      { get; set; } // int
			[Column("user_objects_alloc_page_count"),          Nullable] public long?   UserObjectsAllocPageCount       { get; set; } // bigint
			[Column("user_objects_dealloc_page_count"),        Nullable] public long?   UserObjectsDeallocPageCount     { get; set; } // bigint
			[Column("internal_objects_alloc_page_count"),      Nullable] public long?   InternalObjectsAllocPageCount   { get; set; } // bigint
			[Column("internal_objects_dealloc_page_count"),    Nullable] public long?   InternalObjectsDeallocPageCount { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_db_tuning_recommendations", IsView=true)]
		public partial class DmDbTuningRecommendations
		{
			[Column("name"),                          Nullable] public string?   Name                       { get; set; } // nvarchar(4000)
			[Column("type"),                          Nullable] public string?   Type                       { get; set; } // nvarchar(4000)
			[Column("reason"),                        Nullable] public string?   Reason                     { get; set; } // nvarchar(4000)
			[Column("valid_since"),                   Nullable] public DateTime? ValidSince                 { get; set; } // datetime2(7)
			[Column("last_refresh"),                  Nullable] public DateTime? LastRefresh                { get; set; } // datetime2(7)
			[Column("state"),                         Nullable] public string?   State                      { get; set; } // nvarchar(4000)
			[Column("is_executable_action"),          Nullable] public bool?     IsExecutableAction         { get; set; } // bit
			[Column("is_revertable_action"),          Nullable] public bool?     IsRevertableAction         { get; set; } // bit
			[Column("execute_action_start_time"),     Nullable] public DateTime? ExecuteActionStartTime     { get; set; } // datetime2(7)
			[Column("execute_action_duration"),       Nullable] public TimeSpan? ExecuteActionDuration      { get; set; } // time(7)
			[Column("execute_action_initiated_by"),   Nullable] public string?   ExecuteActionInitiatedBy   { get; set; } // nvarchar(4000)
			[Column("execute_action_initiated_time"), Nullable] public DateTime? ExecuteActionInitiatedTime { get; set; } // datetime2(7)
			[Column("revert_action_start_time"),      Nullable] public DateTime? RevertActionStartTime      { get; set; } // datetime2(7)
			[Column("revert_action_duration"),        Nullable] public TimeSpan? RevertActionDuration       { get; set; } // time(7)
			[Column("revert_action_initiated_by"),    Nullable] public string?   RevertActionInitiatedBy    { get; set; } // nvarchar(4000)
			[Column("revert_action_initiated_time"),  Nullable] public DateTime? RevertActionInitiatedTime  { get; set; } // datetime2(7)
			[Column("score"),                         Nullable] public int?      Score                      { get; set; } // int
			[Column("details"),                       Nullable] public string?   Details                    { get; set; } // nvarchar(0)
		}

		[Table(Schema="sys", Name="dm_db_uncontained_entities", IsView=true)]
		public partial class DmDbUncontainedEntities
		{
			[Column("class"),                  NotNull    ] public int     @class               { get; set; } // int
			[Column("class_desc"),             NotNull    ] public string  ClassDesc            { get; set; } = null!; // nvarchar(60)
			[Column("major_id"),               NotNull    ] public int     MajorID              { get; set; } // int
			[Column("statement_line_number"),     Nullable] public int?    StatementLineNumber  { get; set; } // int
			[Column("statement_offset_begin"),    Nullable] public int?    StatementOffsetBegin { get; set; } // int
			[Column("statement_offset_end"),      Nullable] public int?    StatementOffsetEnd   { get; set; } // int
			[Column("statement_type"),            Nullable] public string? StatementType        { get; set; } // nvarchar(256)
			[Column("feature_name"),           NotNull    ] public string  FeatureName          { get; set; } = null!; // nvarchar(128)
			[Column("feature_type_name"),      NotNull    ] public string  FeatureTypeName      { get; set; } = null!; // nvarchar(128)
		}

		[Table(Schema="sys", Name="dm_db_xtp_checkpoint_files", IsView=true)]
		public partial class DmDbXtpCheckpointFiles
		{
			[Column("container_id"),               NotNull    ] public int     ContainerID             { get; set; } // int
			[Column("container_guid"),             NotNull    ] public Guid    ContainerGuid           { get; set; } // uniqueidentifier
			[Column("checkpoint_file_id"),         NotNull    ] public Guid    CheckpointFileID        { get; set; } // uniqueidentifier
			[Column("relative_file_path"),         NotNull    ] public string  RelativeFilePath        { get; set; } = null!; // nvarchar(260)
			[Column("file_type"),                  NotNull    ] public short   FileType                { get; set; } // smallint
			[Column("file_type_desc"),             NotNull    ] public string  FileTypeDesc            { get; set; } = null!; // nvarchar(60)
			[Column("internal_storage_slot"),         Nullable] public int?    InternalStorageSlot     { get; set; } // int
			[Column("checkpoint_pair_file_id"),       Nullable] public Guid?   CheckpointPairFileID    { get; set; } // uniqueidentifier
			[Column("file_size_in_bytes"),         NotNull    ] public long    FileSizeInBytes         { get; set; } // bigint
			[Column("file_size_used_in_bytes"),       Nullable] public long?   FileSizeUsedInBytes     { get; set; } // bigint
			[Column("logical_row_count"),             Nullable] public long?   LogicalRowCount         { get; set; } // bigint
			[Column("state"),                      NotNull    ] public short   State                   { get; set; } // smallint
			[Column("state_desc"),                 NotNull    ] public string  StateDesc               { get; set; } = null!; // nvarchar(60)
			[Column("lower_bound_tsn"),               Nullable] public long?   LowerBoundTsn           { get; set; } // bigint
			[Column("upper_bound_tsn"),               Nullable] public long?   UpperBoundTsn           { get; set; } // bigint
			[Column("begin_checkpoint_id"),           Nullable] public long?   BeginCheckpointID       { get; set; } // bigint
			[Column("end_checkpoint_id"),             Nullable] public long?   EndCheckpointID         { get; set; } // bigint
			[Column("last_updated_checkpoint_id"),    Nullable] public long?   LastUpdatedCheckpointID { get; set; } // bigint
			[Column("encryption_status"),             Nullable] public short?  EncryptionStatus        { get; set; } // smallint
			[Column("encryption_status_desc"),        Nullable] public string? EncryptionStatusDesc    { get; set; } // nvarchar(60)
		}

		[Table(Schema="sys", Name="dm_db_xtp_checkpoint_internals", IsView=true)]
		public partial class DmDbXtpCheckpointInternals
		{
			[Column("checkpoint_id"),        NotNull    ] public long     CheckpointID        { get; set; } // bigint
			[Column("checkpoint_timestamp"),    Nullable] public long?    CheckpointTimestamp { get; set; } // bigint
			[Column("last_segment_lsn"),        Nullable] public decimal? LastSegmentLsn      { get; set; } // numeric(25,0)
			[Column("recovery_lsn"),            Nullable] public decimal? RecoveryLsn         { get; set; } // numeric(25,0)
			[Column("is_synchronized"),         Nullable] public bool?    IsSynchronized      { get; set; } // bit
		}

		[Table(Schema="sys", Name="dm_db_xtp_checkpoint_stats", IsView=true)]
		public partial class DmDbXtpCheckpointStats
		{
			[Column("last_lsn_processed"),               Nullable] public decimal? LastLsnProcessed              { get; set; } // numeric(25,0)
			[Column("end_of_log_lsn"),                   Nullable] public decimal? EndOfLogLsn                   { get; set; } // numeric(25,0)
			[Column("bytes_to_end_of_log"),              Nullable] public long?    BytesToEndOfLog               { get; set; } // bigint
			[Column("log_consumption_rate"),             Nullable] public long?    LogConsumptionRate            { get; set; } // bigint
			[Column("active_scan_time_in_ms"),           Nullable] public long?    ActiveScanTimeInMs            { get; set; } // bigint
			[Column("total_wait_time_in_ms"),            Nullable] public long?    TotalWaitTimeInMs             { get; set; } // bigint
			[Column("waits_for_io_count"),               Nullable] public long?    WaitsForIoCount               { get; set; } // bigint
			[Column("io_wait_time_in_ms"),               Nullable] public long?    IoWaitTimeInMs                { get; set; } // bigint
			[Column("waits_for_new_log_count"),          Nullable] public long?    WaitsForNewLogCount           { get; set; } // bigint
			[Column("new_log_wait_time_in_ms"),          Nullable] public long?    NewLogWaitTimeInMs            { get; set; } // bigint
			[Column("idle_attempts_count"),              Nullable] public long?    IdleAttemptsCount             { get; set; } // bigint
			[Column("tx_segments_dispatched_count"),     Nullable] public long?    TxSegmentsDispatchedCount     { get; set; } // bigint
			[Column("segment_bytes_dispatched"),         Nullable] public long?    SegmentBytesDispatched        { get; set; } // bigint
			[Column("bytes_serialized"),                 Nullable] public long?    BytesSerialized               { get; set; } // bigint
			[Column("serializer_user_time_in_ms"),       Nullable] public long?    SerializerUserTimeInMs        { get; set; } // bigint
			[Column("serializer_kernel_time_in_ms"),     Nullable] public long?    SerializerKernelTimeInMs      { get; set; } // bigint
			[Column("xtp_log_bytes_consumed"),           Nullable] public long?    XtpLogBytesConsumed           { get; set; } // bigint
			[Column("checkpoints_closed"),               Nullable] public long?    CheckpointsClosed             { get; set; } // bigint
			[Column("last_closed_checkpoint_ts"),        Nullable] public long?    LastClosedCheckpointTs        { get; set; } // bigint
			[Column("hardened_recovery_lsn"),            Nullable] public decimal? HardenedRecoveryLsn           { get; set; } // numeric(25,0)
			[Column("hardened_root_file_guid"),          Nullable] public Guid?    HardenedRootFileGuid          { get; set; } // uniqueidentifier
			[Column("hardened_root_file_watermark"),     Nullable] public long?    HardenedRootFileWatermark     { get; set; } // bigint
			[Column("hardened_truncation_lsn"),          Nullable] public decimal? HardenedTruncationLsn         { get; set; } // numeric(25,0)
			[Column("log_bytes_since_last_close"),       Nullable] public long?    LogBytesSinceLastClose        { get; set; } // bigint
			[Column("time_since_last_close_in_ms"),      Nullable] public long?    TimeSinceLastCloseInMs        { get; set; } // bigint
			[Column("current_checkpoint_id"),            Nullable] public long?    CurrentCheckpointID           { get; set; } // bigint
			[Column("current_checkpoint_segment_count"), Nullable] public long?    CurrentCheckpointSegmentCount { get; set; } // bigint
			[Column("recovery_lsn_candidate"),           Nullable] public decimal? RecoveryLsnCandidate          { get; set; } // numeric(25,0)
			[Column("outstanding_checkpoint_count"),     Nullable] public long?    OutstandingCheckpointCount    { get; set; } // bigint
			[Column("closing_checkpoint_id"),            Nullable] public long?    ClosingCheckpointID           { get; set; } // bigint
			[Column("recovery_checkpoint_id"),           Nullable] public long?    RecoveryCheckpointID          { get; set; } // bigint
			[Column("recovery_checkpoint_ts"),           Nullable] public long?    RecoveryCheckpointTs          { get; set; } // bigint
			[Column("bootstrap_recovery_lsn"),           Nullable] public decimal? BootstrapRecoveryLsn          { get; set; } // numeric(25,0)
			[Column("bootstrap_root_file_guid"),         Nullable] public Guid?    BootstrapRootFileGuid         { get; set; } // uniqueidentifier
			[Column("internal_error_code"),              Nullable] public long?    InternalErrorCode             { get; set; } // bigint
			[Column("tail_cache_page_count"),            Nullable] public long?    TailCachePageCount            { get; set; } // bigint
			[Column("tail_cache_max_page_count"),        Nullable] public long?    TailCacheMaxPageCount         { get; set; } // bigint
			[Column("tail_cache_min_needed_lsn"),        Nullable] public decimal? TailCacheMinNeededLsn         { get; set; } // numeric(25,0)
			[Column("merge_outstanding_merges"),         Nullable] public long?    MergeOutstandingMerges        { get; set; } // bigint
			[Column("merge_stats_number_of_merges"),     Nullable] public long?    MergeStatsNumberOfMerges      { get; set; } // bigint
			[Column("merge_stats_log_blocks_merged"),    Nullable] public long?    MergeStatsLogBlocksMerged     { get; set; } // bigint
			[Column("merge_stats_bytes_merged"),         Nullable] public long?    MergeStatsBytesMerged         { get; set; } // bigint
			[Column("merge_stats_user_time"),            Nullable] public long?    MergeStatsUserTime            { get; set; } // bigint
			[Column("merge_stats_kernel_time"),          Nullable] public long?    MergeStatsKernelTime          { get; set; } // bigint
			[Column("bytes_of_large_data_serialized"),   Nullable] public long?    BytesOfLargeDataSerialized    { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_db_xtp_gc_cycle_stats", IsView=true)]
		public partial class DmDbXtpGcCycleStats
		{
			[Column("cycle_id"),              NotNull] public long CycleID            { get; set; } // bigint
			[Column("ticks_at_cycle_start"),  NotNull] public long TicksAtCycleStart  { get; set; } // bigint
			[Column("ticks_at_cycle_end"),    NotNull] public long TicksAtCycleEnd    { get; set; } // bigint
			[Column("node_id"),               NotNull] public int  NodeID             { get; set; } // int
			[Column("base_generation"),       NotNull] public long BaseGeneration     { get; set; } // bigint
			[Column("xacts_copied_to_local"), NotNull] public long XactsCopiedToLocal { get; set; } // bigint
			[Column("xacts_in_gen_0"),        NotNull] public long XactsInGen0        { get; set; } // bigint
			[Column("xacts_in_gen_1"),        NotNull] public long XactsInGen1        { get; set; } // bigint
			[Column("xacts_in_gen_2"),        NotNull] public long XactsInGen2        { get; set; } // bigint
			[Column("xacts_in_gen_3"),        NotNull] public long XactsInGen3        { get; set; } // bigint
			[Column("xacts_in_gen_4"),        NotNull] public long XactsInGen4        { get; set; } // bigint
			[Column("xacts_in_gen_5"),        NotNull] public long XactsInGen5        { get; set; } // bigint
			[Column("xacts_in_gen_6"),        NotNull] public long XactsInGen6        { get; set; } // bigint
			[Column("xacts_in_gen_7"),        NotNull] public long XactsInGen7        { get; set; } // bigint
			[Column("xacts_in_gen_8"),        NotNull] public long XactsInGen8        { get; set; } // bigint
			[Column("xacts_in_gen_9"),        NotNull] public long XactsInGen9        { get; set; } // bigint
			[Column("xacts_in_gen_10"),       NotNull] public long XactsInGen10       { get; set; } // bigint
			[Column("xacts_in_gen_11"),       NotNull] public long XactsInGen11       { get; set; } // bigint
			[Column("xacts_in_gen_12"),       NotNull] public long XactsInGen12       { get; set; } // bigint
			[Column("xacts_in_gen_13"),       NotNull] public long XactsInGen13       { get; set; } // bigint
			[Column("xacts_in_gen_14"),       NotNull] public long XactsInGen14       { get; set; } // bigint
			[Column("xacts_in_gen_15"),       NotNull] public long XactsInGen15       { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_db_xtp_hash_index_stats", IsView=true)]
		public partial class DmDbXtpHashIndexStats
		{
			[Column("object_id"),          NotNull    ] public int   ObjectID         { get; set; } // int
			[Column("xtp_object_id"),      NotNull    ] public int   XtpObjectID      { get; set; } // int
			[Column("index_id"),           NotNull    ] public int   IndexID          { get; set; } // int
			[Column("total_bucket_count"), NotNull    ] public long  TotalBucketCount { get; set; } // bigint
			[Column("empty_bucket_count"),    Nullable] public long? EmptyBucketCount { get; set; } // bigint
			[Column("avg_chain_length"),   NotNull    ] public long  AvgChainLength   { get; set; } // bigint
			[Column("max_chain_length"),   NotNull    ] public long  MaxChainLength   { get; set; } // bigint

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="DmDbXtpHashIndexStats")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="dm_db_xtp_index_stats", IsView=true)]
		public partial class DmDbXtpIndexStats
		{
			[Column("object_id"),                                NotNull] public int    ObjectID                             { get; set; } // int
			[Column("xtp_object_id"),                            NotNull] public int    XtpObjectID                          { get; set; } // int
			[Column("index_id"),                                 NotNull] public int    IndexID                              { get; set; } // int
			[Column("scans_started"),                            NotNull] public long   ScansStarted                         { get; set; } // bigint
			[Column("scans_retries"),                            NotNull] public long   ScansRetries                         { get; set; } // bigint
			[Column("rows_returned"),                            NotNull] public long   RowsReturned                         { get; set; } // bigint
			[Column("rows_touched"),                             NotNull] public long   RowsTouched                          { get; set; } // bigint
			[Column("rows_expiring"),                            NotNull] public long   RowsExpiring                         { get; set; } // bigint
			[Column("rows_expired"),                             NotNull] public long   RowsExpired                          { get; set; } // bigint
			[Column("rows_expired_removed"),                     NotNull] public long   RowsExpiredRemoved                   { get; set; } // bigint
			[Column("phantom_scans_started"),                    NotNull] public long   PhantomScansStarted                  { get; set; } // bigint
			[Column("phantom_scans_retries"),                    NotNull] public long   PhantomScansRetries                  { get; set; } // bigint
			[Column("phantom_rows_touched"),                     NotNull] public long   PhantomRowsTouched                   { get; set; } // bigint
			[Column("phantom_expiring_rows_encountered"),        NotNull] public long   PhantomExpiringRowsEncountered       { get; set; } // bigint
			[Column("phantom_expired_removed_rows_encountered"), NotNull] public long   PhantomExpiredRemovedRowsEncountered { get; set; } // bigint
			[Column("phantom_expired_rows_removed"),             NotNull] public long   PhantomExpiredRowsRemoved            { get; set; } // bigint
			[Column("object_address"),                           NotNull] public byte[] ObjectAddress                        { get; set; } = null!; // varbinary(8)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="DmDbXtpIndexStats")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="dm_db_xtp_memory_consumers", IsView=true)]
		public partial class DmDbXtpMemoryConsumers
		{
			[Column("memory_consumer_id"),        NotNull    ] public long    MemoryConsumerID       { get; set; } // bigint
			[Column("memory_consumer_type"),      NotNull    ] public int     MemoryConsumerType     { get; set; } // int
			[Column("memory_consumer_type_desc"), NotNull    ] public string  MemoryConsumerTypeDesc { get; set; } = null!; // nvarchar(16)
			[Column("memory_consumer_desc"),         Nullable] public string? MemoryConsumerDesc     { get; set; } // nvarchar(64)
			[Column("object_id"),                    Nullable] public int?    ObjectID               { get; set; } // int
			[Column("xtp_object_id"),                Nullable] public int?    XtpObjectID            { get; set; } // int
			[Column("index_id"),                     Nullable] public int?    IndexID                { get; set; } // int
			[Column("allocated_bytes"),           NotNull    ] public long    AllocatedBytes         { get; set; } // bigint
			[Column("used_bytes"),                NotNull    ] public long    UsedBytes              { get; set; } // bigint
			[Column("allocation_count"),          NotNull    ] public long    AllocationCount        { get; set; } // bigint
			[Column("partition_count"),           NotNull    ] public int     PartitionCount         { get; set; } // int
			[Column("sizeclass_count"),           NotNull    ] public int     SizeclassCount         { get; set; } // int
			[Column("min_sizeclass"),             NotNull    ] public int     MinSizeclass           { get; set; } // int
			[Column("max_sizeclass"),             NotNull    ] public int     MaxSizeclass           { get; set; } // int
			[Column("memory_consumer_address"),   NotNull    ] public byte[]  MemoryConsumerAddress  { get; set; } = null!; // varbinary(8)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="DmDbXtpMemoryConsumers")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="dm_db_xtp_nonclustered_index_stats", IsView=true)]
		public partial class DmDbXtpNonclusteredIndexStats
		{
			[Column("object_id"),                      NotNull] public int  ObjectID                    { get; set; } // int
			[Column("xtp_object_id"),                  NotNull] public int  XtpObjectID                 { get; set; } // int
			[Column("index_id"),                       NotNull] public int  IndexID                     { get; set; } // int
			[Column("delta_pages"),                    NotNull] public long DeltaPages                  { get; set; } // bigint
			[Column("internal_pages"),                 NotNull] public long InternalPages               { get; set; } // bigint
			[Column("leaf_pages"),                     NotNull] public long LeafPages                   { get; set; } // bigint
			[Column("outstanding_retired_nodes"),      NotNull] public long OutstandingRetiredNodes     { get; set; } // bigint
			[Column("page_update_count"),              NotNull] public long PageUpdateCount             { get; set; } // bigint
			[Column("page_update_retry_count"),        NotNull] public long PageUpdateRetryCount        { get; set; } // bigint
			[Column("page_consolidation_count"),       NotNull] public long PageConsolidationCount      { get; set; } // bigint
			[Column("page_consolidation_retry_count"), NotNull] public long PageConsolidationRetryCount { get; set; } // bigint
			[Column("page_split_count"),               NotNull] public long PageSplitCount              { get; set; } // bigint
			[Column("page_split_retry_count"),         NotNull] public long PageSplitRetryCount         { get; set; } // bigint
			[Column("key_split_count"),                NotNull] public long KeySplitCount               { get; set; } // bigint
			[Column("key_split_retry_count"),          NotNull] public long KeySplitRetryCount          { get; set; } // bigint
			[Column("page_merge_count"),               NotNull] public long PageMergeCount              { get; set; } // bigint
			[Column("page_merge_retry_count"),         NotNull] public long PageMergeRetryCount         { get; set; } // bigint
			[Column("key_merge_count"),                NotNull] public long KeyMergeCount               { get; set; } // bigint
			[Column("key_merge_retry_count"),          NotNull] public long KeyMergeRetryCount          { get; set; } // bigint
			[Column("uses_key_normalization"),         NotNull] public bool UsesKeyNormalization        { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="DmDbXtpNonclusteredIndexStats")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="dm_db_xtp_object_stats", IsView=true)]
		public partial class DmDbXtpObjectStats
		{
			[Column("object_id"),                    NotNull] public int    ObjectID                   { get; set; } // int
			[Column("xtp_object_id"),                NotNull] public int    XtpObjectID                { get; set; } // int
			[Column("row_insert_attempts"),          NotNull] public long   RowInsertAttempts          { get; set; } // bigint
			[Column("row_update_attempts"),          NotNull] public long   RowUpdateAttempts          { get; set; } // bigint
			[Column("row_delete_attempts"),          NotNull] public long   RowDeleteAttempts          { get; set; } // bigint
			[Column("write_conflicts"),              NotNull] public long   WriteConflicts             { get; set; } // bigint
			[Column("unique_constraint_violations"), NotNull] public long   UniqueConstraintViolations { get; set; } // bigint
			[Column("object_address"),               NotNull] public byte[] ObjectAddress              { get; set; } = null!; // varbinary(8)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="DmDbXtpObjectStats")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="dm_db_xtp_table_memory_stats", IsView=true)]
		public partial class DmDbXtpTableMemoryStats
		{
			[Column("object_id"),                       Nullable] public int?  ObjectID                    { get; set; } // int
			[Column("memory_allocated_for_table_kb"),   Nullable] public long? MemoryAllocatedForTableKb   { get; set; } // bigint
			[Column("memory_used_by_table_kb"),         Nullable] public long? MemoryUsedByTableKb         { get; set; } // bigint
			[Column("memory_allocated_for_indexes_kb"), Nullable] public long? MemoryAllocatedForIndexesKb { get; set; } // bigint
			[Column("memory_used_by_indexes_kb"),       Nullable] public long? MemoryUsedByIndexesKb       { get; set; } // bigint

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="DmDbXtpTableMemoryStats")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="dm_db_xtp_transactions", IsView=true)]
		public partial class DmDbXtpTransactions
		{
			[Column("node_id"),                               NotNull] public short  NodeID                            { get; set; } // smallint
			[Column("xtp_transaction_id"),                    NotNull] public long   XtpTransactionID                  { get; set; } // bigint
			[Column("transaction_id"),                        NotNull] public long   TransactionID                     { get; set; } // bigint
			[Column("session_id"),                            NotNull] public short  SessionID                         { get; set; } // smallint
			[Column("begin_tsn"),                             NotNull] public long   BeginTsn                          { get; set; } // bigint
			[Column("end_tsn"),                               NotNull] public long   EndTsn                            { get; set; } // bigint
			[Column("state"),                                 NotNull] public int    State                             { get; set; } // int
			[Column("state_desc"),                            NotNull] public string StateDesc                         { get; set; } = null!; // nvarchar(16)
			[Column("result"),                                NotNull] public int    Result                            { get; set; } // int
			[Column("result_desc"),                           NotNull] public string ResultDesc                        { get; set; } = null!; // nvarchar(24)
			[Column("xtp_parent_transaction_node_id"),        NotNull] public short  XtpParentTransactionNodeID        { get; set; } // smallint
			[Column("xtp_parent_transaction_id"),             NotNull] public long   XtpParentTransactionID            { get; set; } // bigint
			[Column("last_error"),                            NotNull] public int    LastError                         { get; set; } // int
			[Column("is_speculative"),                        NotNull] public bool   IsSpeculative                     { get; set; } // bit
			[Column("is_prepared"),                           NotNull] public bool   IsPrepared                        { get; set; } // bit
			[Column("is_delayed_durability"),                 NotNull] public bool   IsDelayedDurability               { get; set; } // bit
			[Column("memory_address"),                        NotNull] public byte[] MemoryAddress                     { get; set; } = null!; // varbinary(8)
			[Column("database_address"),                      NotNull] public byte[] DatabaseAddress                   { get; set; } = null!; // varbinary(8)
			[Column("thread_id"),                             NotNull] public int    ThreadID                          { get; set; } // int
			[Column("read_set_row_count"),                    NotNull] public int    ReadSetRowCount                   { get; set; } // int
			[Column("write_set_row_count"),                   NotNull] public int    WriteSetRowCount                  { get; set; } // int
			[Column("scan_set_count"),                        NotNull] public int    ScanSetCount                      { get; set; } // int
			[Column("savepoint_garbage_count"),               NotNull] public int    SavepointGarbageCount             { get; set; } // int
			[Column("log_bytes_required"),                    NotNull] public long   LogBytesRequired                  { get; set; } // bigint
			[Column("count_of_allocations"),                  NotNull] public int    CountOfAllocations                { get; set; } // int
			[Column("allocated_bytes"),                       NotNull] public int    AllocatedBytes                    { get; set; } // int
			[Column("reserved_bytes"),                        NotNull] public int    ReservedBytes                     { get; set; } // int
			[Column("commit_dependency_count"),               NotNull] public int    CommitDependencyCount             { get; set; } // int
			[Column("commit_dependency_total_attempt_count"), NotNull] public int    CommitDependencyTotalAttemptCount { get; set; } // int
			[Column("scan_area"),                             NotNull] public int    ScanArea                          { get; set; } // int
			[Column("scan_area_desc"),                        NotNull] public string ScanAreaDesc                      { get; set; } = null!; // nvarchar(16)
			[Column("scan_location"),                         NotNull] public int    ScanLocation                      { get; set; } // int
			[Column("dependent_1_address"),                   NotNull] public byte[] Dependent1Address                 { get; set; } = null!; // varbinary(8)
			[Column("dependent_2_address"),                   NotNull] public byte[] Dependent2Address                 { get; set; } = null!; // varbinary(8)
			[Column("dependent_3_address"),                   NotNull] public byte[] Dependent3Address                 { get; set; } = null!; // varbinary(8)
			[Column("dependent_4_address"),                   NotNull] public byte[] Dependent4Address                 { get; set; } = null!; // varbinary(8)
			[Column("dependent_5_address"),                   NotNull] public byte[] Dependent5Address                 { get; set; } = null!; // varbinary(8)
			[Column("dependent_6_address"),                   NotNull] public byte[] Dependent6Address                 { get; set; } = null!; // varbinary(8)
			[Column("dependent_7_address"),                   NotNull] public byte[] Dependent7Address                 { get; set; } = null!; // varbinary(8)
			[Column("dependent_8_address"),                   NotNull] public byte[] Dependent8Address                 { get; set; } = null!; // varbinary(8)
		}

		[Table(Schema="sys", Name="dm_distributed_exchange_stats", IsView=true)]
		public partial class DmDistributedExchangeStats
		{
			[Column("request_id"),                     Nullable] public string?   RequestID                 { get; set; } // nvarchar(32)
			[Column("step_index"),                  NotNull    ] public int       StepIndex                 { get; set; } // int
			[Column("dms_step_index"),                 Nullable] public int?      DmsStepIndex              { get; set; } // int
			[Column("source_distribution_id"),      NotNull    ] public int       SourceDistributionID      { get; set; } // int
			[Column("destination_distribution_id"),    Nullable] public int?      DestinationDistributionID { get; set; } // int
			[Column("type"),                           Nullable] public string?   Type                      { get; set; } // nvarchar(32)
			[Column("status"),                         Nullable] public string?   Status                    { get; set; } // nvarchar(32)
			[Column("bytes_per_sec"),               NotNull    ] public long      BytesPerSec               { get; set; } // bigint
			[Column("bytes_processed"),             NotNull    ] public long      BytesProcessed            { get; set; } // bigint
			[Column("rows_processed"),              NotNull    ] public long      RowsProcessed             { get; set; } // bigint
			[Column("start_time"),                  NotNull    ] public DateTime  StartTime                 { get; set; } // datetime
			[Column("end_time"),                       Nullable] public DateTime? EndTime                   { get; set; } // datetime
			[Column("total_elapsed_time"),          NotNull    ] public int       TotalElapsedTime          { get; set; } // int
			[Column("cpu_time"),                       Nullable] public long?     CpuTime                   { get; set; } // bigint
			[Column("query_time"),                  NotNull    ] public int       QueryTime                 { get; set; } // int
			[Column("buffers_available"),              Nullable] public int?      BuffersAvailable          { get; set; } // int
			[Column("sql_spid"),                    NotNull    ] public int       SqlSpid                   { get; set; } // int
			[Column("dms_cpid"),                       Nullable] public int?      DmsCpid                   { get; set; } // int
			[Column("error_id"),                       Nullable] public string?   ErrorID                   { get; set; } // nvarchar(36)
			[Column("source_info"),                    Nullable] public string?   SourceInfo                { get; set; } // nvarchar(4000)
			[Column("destination_info"),               Nullable] public string?   DestinationInfo           { get; set; } // nvarchar(4000)
		}

		[Table(Schema="sys", Name="dm_exec_background_job_queue", IsView=true)]
		public partial class DmExecBackgroundJobQueue
		{
			[Column("time_queued"),  NotNull    ] public DateTime TimeQueued  { get; set; } // datetime
			[Column("job_id"),       NotNull    ] public int      JobID       { get; set; } // int
			[Column("database_id"),  NotNull    ] public int      DatabaseID  { get; set; } // int
			[Column("object_id1"),   NotNull    ] public int      ObjectId1   { get; set; } // int
			[Column("object_id2"),   NotNull    ] public int      ObjectId2   { get; set; } // int
			[Column("object_id3"),   NotNull    ] public int      ObjectId3   { get; set; } // int
			[Column("object_id4"),   NotNull    ] public int      ObjectId4   { get; set; } // int
			[Column("error_code"),      Nullable] public int?     ErrorCode   { get; set; } // int
			[Column("request_type"), NotNull    ] public short    RequestType { get; set; } // smallint
			[Column("retry_count"),  NotNull    ] public short    RetryCount  { get; set; } // smallint
			[Column("in_progress"),  NotNull    ] public short    InProgress  { get; set; } // smallint
			[Column("session_id"),      Nullable] public short?   SessionID   { get; set; } // smallint
		}

		[Table(Schema="sys", Name="dm_exec_background_job_queue_stats", IsView=true)]
		public partial class DmExecBackgroundJobQueueStats
		{
			[Column("queue_max_len"),                  NotNull] public int QueueMaxLen                 { get; set; } // int
			[Column("enqueued_count"),                 NotNull] public int EnqueuedCount               { get; set; } // int
			[Column("started_count"),                  NotNull] public int StartedCount                { get; set; } // int
			[Column("ended_count"),                    NotNull] public int EndedCount                  { get; set; } // int
			[Column("failed_lock_count"),              NotNull] public int FailedLockCount             { get; set; } // int
			[Column("failed_other_count"),             NotNull] public int FailedOtherCount            { get; set; } // int
			[Column("failed_giveup_count"),            NotNull] public int FailedGiveupCount           { get; set; } // int
			[Column("enqueue_failed_full_count"),      NotNull] public int EnqueueFailedFullCount      { get; set; } // int
			[Column("enqueue_failed_duplicate_count"), NotNull] public int EnqueueFailedDuplicateCount { get; set; } // int
			[Column("elapsed_avg_ms"),                 NotNull] public int ElapsedAvgMs                { get; set; } // int
			[Column("elapsed_max_ms"),                 NotNull] public int ElapsedMaxMs                { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_exec_cached_plans", IsView=true)]
		public partial class DmExecCachedPlans
		{
			[Column("bucketid"),              NotNull    ] public int     Bucketid            { get; set; } // int
			[Column("refcounts"),             NotNull    ] public int     Refcounts           { get; set; } // int
			[Column("usecounts"),             NotNull    ] public int     Usecounts           { get; set; } // int
			[Column("size_in_bytes"),         NotNull    ] public int     SizeInBytes         { get; set; } // int
			[Column("memory_object_address"), NotNull    ] public byte[]  MemoryObjectAddress { get; set; } = null!; // varbinary(8)
			[Column("cacheobjtype"),          NotNull    ] public string  Cacheobjtype        { get; set; } = null!; // nvarchar(50)
			[Column("objtype"),               NotNull    ] public string  Objtype             { get; set; } = null!; // nvarchar(20)
			[Column("plan_handle"),           NotNull    ] public byte[]  PlanHandle          { get; set; } = null!; // varbinary(64)
			[Column("pool_id"),               NotNull    ] public int     PoolID              { get; set; } // int
			[Column("parent_plan_handle"),       Nullable] public byte[]? ParentPlanHandle    { get; set; } // varbinary(64)
		}

		[Table(Schema="sys", Name="dm_exec_compute_node_errors", IsView=true)]
		public partial class DmExecComputeNodeErrors
		{
			[Column("error_id"),           Nullable] public string?   ErrorID       { get; set; } // nvarchar(36)
			[Column("source"),             Nullable] public string?   Source        { get; set; } // nvarchar(255)
			[Column("type"),               Nullable] public string?   Type          { get; set; } // nvarchar(255)
			[Column("create_time"),        Nullable] public DateTime? CreateTime    { get; set; } // datetime
			[Column("compute_node_id"),    Nullable] public int?      ComputeNodeID { get; set; } // int
			[Column("execution_id"),       Nullable] public string?   ExecutionID   { get; set; } // nvarchar(36)
			[Column("spid"),               Nullable] public int?      Spid          { get; set; } // int
			[Column("thread_id"),          Nullable] public int?      ThreadID      { get; set; } // int
			[Column("details"),            Nullable] public string?   Details       { get; set; } // nvarchar(4000)
			[Column("compute_pool_id"), NotNull    ] public int       ComputePoolID { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_exec_compute_nodes", IsView=true)]
		public partial class DmExecComputeNodes
		{
			[Column("compute_node_id"),    Nullable] public int?    ComputeNodeID { get; set; } // int
			[Column("type"),               Nullable] public string? Type          { get; set; } // nvarchar(32)
			[Column("name"),               Nullable] public string? Name          { get; set; } // nvarchar(32)
			[Column("address"),            Nullable] public string? Address       { get; set; } // nvarchar(32)
			[Column("compute_pool_id"), NotNull    ] public int     ComputePoolID { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_exec_compute_node_status", IsView=true)]
		public partial class DmExecComputeNodeStatus
		{
			[Column("compute_node_id"),       Nullable] public int?      ComputeNodeID    { get; set; } // int
			[Column("process_id"),            Nullable] public int?      ProcessID        { get; set; } // int
			[Column("process_name"),          Nullable] public string?   ProcessName      { get; set; } // nvarchar(255)
			[Column("allocated_memory"),      Nullable] public long?     AllocatedMemory  { get; set; } // bigint
			[Column("available_memory"),      Nullable] public long?     AvailableMemory  { get; set; } // bigint
			[Column("process_cpu_usage"),     Nullable] public long?     ProcessCpuUsage  { get; set; } // bigint
			[Column("total_cpu_usage"),       Nullable] public long?     TotalCpuUsage    { get; set; } // bigint
			[Column("thread_count"),          Nullable] public long?     ThreadCount      { get; set; } // bigint
			[Column("handle_count"),          Nullable] public long?     HandleCount      { get; set; } // bigint
			[Column("total_elapsed_time"),    Nullable] public long?     TotalElapsedTime { get; set; } // bigint
			[Column("is_available"),          Nullable] public bool?     IsAvailable      { get; set; } // bit
			[Column("sent_time"),             Nullable] public DateTime? SentTime         { get; set; } // datetime
			[Column("received_time"),         Nullable] public DateTime? ReceivedTime     { get; set; } // datetime
			[Column("error_id"),              Nullable] public string?   ErrorID          { get; set; } // nvarchar(36)
			[Column("compute_pool_id"),    NotNull    ] public int       ComputePoolID    { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_exec_compute_pools", IsView=true)]
		public partial class DmExecComputePools
		{
			[Column("compute_pool_id"), NotNull    ] public int     ComputePoolID { get; set; } // int
			[Column("name"),               Nullable] public string? Name          { get; set; } // nvarchar(256)
			[Column("location"),        NotNull    ] public string  Location      { get; set; } = null!; // nvarchar(256)
		}

		[Table(Schema="sys", Name="dm_exec_connections", IsView=true)]
		public partial class DmExecConnections
		{
			[Column("session_id"),                Nullable] public int?      SessionID           { get; set; } // int
			[Column("most_recent_session_id"),    Nullable] public int?      MostRecentSessionID { get; set; } // int
			[Column("connect_time"),           NotNull    ] public DateTime  ConnectTime         { get; set; } // datetime
			[Column("net_transport"),          NotNull    ] public string    NetTransport        { get; set; } = null!; // nvarchar(40)
			[Column("protocol_type"),             Nullable] public string?   ProtocolType        { get; set; } // nvarchar(40)
			[Column("protocol_version"),          Nullable] public int?      ProtocolVersion     { get; set; } // int
			[Column("endpoint_id"),               Nullable] public int?      EndpointID          { get; set; } // int
			[Column("encrypt_option"),         NotNull    ] public string    EncryptOption       { get; set; } = null!; // nvarchar(40)
			[Column("auth_scheme"),            NotNull    ] public string    AuthScheme          { get; set; } = null!; // nvarchar(40)
			[Column("node_affinity"),          NotNull    ] public short     NodeAffinity        { get; set; } // smallint
			[Column("num_reads"),                 Nullable] public int?      NumReads            { get; set; } // int
			[Column("num_writes"),                Nullable] public int?      NumWrites           { get; set; } // int
			[Column("last_read"),                 Nullable] public DateTime? LastRead            { get; set; } // datetime
			[Column("last_write"),                Nullable] public DateTime? LastWrite           { get; set; } // datetime
			[Column("net_packet_size"),           Nullable] public int?      NetPacketSize       { get; set; } // int
			[Column("client_net_address"),        Nullable] public string?   ClientNetAddress    { get; set; } // nvarchar(48)
			[Column("client_tcp_port"),           Nullable] public int?      ClientTcpPort       { get; set; } // int
			[Column("local_net_address"),         Nullable] public string?   LocalNetAddress     { get; set; } // nvarchar(48)
			[Column("local_tcp_port"),            Nullable] public int?      LocalTcpPort        { get; set; } // int
			[Column("connection_id"),          NotNull    ] public Guid      ConnectionID        { get; set; } // uniqueidentifier
			[Column("parent_connection_id"),      Nullable] public Guid?     ParentConnectionID  { get; set; } // uniqueidentifier
			[Column("most_recent_sql_handle"),    Nullable] public byte[]?   MostRecentSqlHandle { get; set; } // varbinary(64)
		}

		[Table(Schema="sys", Name="dm_exec_distributed_requests", IsView=true)]
		public partial class DmExecDistributedRequests
		{
			[Column("sql_handle"),            Nullable] public byte[]?   SqlHandle        { get; set; } // varbinary(64)
			[Column("execution_id"),          Nullable] public string?   ExecutionID      { get; set; } // nvarchar(32)
			[Column("status"),                Nullable] public string?   Status           { get; set; } // nvarchar(32)
			[Column("error_id"),              Nullable] public string?   ErrorID          { get; set; } // nvarchar(36)
			[Column("start_time"),            Nullable] public DateTime? StartTime        { get; set; } // datetime
			[Column("end_time"),              Nullable] public DateTime? EndTime          { get; set; } // datetime
			[Column("total_elapsed_time"),    Nullable] public int?      TotalElapsedTime { get; set; } // int
			[Column("compute_pool_id"),    NotNull    ] public int       ComputePoolID    { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_exec_distributed_request_steps", IsView=true)]
		public partial class DmExecDistributedRequestSteps
		{
			[Column("execution_id"),          Nullable] public string?   ExecutionID      { get; set; } // nvarchar(32)
			[Column("step_index"),            Nullable] public int?      StepIndex        { get; set; } // int
			[Column("operation_type"),        Nullable] public string?   OperationType    { get; set; } // nvarchar(128)
			[Column("distribution_type"),     Nullable] public string?   DistributionType { get; set; } // nvarchar(32)
			[Column("location_type"),         Nullable] public string?   LocationType     { get; set; } // nvarchar(32)
			[Column("status"),                Nullable] public string?   Status           { get; set; } // nvarchar(32)
			[Column("error_id"),              Nullable] public string?   ErrorID          { get; set; } // nvarchar(36)
			[Column("start_time"),            Nullable] public DateTime? StartTime        { get; set; } // datetime
			[Column("end_time"),              Nullable] public DateTime? EndTime          { get; set; } // datetime
			[Column("total_elapsed_time"),    Nullable] public int?      TotalElapsedTime { get; set; } // int
			[Column("row_count"),             Nullable] public long?     RowCount         { get; set; } // bigint
			[Column("command"),               Nullable] public string?   Command          { get; set; } // nvarchar(4000)
			[Column("compute_pool_id"),    NotNull    ] public int       ComputePoolID    { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_exec_distributed_sql_requests", IsView=true)]
		public partial class DmExecDistributedSqlRequests
		{
			[Column("execution_id"),          Nullable] public string?   ExecutionID      { get; set; } // nvarchar(32)
			[Column("step_index"),            Nullable] public int?      StepIndex        { get; set; } // int
			[Column("compute_node_id"),       Nullable] public int?      ComputeNodeID    { get; set; } // int
			[Column("distribution_id"),       Nullable] public int?      DistributionID   { get; set; } // int
			[Column("status"),                Nullable] public string?   Status           { get; set; } // nvarchar(32)
			[Column("error_id"),              Nullable] public string?   ErrorID          { get; set; } // nvarchar(36)
			[Column("start_time"),            Nullable] public DateTime? StartTime        { get; set; } // datetime
			[Column("end_time"),              Nullable] public DateTime? EndTime          { get; set; } // datetime
			[Column("total_elapsed_time"),    Nullable] public int?      TotalElapsedTime { get; set; } // int
			[Column("row_count"),             Nullable] public long?     RowCount         { get; set; } // bigint
			[Column("spid"),                  Nullable] public int?      Spid             { get; set; } // int
			[Column("command"),               Nullable] public string?   Command          { get; set; } // nvarchar(4000)
			[Column("compute_pool_id"),    NotNull    ] public int       ComputePoolID    { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_exec_dms_services", IsView=true)]
		public partial class DmExecDmsServices
		{
			[Column("dms_core_id"),        Nullable] public int?    DmsCoreID     { get; set; } // int
			[Column("compute_node_id"),    Nullable] public int?    ComputeNodeID { get; set; } // int
			[Column("status"),             Nullable] public string? Status        { get; set; } // nvarchar(32)
			[Column("compute_pool_id"), NotNull    ] public int     ComputePoolID { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_exec_dms_workers", IsView=true)]
		public partial class DmExecDmsWorkers
		{
			[Column("execution_id"),          Nullable] public string?   ExecutionID      { get; set; } // nvarchar(32)
			[Column("step_index"),            Nullable] public int?      StepIndex        { get; set; } // int
			[Column("dms_step_index"),        Nullable] public int?      DmsStepIndex     { get; set; } // int
			[Column("compute_node_id"),       Nullable] public int?      ComputeNodeID    { get; set; } // int
			[Column("distribution_id"),       Nullable] public int?      DistributionID   { get; set; } // int
			[Column("type"),                  Nullable] public string?   Type             { get; set; } // nvarchar(32)
			[Column("status"),                Nullable] public string?   Status           { get; set; } // nvarchar(32)
			[Column("bytes_per_sec"),         Nullable] public long?     BytesPerSec      { get; set; } // bigint
			[Column("bytes_processed"),       Nullable] public long?     BytesProcessed   { get; set; } // bigint
			[Column("rows_processed"),        Nullable] public long?     RowsProcessed    { get; set; } // bigint
			[Column("start_time"),            Nullable] public DateTime? StartTime        { get; set; } // datetime
			[Column("end_time"),              Nullable] public DateTime? EndTime          { get; set; } // datetime
			[Column("total_elapsed_time"),    Nullable] public int?      TotalElapsedTime { get; set; } // int
			[Column("cpu_time"),              Nullable] public long?     CpuTime          { get; set; } // bigint
			[Column("query_time"),            Nullable] public int?      QueryTime        { get; set; } // int
			[Column("buffers_available"),     Nullable] public int?      BuffersAvailable { get; set; } // int
			[Column("dms_cpid"),              Nullable] public int?      DmsCpid          { get; set; } // int
			[Column("sql_spid"),              Nullable] public int?      SqlSpid          { get; set; } // int
			[Column("error_id"),              Nullable] public string?   ErrorID          { get; set; } // nvarchar(36)
			[Column("source_info"),           Nullable] public string?   SourceInfo       { get; set; } // nvarchar(4000)
			[Column("destination_info"),      Nullable] public string?   DestinationInfo  { get; set; } // nvarchar(4000)
			[Column("command"),               Nullable] public string?   Command          { get; set; } // nvarchar(4000)
			[Column("compute_pool_id"),    NotNull    ] public int       ComputePoolID    { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_exec_external_operations", IsView=true)]
		public partial class DmExecExternalOperations
		{
			[Column("execution_id"),       Nullable] public string? ExecutionID    { get; set; } // nvarchar(32)
			[Column("step_index"),         Nullable] public int?    StepIndex      { get; set; } // int
			[Column("operation_type"),     Nullable] public string? OperationType  { get; set; } // nvarchar(128)
			[Column("operation_name"),     Nullable] public string? OperationName  { get; set; } // nvarchar(4000)
			[Column("map_progress"),       Nullable] public double? MapProgress    { get; set; } // float
			[Column("reduce_progress"),    Nullable] public double? ReduceProgress { get; set; } // float
			[Column("compute_pool_id"), NotNull    ] public int     ComputePoolID  { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_exec_external_work", IsView=true)]
		public partial class DmExecExternalWork
		{
			[Column("execution_id"),          Nullable] public string?   ExecutionID      { get; set; } // nvarchar(32)
			[Column("step_index"),            Nullable] public int?      StepIndex        { get; set; } // int
			[Column("dms_step_index"),        Nullable] public int?      DmsStepIndex     { get; set; } // int
			[Column("work_id"),               Nullable] public int?      WorkID           { get; set; } // int
			[Column("compute_node_id"),       Nullable] public int?      ComputeNodeID    { get; set; } // int
			[Column("type"),                  Nullable] public string?   Type             { get; set; } // nvarchar(60)
			[Column("input_name"),            Nullable] public string?   InputName        { get; set; } // nvarchar(4000)
			[Column("read_location"),         Nullable] public long?     ReadLocation     { get; set; } // bigint
			[Column("read_command"),          Nullable] public string?   ReadCommand      { get; set; } // nvarchar(4000)
			[Column("bytes_processed"),       Nullable] public long?     BytesProcessed   { get; set; } // bigint
			[Column("length"),                Nullable] public long?     Length           { get; set; } // bigint
			[Column("start_time"),            Nullable] public DateTime? StartTime        { get; set; } // datetime
			[Column("end_time"),              Nullable] public DateTime? EndTime          { get; set; } // datetime
			[Column("total_elapsed_time"),    Nullable] public int?      TotalElapsedTime { get; set; } // int
			[Column("status"),                Nullable] public string?   Status           { get; set; } // nvarchar(32)
			[Column("compute_pool_id"),    NotNull    ] public int       ComputePoolID    { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_exec_function_stats", IsView=true)]
		public partial class DmExecFunctionStats
		{
			[Column("database_id"),                 NotNull    ] public int       DatabaseID              { get; set; } // int
			[Column("object_id"),                   NotNull    ] public int       ObjectID                { get; set; } // int
			[Column("type"),                           Nullable] public string?   Type                    { get; set; } // char(2)
			[Column("type_desc"),                      Nullable] public string?   TypeDesc                { get; set; } // nvarchar(60)
			[Column("sql_handle"),                  NotNull    ] public byte[]    SqlHandle               { get; set; } = null!; // varbinary(64)
			[Column("plan_handle"),                 NotNull    ] public byte[]    PlanHandle              { get; set; } = null!; // varbinary(64)
			[Column("cached_time"),                    Nullable] public DateTime? CachedTime              { get; set; } // datetime
			[Column("last_execution_time"),            Nullable] public DateTime? LastExecutionTime       { get; set; } // datetime
			[Column("execution_count"),             NotNull    ] public long      ExecutionCount          { get; set; } // bigint
			[Column("total_worker_time"),           NotNull    ] public long      TotalWorkerTime         { get; set; } // bigint
			[Column("last_worker_time"),            NotNull    ] public long      LastWorkerTime          { get; set; } // bigint
			[Column("min_worker_time"),             NotNull    ] public long      MinWorkerTime           { get; set; } // bigint
			[Column("max_worker_time"),             NotNull    ] public long      MaxWorkerTime           { get; set; } // bigint
			[Column("total_physical_reads"),        NotNull    ] public long      TotalPhysicalReads      { get; set; } // bigint
			[Column("last_physical_reads"),         NotNull    ] public long      LastPhysicalReads       { get; set; } // bigint
			[Column("min_physical_reads"),          NotNull    ] public long      MinPhysicalReads        { get; set; } // bigint
			[Column("max_physical_reads"),          NotNull    ] public long      MaxPhysicalReads        { get; set; } // bigint
			[Column("total_logical_writes"),        NotNull    ] public long      TotalLogicalWrites      { get; set; } // bigint
			[Column("last_logical_writes"),         NotNull    ] public long      LastLogicalWrites       { get; set; } // bigint
			[Column("min_logical_writes"),          NotNull    ] public long      MinLogicalWrites        { get; set; } // bigint
			[Column("max_logical_writes"),          NotNull    ] public long      MaxLogicalWrites        { get; set; } // bigint
			[Column("total_logical_reads"),         NotNull    ] public long      TotalLogicalReads       { get; set; } // bigint
			[Column("last_logical_reads"),          NotNull    ] public long      LastLogicalReads        { get; set; } // bigint
			[Column("min_logical_reads"),           NotNull    ] public long      MinLogicalReads         { get; set; } // bigint
			[Column("max_logical_reads"),           NotNull    ] public long      MaxLogicalReads         { get; set; } // bigint
			[Column("total_elapsed_time"),          NotNull    ] public long      TotalElapsedTime        { get; set; } // bigint
			[Column("last_elapsed_time"),           NotNull    ] public long      LastElapsedTime         { get; set; } // bigint
			[Column("min_elapsed_time"),            NotNull    ] public long      MinElapsedTime          { get; set; } // bigint
			[Column("max_elapsed_time"),            NotNull    ] public long      MaxElapsedTime          { get; set; } // bigint
			[Column("total_num_physical_reads"),    NotNull    ] public long      TotalNumPhysicalReads   { get; set; } // bigint
			[Column("last_num_physical_reads"),     NotNull    ] public long      LastNumPhysicalReads    { get; set; } // bigint
			[Column("min_num_physical_reads"),      NotNull    ] public long      MinNumPhysicalReads     { get; set; } // bigint
			[Column("max_num_physical_reads"),      NotNull    ] public long      MaxNumPhysicalReads     { get; set; } // bigint
			[Column("total_page_server_reads"),     NotNull    ] public long      TotalPageServerReads    { get; set; } // bigint
			[Column("last_page_server_reads"),      NotNull    ] public long      LastPageServerReads     { get; set; } // bigint
			[Column("min_page_server_reads"),       NotNull    ] public long      MinPageServerReads      { get; set; } // bigint
			[Column("max_page_server_reads"),       NotNull    ] public long      MaxPageServerReads      { get; set; } // bigint
			[Column("total_num_page_server_reads"), NotNull    ] public long      TotalNumPageServerReads { get; set; } // bigint
			[Column("last_num_page_server_reads"),  NotNull    ] public long      LastNumPageServerReads  { get; set; } // bigint
			[Column("min_num_page_server_reads"),   NotNull    ] public long      MinNumPageServerReads   { get; set; } // bigint
			[Column("max_num_page_server_reads"),   NotNull    ] public long      MaxNumPageServerReads   { get; set; } // bigint

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="DmExecFunctionStats")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="dm_exec_procedure_stats", IsView=true)]
		public partial class DmExecProcedureStats
		{
			[Column("database_id"),                 NotNull    ] public int       DatabaseID              { get; set; } // int
			[Column("object_id"),                   NotNull    ] public int       ObjectID                { get; set; } // int
			[Column("type"),                           Nullable] public string?   Type                    { get; set; } // char(2)
			[Column("type_desc"),                      Nullable] public string?   TypeDesc                { get; set; } // nvarchar(60)
			[Column("sql_handle"),                  NotNull    ] public byte[]    SqlHandle               { get; set; } = null!; // varbinary(64)
			[Column("plan_handle"),                 NotNull    ] public byte[]    PlanHandle              { get; set; } = null!; // varbinary(64)
			[Column("cached_time"),                    Nullable] public DateTime? CachedTime              { get; set; } // datetime
			[Column("last_execution_time"),            Nullable] public DateTime? LastExecutionTime       { get; set; } // datetime
			[Column("execution_count"),             NotNull    ] public long      ExecutionCount          { get; set; } // bigint
			[Column("total_worker_time"),           NotNull    ] public long      TotalWorkerTime         { get; set; } // bigint
			[Column("last_worker_time"),            NotNull    ] public long      LastWorkerTime          { get; set; } // bigint
			[Column("min_worker_time"),             NotNull    ] public long      MinWorkerTime           { get; set; } // bigint
			[Column("max_worker_time"),             NotNull    ] public long      MaxWorkerTime           { get; set; } // bigint
			[Column("total_physical_reads"),        NotNull    ] public long      TotalPhysicalReads      { get; set; } // bigint
			[Column("last_physical_reads"),         NotNull    ] public long      LastPhysicalReads       { get; set; } // bigint
			[Column("min_physical_reads"),          NotNull    ] public long      MinPhysicalReads        { get; set; } // bigint
			[Column("max_physical_reads"),          NotNull    ] public long      MaxPhysicalReads        { get; set; } // bigint
			[Column("total_logical_writes"),        NotNull    ] public long      TotalLogicalWrites      { get; set; } // bigint
			[Column("last_logical_writes"),         NotNull    ] public long      LastLogicalWrites       { get; set; } // bigint
			[Column("min_logical_writes"),          NotNull    ] public long      MinLogicalWrites        { get; set; } // bigint
			[Column("max_logical_writes"),          NotNull    ] public long      MaxLogicalWrites        { get; set; } // bigint
			[Column("total_logical_reads"),         NotNull    ] public long      TotalLogicalReads       { get; set; } // bigint
			[Column("last_logical_reads"),          NotNull    ] public long      LastLogicalReads        { get; set; } // bigint
			[Column("min_logical_reads"),           NotNull    ] public long      MinLogicalReads         { get; set; } // bigint
			[Column("max_logical_reads"),           NotNull    ] public long      MaxLogicalReads         { get; set; } // bigint
			[Column("total_elapsed_time"),          NotNull    ] public long      TotalElapsedTime        { get; set; } // bigint
			[Column("last_elapsed_time"),           NotNull    ] public long      LastElapsedTime         { get; set; } // bigint
			[Column("min_elapsed_time"),            NotNull    ] public long      MinElapsedTime          { get; set; } // bigint
			[Column("max_elapsed_time"),            NotNull    ] public long      MaxElapsedTime          { get; set; } // bigint
			[Column("total_spills"),                   Nullable] public long?     TotalSpills             { get; set; } // bigint
			[Column("last_spills"),                    Nullable] public long?     LastSpills              { get; set; } // bigint
			[Column("min_spills"),                     Nullable] public long?     MinSpills               { get; set; } // bigint
			[Column("max_spills"),                     Nullable] public long?     MaxSpills               { get; set; } // bigint
			[Column("total_num_physical_reads"),    NotNull    ] public long      TotalNumPhysicalReads   { get; set; } // bigint
			[Column("last_num_physical_reads"),     NotNull    ] public long      LastNumPhysicalReads    { get; set; } // bigint
			[Column("min_num_physical_reads"),      NotNull    ] public long      MinNumPhysicalReads     { get; set; } // bigint
			[Column("max_num_physical_reads"),      NotNull    ] public long      MaxNumPhysicalReads     { get; set; } // bigint
			[Column("total_page_server_reads"),     NotNull    ] public long      TotalPageServerReads    { get; set; } // bigint
			[Column("last_page_server_reads"),      NotNull    ] public long      LastPageServerReads     { get; set; } // bigint
			[Column("min_page_server_reads"),       NotNull    ] public long      MinPageServerReads      { get; set; } // bigint
			[Column("max_page_server_reads"),       NotNull    ] public long      MaxPageServerReads      { get; set; } // bigint
			[Column("total_num_page_server_reads"), NotNull    ] public long      TotalNumPageServerReads { get; set; } // bigint
			[Column("last_num_page_server_reads"),  NotNull    ] public long      LastNumPageServerReads  { get; set; } // bigint
			[Column("min_num_page_server_reads"),   NotNull    ] public long      MinNumPageServerReads   { get; set; } // bigint
			[Column("max_num_page_server_reads"),   NotNull    ] public long      MaxNumPageServerReads   { get; set; } // bigint

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="DmExecProcedureStats")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="dm_exec_query_memory_grants", IsView=true)]
		public partial class DmExecQueryMemoryGrants
		{
			[Column("session_id"),            Nullable] public short?    SessionID           { get; set; } // smallint
			[Column("request_id"),            Nullable] public int?      RequestID           { get; set; } // int
			[Column("scheduler_id"),          Nullable] public int?      SchedulerID         { get; set; } // int
			[Column("dop"),                   Nullable] public short?    Dop                 { get; set; } // smallint
			[Column("request_time"),          Nullable] public DateTime? RequestTime         { get; set; } // datetime
			[Column("grant_time"),            Nullable] public DateTime? GrantTime           { get; set; } // datetime
			[Column("requested_memory_kb"),   Nullable] public long?     RequestedMemoryKb   { get; set; } // bigint
			[Column("granted_memory_kb"),     Nullable] public long?     GrantedMemoryKb     { get; set; } // bigint
			[Column("required_memory_kb"),    Nullable] public long?     RequiredMemoryKb    { get; set; } // bigint
			[Column("used_memory_kb"),        Nullable] public long?     UsedMemoryKb        { get; set; } // bigint
			[Column("max_used_memory_kb"),    Nullable] public long?     MaxUsedMemoryKb     { get; set; } // bigint
			[Column("query_cost"),            Nullable] public double?   QueryCost           { get; set; } // float
			[Column("timeout_sec"),           Nullable] public int?      TimeoutSec          { get; set; } // int
			[Column("resource_semaphore_id"), Nullable] public short?    ResourceSemaphoreID { get; set; } // smallint
			[Column("queue_id"),              Nullable] public short?    QueueID             { get; set; } // smallint
			[Column("wait_order"),            Nullable] public int?      WaitOrder           { get; set; } // int
			[Column("is_next_candidate"),     Nullable] public bool?     IsNextCandidate     { get; set; } // bit
			[Column("wait_time_ms"),          Nullable] public long?     WaitTimeMs          { get; set; } // bigint
			[Column("plan_handle"),           Nullable] public byte[]?   PlanHandle          { get; set; } // varbinary(64)
			[Column("sql_handle"),            Nullable] public byte[]?   SqlHandle           { get; set; } // varbinary(64)
			[Column("group_id"),              Nullable] public int?      GroupID             { get; set; } // int
			[Column("pool_id"),               Nullable] public int?      PoolID              { get; set; } // int
			[Column("is_small"),              Nullable] public bool?     IsSmall             { get; set; } // bit
			[Column("ideal_memory_kb"),       Nullable] public long?     IdealMemoryKb       { get; set; } // bigint
			[Column("reserved_worker_count"), Nullable] public int?      ReservedWorkerCount { get; set; } // int
			[Column("used_worker_count"),     Nullable] public int?      UsedWorkerCount     { get; set; } // int
			[Column("max_used_worker_count"), Nullable] public int?      MaxUsedWorkerCount  { get; set; } // int
			[Column("reserved_node_bitmap"),  Nullable] public long?     ReservedNodeBitmap  { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_exec_query_optimizer_info", IsView=true)]
		public partial class DmExecQueryOptimizerInfo
		{
			[Column("counter"),    NotNull    ] public string  Counter    { get; set; } = null!; // nvarchar(4000)
			[Column("occurrence"), NotNull    ] public long    Occurrence { get; set; } // bigint
			[Column("value"),         Nullable] public double? Value      { get; set; } // float
		}

		[Table(Schema="sys", Name="dm_exec_query_optimizer_memory_gateways", IsView=true)]
		public partial class DmExecQueryOptimizerMemoryGateways
		{
			[Column("pool_id"),          NotNull] public int    PoolID          { get; set; } // int
			[Column("name"),             NotNull] public string Name            { get; set; } = null!; // nvarchar(128)
			[Column("max_count"),        NotNull] public int    MaxCount        { get; set; } // int
			[Column("active_count"),     NotNull] public int    ActiveCount     { get; set; } // int
			[Column("waiter_count"),     NotNull] public int    WaiterCount     { get; set; } // int
			[Column("threshold_factor"), NotNull] public long   ThresholdFactor { get; set; } // bigint
			[Column("threshold"),        NotNull] public long   Threshold       { get; set; } // bigint
			[Column("is_active"),        NotNull] public bool   IsActive        { get; set; } // bit
		}

		[Table(Schema="sys", Name="dm_exec_query_parallel_workers", IsView=true)]
		public partial class DmExecQueryParallelWorkers
		{
			[Column("node_id"),               NotNull] public int NodeID              { get; set; } // int
			[Column("scheduler_count"),       NotNull] public int SchedulerCount      { get; set; } // int
			[Column("max_worker_count"),      NotNull] public int MaxWorkerCount      { get; set; } // int
			[Column("reserved_worker_count"), NotNull] public int ReservedWorkerCount { get; set; } // int
			[Column("free_worker_count"),     NotNull] public int FreeWorkerCount     { get; set; } // int
			[Column("used_worker_count"),     NotNull] public int UsedWorkerCount     { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_exec_query_profiles", IsView=true)]
		public partial class DmExecQueryProfiles
		{
			[Column("session_id"),                          Nullable] public short?  SessionID                   { get; set; } // smallint
			[Column("request_id"),                          Nullable] public int?    RequestID                   { get; set; } // int
			[Column("sql_handle"),                          Nullable] public byte[]? SqlHandle                   { get; set; } // varbinary(64)
			[Column("plan_handle"),                         Nullable] public byte[]? PlanHandle                  { get; set; } // varbinary(64)
			[Column("physical_operator_name"),              Nullable] public string? PhysicalOperatorName        { get; set; } // nvarchar(256)
			[Column("node_id"),                             Nullable] public int?    NodeID                      { get; set; } // int
			[Column("thread_id"),                           Nullable] public int?    ThreadID                    { get; set; } // int
			[Column("task_address"),                     NotNull    ] public byte[]  TaskAddress                 { get; set; } = null!; // varbinary(8)
			[Column("row_count"),                           Nullable] public long?   RowCount                    { get; set; } // bigint
			[Column("rewind_count"),                        Nullable] public long?   RewindCount                 { get; set; } // bigint
			[Column("rebind_count"),                        Nullable] public long?   RebindCount                 { get; set; } // bigint
			[Column("end_of_scan_count"),                   Nullable] public long?   EndOfScanCount              { get; set; } // bigint
			[Column("estimate_row_count"),                  Nullable] public long?   EstimateRowCount            { get; set; } // bigint
			[Column("first_active_time"),                   Nullable] public long?   FirstActiveTime             { get; set; } // bigint
			[Column("last_active_time"),                    Nullable] public long?   LastActiveTime              { get; set; } // bigint
			[Column("open_time"),                           Nullable] public long?   OpenTime                    { get; set; } // bigint
			[Column("first_row_time"),                      Nullable] public long?   FirstRowTime                { get; set; } // bigint
			[Column("last_row_time"),                       Nullable] public long?   LastRowTime                 { get; set; } // bigint
			[Column("close_time"),                          Nullable] public long?   CloseTime                   { get; set; } // bigint
			[Column("elapsed_time_ms"),                     Nullable] public long?   ElapsedTimeMs               { get; set; } // bigint
			[Column("cpu_time_ms"),                         Nullable] public long?   CpuTimeMs                   { get; set; } // bigint
			[Column("database_id"),                         Nullable] public short?  DatabaseID                  { get; set; } // smallint
			[Column("object_id"),                           Nullable] public int?    ObjectID                    { get; set; } // int
			[Column("index_id"),                            Nullable] public int?    IndexID                     { get; set; } // int
			[Column("scan_count"),                          Nullable] public long?   ScanCount                   { get; set; } // bigint
			[Column("logical_read_count"),                  Nullable] public long?   LogicalReadCount            { get; set; } // bigint
			[Column("physical_read_count"),                 Nullable] public long?   PhysicalReadCount           { get; set; } // bigint
			[Column("read_ahead_count"),                    Nullable] public long?   ReadAheadCount              { get; set; } // bigint
			[Column("write_page_count"),                    Nullable] public long?   WritePageCount              { get; set; } // bigint
			[Column("lob_logical_read_count"),              Nullable] public long?   LobLogicalReadCount         { get; set; } // bigint
			[Column("lob_physical_read_count"),             Nullable] public long?   LobPhysicalReadCount        { get; set; } // bigint
			[Column("lob_read_ahead_count"),                Nullable] public long?   LobReadAheadCount           { get; set; } // bigint
			[Column("segment_read_count"),                  Nullable] public int?    SegmentReadCount            { get; set; } // int
			[Column("segment_skip_count"),                  Nullable] public int?    SegmentSkipCount            { get; set; } // int
			[Column("actual_read_row_count"),               Nullable] public long?   ActualReadRowCount          { get; set; } // bigint
			[Column("estimated_read_row_count"),            Nullable] public long?   EstimatedReadRowCount       { get; set; } // bigint
			[Column("page_server_read_count"),              Nullable] public long?   PageServerReadCount         { get; set; } // bigint
			[Column("page_server_read_ahead_count"),        Nullable] public long?   PageServerReadAheadCount    { get; set; } // bigint
			[Column("lob_page_server_read_count"),          Nullable] public long?   LobPageServerReadCount      { get; set; } // bigint
			[Column("lob_page_server_read_ahead_count"),    Nullable] public long?   LobPageServerReadAheadCount { get; set; } // bigint

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="DmExecQueryProfiles")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="dm_exec_query_resource_semaphores", IsView=true)]
		public partial class DmExecQueryResourceSemaphores
		{
			[Column("resource_semaphore_id"), Nullable] public short? ResourceSemaphoreID { get; set; } // smallint
			[Column("target_memory_kb"),      Nullable] public long?  TargetMemoryKb      { get; set; } // bigint
			[Column("max_target_memory_kb"),  Nullable] public long?  MaxTargetMemoryKb   { get; set; } // bigint
			[Column("total_memory_kb"),       Nullable] public long?  TotalMemoryKb       { get; set; } // bigint
			[Column("available_memory_kb"),   Nullable] public long?  AvailableMemoryKb   { get; set; } // bigint
			[Column("granted_memory_kb"),     Nullable] public long?  GrantedMemoryKb     { get; set; } // bigint
			[Column("used_memory_kb"),        Nullable] public long?  UsedMemoryKb        { get; set; } // bigint
			[Column("grantee_count"),         Nullable] public int?   GranteeCount        { get; set; } // int
			[Column("waiter_count"),          Nullable] public int?   WaiterCount         { get; set; } // int
			[Column("timeout_error_count"),   Nullable] public long?  TimeoutErrorCount   { get; set; } // bigint
			[Column("forced_grant_count"),    Nullable] public long?  ForcedGrantCount    { get; set; } // bigint
			[Column("pool_id"),               Nullable] public int?   PoolID              { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_exec_query_stats", IsView=true)]
		public partial class DmExecQueryStats
		{
			[Column("sql_handle"),                      NotNull    ] public byte[]    SqlHandle                    { get; set; } = null!; // varbinary(64)
			[Column("statement_start_offset"),          NotNull    ] public int       StatementStartOffset         { get; set; } // int
			[Column("statement_end_offset"),            NotNull    ] public int       StatementEndOffset           { get; set; } // int
			[Column("plan_generation_num"),                Nullable] public long?     PlanGenerationNum            { get; set; } // bigint
			[Column("plan_handle"),                     NotNull    ] public byte[]    PlanHandle                   { get; set; } = null!; // varbinary(64)
			[Column("creation_time"),                      Nullable] public DateTime? CreationTime                 { get; set; } // datetime
			[Column("last_execution_time"),                Nullable] public DateTime? LastExecutionTime            { get; set; } // datetime
			[Column("execution_count"),                 NotNull    ] public long      ExecutionCount               { get; set; } // bigint
			[Column("total_worker_time"),               NotNull    ] public long      TotalWorkerTime              { get; set; } // bigint
			[Column("last_worker_time"),                NotNull    ] public long      LastWorkerTime               { get; set; } // bigint
			[Column("min_worker_time"),                 NotNull    ] public long      MinWorkerTime                { get; set; } // bigint
			[Column("max_worker_time"),                 NotNull    ] public long      MaxWorkerTime                { get; set; } // bigint
			[Column("total_physical_reads"),            NotNull    ] public long      TotalPhysicalReads           { get; set; } // bigint
			[Column("last_physical_reads"),             NotNull    ] public long      LastPhysicalReads            { get; set; } // bigint
			[Column("min_physical_reads"),              NotNull    ] public long      MinPhysicalReads             { get; set; } // bigint
			[Column("max_physical_reads"),              NotNull    ] public long      MaxPhysicalReads             { get; set; } // bigint
			[Column("total_logical_writes"),            NotNull    ] public long      TotalLogicalWrites           { get; set; } // bigint
			[Column("last_logical_writes"),             NotNull    ] public long      LastLogicalWrites            { get; set; } // bigint
			[Column("min_logical_writes"),              NotNull    ] public long      MinLogicalWrites             { get; set; } // bigint
			[Column("max_logical_writes"),              NotNull    ] public long      MaxLogicalWrites             { get; set; } // bigint
			[Column("total_logical_reads"),             NotNull    ] public long      TotalLogicalReads            { get; set; } // bigint
			[Column("last_logical_reads"),              NotNull    ] public long      LastLogicalReads             { get; set; } // bigint
			[Column("min_logical_reads"),               NotNull    ] public long      MinLogicalReads              { get; set; } // bigint
			[Column("max_logical_reads"),               NotNull    ] public long      MaxLogicalReads              { get; set; } // bigint
			[Column("total_clr_time"),                  NotNull    ] public long      TotalClrTime                 { get; set; } // bigint
			[Column("last_clr_time"),                   NotNull    ] public long      LastClrTime                  { get; set; } // bigint
			[Column("min_clr_time"),                    NotNull    ] public long      MinClrTime                   { get; set; } // bigint
			[Column("max_clr_time"),                    NotNull    ] public long      MaxClrTime                   { get; set; } // bigint
			[Column("total_elapsed_time"),              NotNull    ] public long      TotalElapsedTime             { get; set; } // bigint
			[Column("last_elapsed_time"),               NotNull    ] public long      LastElapsedTime              { get; set; } // bigint
			[Column("min_elapsed_time"),                NotNull    ] public long      MinElapsedTime               { get; set; } // bigint
			[Column("max_elapsed_time"),                NotNull    ] public long      MaxElapsedTime               { get; set; } // bigint
			[Column("query_hash"),                         Nullable] public byte[]?   QueryHash                    { get; set; } // binary(8)
			[Column("query_plan_hash"),                    Nullable] public byte[]?   QueryPlanHash                { get; set; } // binary(8)
			[Column("total_rows"),                         Nullable] public long?     TotalRows                    { get; set; } // bigint
			[Column("last_rows"),                          Nullable] public long?     LastRows                     { get; set; } // bigint
			[Column("min_rows"),                           Nullable] public long?     MinRows                      { get; set; } // bigint
			[Column("max_rows"),                           Nullable] public long?     MaxRows                      { get; set; } // bigint
			[Column("statement_sql_handle"),               Nullable] public byte[]?   StatementSqlHandle           { get; set; } // varbinary(64)
			[Column("statement_context_id"),               Nullable] public long?     StatementContextID           { get; set; } // bigint
			[Column("total_dop"),                          Nullable] public long?     TotalDop                     { get; set; } // bigint
			[Column("last_dop"),                           Nullable] public long?     LastDop                      { get; set; } // bigint
			[Column("min_dop"),                            Nullable] public long?     MinDop                       { get; set; } // bigint
			[Column("max_dop"),                            Nullable] public long?     MaxDop                       { get; set; } // bigint
			[Column("total_grant_kb"),                     Nullable] public long?     TotalGrantKb                 { get; set; } // bigint
			[Column("last_grant_kb"),                      Nullable] public long?     LastGrantKb                  { get; set; } // bigint
			[Column("min_grant_kb"),                       Nullable] public long?     MinGrantKb                   { get; set; } // bigint
			[Column("max_grant_kb"),                       Nullable] public long?     MaxGrantKb                   { get; set; } // bigint
			[Column("total_used_grant_kb"),                Nullable] public long?     TotalUsedGrantKb             { get; set; } // bigint
			[Column("last_used_grant_kb"),                 Nullable] public long?     LastUsedGrantKb              { get; set; } // bigint
			[Column("min_used_grant_kb"),                  Nullable] public long?     MinUsedGrantKb               { get; set; } // bigint
			[Column("max_used_grant_kb"),                  Nullable] public long?     MaxUsedGrantKb               { get; set; } // bigint
			[Column("total_ideal_grant_kb"),               Nullable] public long?     TotalIdealGrantKb            { get; set; } // bigint
			[Column("last_ideal_grant_kb"),                Nullable] public long?     LastIdealGrantKb             { get; set; } // bigint
			[Column("min_ideal_grant_kb"),                 Nullable] public long?     MinIdealGrantKb              { get; set; } // bigint
			[Column("max_ideal_grant_kb"),                 Nullable] public long?     MaxIdealGrantKb              { get; set; } // bigint
			[Column("total_reserved_threads"),             Nullable] public long?     TotalReservedThreads         { get; set; } // bigint
			[Column("last_reserved_threads"),              Nullable] public long?     LastReservedThreads          { get; set; } // bigint
			[Column("min_reserved_threads"),               Nullable] public long?     MinReservedThreads           { get; set; } // bigint
			[Column("max_reserved_threads"),               Nullable] public long?     MaxReservedThreads           { get; set; } // bigint
			[Column("total_used_threads"),                 Nullable] public long?     TotalUsedThreads             { get; set; } // bigint
			[Column("last_used_threads"),                  Nullable] public long?     LastUsedThreads              { get; set; } // bigint
			[Column("min_used_threads"),                   Nullable] public long?     MinUsedThreads               { get; set; } // bigint
			[Column("max_used_threads"),                   Nullable] public long?     MaxUsedThreads               { get; set; } // bigint
			[Column("total_columnstore_segment_reads"),    Nullable] public long?     TotalColumnstoreSegmentReads { get; set; } // bigint
			[Column("last_columnstore_segment_reads"),     Nullable] public long?     LastColumnstoreSegmentReads  { get; set; } // bigint
			[Column("min_columnstore_segment_reads"),      Nullable] public long?     MinColumnstoreSegmentReads   { get; set; } // bigint
			[Column("max_columnstore_segment_reads"),      Nullable] public long?     MaxColumnstoreSegmentReads   { get; set; } // bigint
			[Column("total_columnstore_segment_skips"),    Nullable] public long?     TotalColumnstoreSegmentSkips { get; set; } // bigint
			[Column("last_columnstore_segment_skips"),     Nullable] public long?     LastColumnstoreSegmentSkips  { get; set; } // bigint
			[Column("min_columnstore_segment_skips"),      Nullable] public long?     MinColumnstoreSegmentSkips   { get; set; } // bigint
			[Column("max_columnstore_segment_skips"),      Nullable] public long?     MaxColumnstoreSegmentSkips   { get; set; } // bigint
			[Column("total_spills"),                       Nullable] public long?     TotalSpills                  { get; set; } // bigint
			[Column("last_spills"),                        Nullable] public long?     LastSpills                   { get; set; } // bigint
			[Column("min_spills"),                         Nullable] public long?     MinSpills                    { get; set; } // bigint
			[Column("max_spills"),                         Nullable] public long?     MaxSpills                    { get; set; } // bigint
			[Column("total_num_physical_reads"),        NotNull    ] public long      TotalNumPhysicalReads        { get; set; } // bigint
			[Column("last_num_physical_reads"),         NotNull    ] public long      LastNumPhysicalReads         { get; set; } // bigint
			[Column("min_num_physical_reads"),          NotNull    ] public long      MinNumPhysicalReads          { get; set; } // bigint
			[Column("max_num_physical_reads"),          NotNull    ] public long      MaxNumPhysicalReads          { get; set; } // bigint
			[Column("total_page_server_reads"),         NotNull    ] public long      TotalPageServerReads         { get; set; } // bigint
			[Column("last_page_server_reads"),          NotNull    ] public long      LastPageServerReads          { get; set; } // bigint
			[Column("min_page_server_reads"),           NotNull    ] public long      MinPageServerReads           { get; set; } // bigint
			[Column("max_page_server_reads"),           NotNull    ] public long      MaxPageServerReads           { get; set; } // bigint
			[Column("total_num_page_server_reads"),     NotNull    ] public long      TotalNumPageServerReads      { get; set; } // bigint
			[Column("last_num_page_server_reads"),      NotNull    ] public long      LastNumPageServerReads       { get; set; } // bigint
			[Column("min_num_page_server_reads"),       NotNull    ] public long      MinNumPageServerReads        { get; set; } // bigint
			[Column("max_num_page_server_reads"),       NotNull    ] public long      MaxNumPageServerReads        { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_exec_query_transformation_stats", IsView=true)]
		public partial class DmExecQueryTransformationStats
		{
			[Column("name"),             NotNull] public string Name            { get; set; } = null!; // varchar(8000)
			[Column("promise_total"),    NotNull] public long   PromiseTotal    { get; set; } // bigint
			[Column("promise_avg"),      NotNull] public double PromiseAvg      { get; set; } // float
			[Column("promised"),         NotNull] public long   Promised        { get; set; } // bigint
			[Column("built_substitute"), NotNull] public long   BuiltSubstitute { get; set; } // bigint
			[Column("succeeded"),        NotNull] public long   Succeeded       { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_exec_requests", IsView=true)]
		public partial class DmExecRequests
		{
			[Column("session_id"),                  NotNull    ] public short    SessionID                 { get; set; } // smallint
			[Column("request_id"),                  NotNull    ] public int      RequestID                 { get; set; } // int
			[Column("start_time"),                  NotNull    ] public DateTime StartTime                 { get; set; } // datetime
			[Column("status"),                      NotNull    ] public string   Status                    { get; set; } = null!; // nvarchar(30)
			[Column("command"),                     NotNull    ] public string   Command                   { get; set; } = null!; // nvarchar(32)
			[Column("sql_handle"),                     Nullable] public byte[]?  SqlHandle                 { get; set; } // varbinary(64)
			[Column("statement_start_offset"),         Nullable] public int?     StatementStartOffset      { get; set; } // int
			[Column("statement_end_offset"),           Nullable] public int?     StatementEndOffset        { get; set; } // int
			[Column("plan_handle"),                    Nullable] public byte[]?  PlanHandle                { get; set; } // varbinary(64)
			[Column("database_id"),                 NotNull    ] public short    DatabaseID                { get; set; } // smallint
			[Column("user_id"),                     NotNull    ] public int      UserID                    { get; set; } // int
			[Column("connection_id"),                  Nullable] public Guid?    ConnectionID              { get; set; } // uniqueidentifier
			[Column("blocking_session_id"),            Nullable] public short?   BlockingSessionID         { get; set; } // smallint
			[Column("wait_type"),                      Nullable] public string?  WaitType                  { get; set; } // nvarchar(60)
			[Column("wait_time"),                   NotNull    ] public int      WaitTime                  { get; set; } // int
			[Column("last_wait_type"),              NotNull    ] public string   LastWaitType              { get; set; } = null!; // nvarchar(60)
			[Column("wait_resource"),               NotNull    ] public string   WaitResource              { get; set; } = null!; // nvarchar(256)
			[Column("open_transaction_count"),      NotNull    ] public int      OpenTransactionCount      { get; set; } // int
			[Column("open_resultset_count"),        NotNull    ] public int      OpenResultsetCount        { get; set; } // int
			[Column("transaction_id"),              NotNull    ] public long     TransactionID             { get; set; } // bigint
			[Column("context_info"),                   Nullable] public byte[]?  ContextInfo               { get; set; } // varbinary(128)
			[Column("percent_complete"),            NotNull    ] public float    PercentComplete           { get; set; } // real
			[Column("estimated_completion_time"),   NotNull    ] public long     EstimatedCompletionTime   { get; set; } // bigint
			[Column("cpu_time"),                    NotNull    ] public int      CpuTime                   { get; set; } // int
			[Column("total_elapsed_time"),          NotNull    ] public int      TotalElapsedTime          { get; set; } // int
			[Column("scheduler_id"),                   Nullable] public int?     SchedulerID               { get; set; } // int
			[Column("task_address"),                   Nullable] public byte[]?  TaskAddress               { get; set; } // varbinary(8)
			[Column("reads"),                       NotNull    ] public long     Reads                     { get; set; } // bigint
			[Column("writes"),                      NotNull    ] public long     Writes                    { get; set; } // bigint
			[Column("logical_reads"),               NotNull    ] public long     LogicalReads              { get; set; } // bigint
			[Column("text_size"),                   NotNull    ] public int      TextSize                  { get; set; } // int
			[Column("language"),                       Nullable] public string?  Language                  { get; set; } // nvarchar(128)
			[Column("date_format"),                    Nullable] public string?  DateFormat                { get; set; } // nvarchar(3)
			[Column("date_first"),                  NotNull    ] public short    DateFirst                 { get; set; } // smallint
			[Column("quoted_identifier"),           NotNull    ] public bool     QuotedIdentifier          { get; set; } // bit
			[Column("arithabort"),                  NotNull    ] public bool     Arithabort                { get; set; } // bit
			[Column("ansi_null_dflt_on"),           NotNull    ] public bool     AnsiNullDfltOn            { get; set; } // bit
			[Column("ansi_defaults"),               NotNull    ] public bool     AnsiDefaults              { get; set; } // bit
			[Column("ansi_warnings"),               NotNull    ] public bool     AnsiWarnings              { get; set; } // bit
			[Column("ansi_padding"),                NotNull    ] public bool     AnsiPadding               { get; set; } // bit
			[Column("ansi_nulls"),                  NotNull    ] public bool     AnsiNulls                 { get; set; } // bit
			[Column("concat_null_yields_null"),     NotNull    ] public bool     ConcatNullYieldsNull      { get; set; } // bit
			[Column("transaction_isolation_level"), NotNull    ] public short    TransactionIsolationLevel { get; set; } // smallint
			[Column("lock_timeout"),                NotNull    ] public int      LockTimeout               { get; set; } // int
			[Column("deadlock_priority"),           NotNull    ] public int      DeadlockPriority          { get; set; } // int
			[Column("row_count"),                   NotNull    ] public long     RowCount                  { get; set; } // bigint
			[Column("prev_error"),                  NotNull    ] public int      PrevError                 { get; set; } // int
			[Column("nest_level"),                  NotNull    ] public int      NestLevel                 { get; set; } // int
			[Column("granted_query_memory"),        NotNull    ] public int      GrantedQueryMemory        { get; set; } // int
			[Column("executing_managed_code"),      NotNull    ] public bool     ExecutingManagedCode      { get; set; } // bit
			[Column("group_id"),                    NotNull    ] public int      GroupID                   { get; set; } // int
			[Column("query_hash"),                     Nullable] public byte[]?  QueryHash                 { get; set; } // binary(8)
			[Column("query_plan_hash"),                Nullable] public byte[]?  QueryPlanHash             { get; set; } // binary(8)
			[Column("statement_sql_handle"),           Nullable] public byte[]?  StatementSqlHandle        { get; set; } // varbinary(64)
			[Column("statement_context_id"),           Nullable] public long?    StatementContextID        { get; set; } // bigint
			[Column("dop"),                         NotNull    ] public int      Dop                       { get; set; } // int
			[Column("parallel_worker_count"),          Nullable] public int?     ParallelWorkerCount       { get; set; } // int
			[Column("external_script_request_id"),     Nullable] public Guid?    ExternalScriptRequestID   { get; set; } // uniqueidentifier
			[Column("is_resumable"),                NotNull    ] public bool     IsResumable               { get; set; } // bit
			[Column("page_resource"),                  Nullable] public byte[]?  PageResource              { get; set; } // varbinary(8)
			[Column("page_server_reads"),           NotNull    ] public long     PageServerReads           { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_exec_sessions", IsView=true)]
		public partial class DmExecSessions
		{
			[Column("session_id"),                  NotNull    ] public short     SessionID                 { get; set; } // smallint
			[Column("login_time"),                  NotNull    ] public DateTime  LoginTime                 { get; set; } // datetime
			[Column("host_name"),                      Nullable] public string?   HostName                  { get; set; } // nvarchar(128)
			[Column("program_name"),                   Nullable] public string?   ProgramName               { get; set; } // nvarchar(128)
			[Column("host_process_id"),                Nullable] public int?      HostProcessID             { get; set; } // int
			[Column("client_version"),                 Nullable] public int?      ClientVersion             { get; set; } // int
			[Column("client_interface_name"),          Nullable] public string?   ClientInterfaceName       { get; set; } // nvarchar(32)
			[Column("security_id"),                 NotNull    ] public byte[]    SecurityID                { get; set; } = null!; // varbinary(85)
			[Column("login_name"),                  NotNull    ] public string    LoginName                 { get; set; } = null!; // nvarchar(128)
			[Column("nt_domain"),                      Nullable] public string?   NtDomain                  { get; set; } // nvarchar(128)
			[Column("nt_user_name"),                   Nullable] public string?   NtUserName                { get; set; } // nvarchar(128)
			[Column("status"),                      NotNull    ] public string    Status                    { get; set; } = null!; // nvarchar(30)
			[Column("context_info"),                   Nullable] public byte[]?   ContextInfo               { get; set; } // varbinary(128)
			[Column("cpu_time"),                    NotNull    ] public int       CpuTime                   { get; set; } // int
			[Column("memory_usage"),                NotNull    ] public int       MemoryUsage               { get; set; } // int
			[Column("total_scheduled_time"),        NotNull    ] public int       TotalScheduledTime        { get; set; } // int
			[Column("total_elapsed_time"),          NotNull    ] public int       TotalElapsedTime          { get; set; } // int
			[Column("endpoint_id"),                 NotNull    ] public int       EndpointID                { get; set; } // int
			[Column("last_request_start_time"),     NotNull    ] public DateTime  LastRequestStartTime      { get; set; } // datetime
			[Column("last_request_end_time"),          Nullable] public DateTime? LastRequestEndTime        { get; set; } // datetime
			[Column("reads"),                       NotNull    ] public long      Reads                     { get; set; } // bigint
			[Column("writes"),                      NotNull    ] public long      Writes                    { get; set; } // bigint
			[Column("logical_reads"),               NotNull    ] public long      LogicalReads              { get; set; } // bigint
			[Column("is_user_process"),             NotNull    ] public bool      IsUserProcess             { get; set; } // bit
			[Column("text_size"),                   NotNull    ] public int       TextSize                  { get; set; } // int
			[Column("language"),                       Nullable] public string?   Language                  { get; set; } // nvarchar(128)
			[Column("date_format"),                    Nullable] public string?   DateFormat                { get; set; } // nvarchar(3)
			[Column("date_first"),                  NotNull    ] public short     DateFirst                 { get; set; } // smallint
			[Column("quoted_identifier"),           NotNull    ] public bool      QuotedIdentifier          { get; set; } // bit
			[Column("arithabort"),                  NotNull    ] public bool      Arithabort                { get; set; } // bit
			[Column("ansi_null_dflt_on"),           NotNull    ] public bool      AnsiNullDfltOn            { get; set; } // bit
			[Column("ansi_defaults"),               NotNull    ] public bool      AnsiDefaults              { get; set; } // bit
			[Column("ansi_warnings"),               NotNull    ] public bool      AnsiWarnings              { get; set; } // bit
			[Column("ansi_padding"),                NotNull    ] public bool      AnsiPadding               { get; set; } // bit
			[Column("ansi_nulls"),                  NotNull    ] public bool      AnsiNulls                 { get; set; } // bit
			[Column("concat_null_yields_null"),     NotNull    ] public bool      ConcatNullYieldsNull      { get; set; } // bit
			[Column("transaction_isolation_level"), NotNull    ] public short     TransactionIsolationLevel { get; set; } // smallint
			[Column("lock_timeout"),                NotNull    ] public int       LockTimeout               { get; set; } // int
			[Column("deadlock_priority"),           NotNull    ] public int       DeadlockPriority          { get; set; } // int
			[Column("row_count"),                   NotNull    ] public long      RowCount                  { get; set; } // bigint
			[Column("prev_error"),                  NotNull    ] public int       PrevError                 { get; set; } // int
			[Column("original_security_id"),        NotNull    ] public byte[]    OriginalSecurityID        { get; set; } = null!; // varbinary(85)
			[Column("original_login_name"),         NotNull    ] public string    OriginalLoginName         { get; set; } = null!; // nvarchar(128)
			[Column("last_successful_logon"),          Nullable] public DateTime? LastSuccessfulLogon       { get; set; } // datetime
			[Column("last_unsuccessful_logon"),        Nullable] public DateTime? LastUnsuccessfulLogon     { get; set; } // datetime
			[Column("unsuccessful_logons"),            Nullable] public long?     UnsuccessfulLogons        { get; set; } // bigint
			[Column("group_id"),                    NotNull    ] public int       GroupID                   { get; set; } // int
			[Column("database_id"),                 NotNull    ] public short     DatabaseID                { get; set; } // smallint
			[Column("authenticating_database_id"),     Nullable] public int?      AuthenticatingDatabaseID  { get; set; } // int
			[Column("open_transaction_count"),      NotNull    ] public int       OpenTransactionCount      { get; set; } // int
			[Column("page_server_reads"),           NotNull    ] public long      PageServerReads           { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_exec_session_wait_stats", IsView=true)]
		public partial class DmExecSessionWaitStats
		{
			[Column("session_id"),          NotNull] public short  SessionID         { get; set; } // smallint
			[Column("wait_type"),           NotNull] public string WaitType          { get; set; } = null!; // nvarchar(60)
			[Column("waiting_tasks_count"), NotNull] public long   WaitingTasksCount { get; set; } // bigint
			[Column("wait_time_ms"),        NotNull] public long   WaitTimeMs        { get; set; } // bigint
			[Column("max_wait_time_ms"),    NotNull] public long   MaxWaitTimeMs     { get; set; } // bigint
			[Column("signal_wait_time_ms"), NotNull] public long   SignalWaitTimeMs  { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_exec_trigger_stats", IsView=true)]
		public partial class DmExecTriggerStats
		{
			[Column("database_id"),                 NotNull    ] public int       DatabaseID              { get; set; } // int
			[Column("object_id"),                   NotNull    ] public int       ObjectID                { get; set; } // int
			[Column("type"),                           Nullable] public string?   Type                    { get; set; } // char(2)
			[Column("type_desc"),                      Nullable] public string?   TypeDesc                { get; set; } // nvarchar(60)
			[Column("sql_handle"),                  NotNull    ] public byte[]    SqlHandle               { get; set; } = null!; // varbinary(64)
			[Column("plan_handle"),                 NotNull    ] public byte[]    PlanHandle              { get; set; } = null!; // varbinary(64)
			[Column("cached_time"),                    Nullable] public DateTime? CachedTime              { get; set; } // datetime
			[Column("last_execution_time"),            Nullable] public DateTime? LastExecutionTime       { get; set; } // datetime
			[Column("execution_count"),             NotNull    ] public long      ExecutionCount          { get; set; } // bigint
			[Column("total_worker_time"),           NotNull    ] public long      TotalWorkerTime         { get; set; } // bigint
			[Column("last_worker_time"),            NotNull    ] public long      LastWorkerTime          { get; set; } // bigint
			[Column("min_worker_time"),             NotNull    ] public long      MinWorkerTime           { get; set; } // bigint
			[Column("max_worker_time"),             NotNull    ] public long      MaxWorkerTime           { get; set; } // bigint
			[Column("total_physical_reads"),        NotNull    ] public long      TotalPhysicalReads      { get; set; } // bigint
			[Column("last_physical_reads"),         NotNull    ] public long      LastPhysicalReads       { get; set; } // bigint
			[Column("min_physical_reads"),          NotNull    ] public long      MinPhysicalReads        { get; set; } // bigint
			[Column("max_physical_reads"),          NotNull    ] public long      MaxPhysicalReads        { get; set; } // bigint
			[Column("total_logical_writes"),        NotNull    ] public long      TotalLogicalWrites      { get; set; } // bigint
			[Column("last_logical_writes"),         NotNull    ] public long      LastLogicalWrites       { get; set; } // bigint
			[Column("min_logical_writes"),          NotNull    ] public long      MinLogicalWrites        { get; set; } // bigint
			[Column("max_logical_writes"),          NotNull    ] public long      MaxLogicalWrites        { get; set; } // bigint
			[Column("total_logical_reads"),         NotNull    ] public long      TotalLogicalReads       { get; set; } // bigint
			[Column("last_logical_reads"),          NotNull    ] public long      LastLogicalReads        { get; set; } // bigint
			[Column("min_logical_reads"),           NotNull    ] public long      MinLogicalReads         { get; set; } // bigint
			[Column("max_logical_reads"),           NotNull    ] public long      MaxLogicalReads         { get; set; } // bigint
			[Column("total_elapsed_time"),          NotNull    ] public long      TotalElapsedTime        { get; set; } // bigint
			[Column("last_elapsed_time"),           NotNull    ] public long      LastElapsedTime         { get; set; } // bigint
			[Column("min_elapsed_time"),            NotNull    ] public long      MinElapsedTime          { get; set; } // bigint
			[Column("max_elapsed_time"),            NotNull    ] public long      MaxElapsedTime          { get; set; } // bigint
			[Column("total_spills"),                   Nullable] public long?     TotalSpills             { get; set; } // bigint
			[Column("last_spills"),                    Nullable] public long?     LastSpills              { get; set; } // bigint
			[Column("min_spills"),                     Nullable] public long?     MinSpills               { get; set; } // bigint
			[Column("max_spills"),                     Nullable] public long?     MaxSpills               { get; set; } // bigint
			[Column("total_num_physical_reads"),    NotNull    ] public long      TotalNumPhysicalReads   { get; set; } // bigint
			[Column("last_num_physical_reads"),     NotNull    ] public long      LastNumPhysicalReads    { get; set; } // bigint
			[Column("min_num_physical_reads"),      NotNull    ] public long      MinNumPhysicalReads     { get; set; } // bigint
			[Column("max_num_physical_reads"),      NotNull    ] public long      MaxNumPhysicalReads     { get; set; } // bigint
			[Column("total_page_server_reads"),     NotNull    ] public long      TotalPageServerReads    { get; set; } // bigint
			[Column("last_page_server_reads"),      NotNull    ] public long      LastPageServerReads     { get; set; } // bigint
			[Column("min_page_server_reads"),       NotNull    ] public long      MinPageServerReads      { get; set; } // bigint
			[Column("max_page_server_reads"),       NotNull    ] public long      MaxPageServerReads      { get; set; } // bigint
			[Column("total_num_page_server_reads"), NotNull    ] public long      TotalNumPageServerReads { get; set; } // bigint
			[Column("last_num_page_server_reads"),  NotNull    ] public long      LastNumPageServerReads  { get; set; } // bigint
			[Column("min_num_page_server_reads"),   NotNull    ] public long      MinNumPageServerReads   { get; set; } // bigint
			[Column("max_num_page_server_reads"),   NotNull    ] public long      MaxNumPageServerReads   { get; set; } // bigint

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="DmExecTriggerStats")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="dm_exec_valid_use_hints", IsView=true)]
		public partial class DmExecValidUseHints
		{
			[Column("name"), NotNull] public string Name { get; set; } = null!; // nvarchar(128)
		}

		[Table(Schema="sys", Name="dm_external_script_execution_stats", IsView=true)]
		public partial class DmExternalScriptExecutionStats
		{
			[Column("language"),         Nullable] public string? Language     { get; set; } // nvarchar(128)
			[Column("counter_name"),  NotNull    ] public string  CounterName  { get; set; } = null!; // nvarchar(256)
			[Column("counter_value"), NotNull    ] public long    CounterValue { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_external_script_requests", IsView=true)]
		public partial class DmExternalScriptRequests
		{
			[Column("external_script_request_id"), NotNull    ] public Guid    ExternalScriptRequestID { get; set; } // uniqueidentifier
			[Column("language"),                      Nullable] public string? Language                { get; set; } // nvarchar(128)
			[Column("degree_of_parallelism"),      NotNull    ] public int     DegreeOfParallelism     { get; set; } // int
			[Column("external_user_name"),         NotNull    ] public string  ExternalUserName        { get; set; } = null!; // nvarchar(256)
		}

		[Table(Schema="sys", Name="dm_external_script_resource_usage_stats", IsView=true)]
		public partial class DmExternalScriptResourceUsageStats
		{
			[Column("package_name"), NotNull] public string PackageName { get; set; } = null!; // nvarchar(256)
			[Column("memory_usage"), NotNull] public long   MemoryUsage { get; set; } // bigint
			[Column("cpu_usage"),    NotNull] public long   CpuUsage    { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_filestream_file_io_handles", IsView=true)]
		public partial class DmFilestreamFileIoHandles
		{
			[Column("handle_context_address"),        Nullable] public byte[]? HandleContextAddress    { get; set; } // varbinary(8)
			[Column("creation_request_id"),        NotNull    ] public int     CreationRequestID       { get; set; } // int
			[Column("creation_irp_id"),            NotNull    ] public int     CreationIrpID           { get; set; } // int
			[Column("handle_id"),                  NotNull    ] public int     HandleID                { get; set; } // int
			[Column("creation_client_thread_id"),     Nullable] public byte[]? CreationClientThreadID  { get; set; } // varbinary(8)
			[Column("creation_client_process_id"),    Nullable] public byte[]? CreationClientProcessID { get; set; } // varbinary(8)
			[Column("filestream_transaction_id"),     Nullable] public byte[]? FilestreamTransactionID { get; set; } // varbinary(128)
			[Column("access_type"),                NotNull    ] public string  AccessType              { get; set; } = null!; // nvarchar(60)
			[Column("logical_path"),                  Nullable] public string? LogicalPath             { get; set; } // nvarchar(256)
			[Column("physical_path"),                 Nullable] public string? PhysicalPath            { get; set; } // nvarchar(256)
		}

		[Table(Schema="sys", Name="dm_filestream_file_io_requests", IsView=true)]
		public partial class DmFilestreamFileIoRequests
		{
			[Column("request_context_address"),   NotNull    ] public byte[]  RequestContextAddress   { get; set; } = null!; // varbinary(8)
			[Column("current_spid"),              NotNull    ] public short   CurrentSpid             { get; set; } // smallint
			[Column("request_type"),              NotNull    ] public string  RequestType             { get; set; } = null!; // nvarchar(60)
			[Column("request_state"),             NotNull    ] public string  RequestState            { get; set; } = null!; // nvarchar(60)
			[Column("request_id"),                NotNull    ] public int     RequestID               { get; set; } // int
			[Column("irp_id"),                    NotNull    ] public int     IrpID                   { get; set; } // int
			[Column("handle_id"),                 NotNull    ] public int     HandleID                { get; set; } // int
			[Column("client_thread_id"),             Nullable] public byte[]? ClientThreadID          { get; set; } // varbinary(8)
			[Column("client_process_id"),            Nullable] public byte[]? ClientProcessID         { get; set; } // varbinary(8)
			[Column("handle_context_address"),       Nullable] public byte[]? HandleContextAddress    { get; set; } // varbinary(8)
			[Column("filestream_transaction_id"),    Nullable] public byte[]? FilestreamTransactionID { get; set; } // varbinary(128)
		}

		[Table(Schema="sys", Name="dm_filestream_non_transacted_handles", IsView=true)]
		public partial class DmFilestreamNonTransactedHandles
		{
			[Column("database_id"),                   Nullable] public int?     DatabaseID              { get; set; } // int
			[Column("object_id"),                     Nullable] public int?     ObjectID                { get; set; } // int
			[Column("handle_id"),                     Nullable] public int?     HandleID                { get; set; } // int
			[Column("file_object_type"),              Nullable] public int?     FileObjectType          { get; set; } // int
			[Column("file_object_type_desc"),         Nullable] public string?  FileObjectTypeDesc      { get; set; } // nvarchar(60)
			[Column("correlation_process_id"),        Nullable] public byte[]?  CorrelationProcessID    { get; set; } // varbinary(8)
			[Column("correlation_thread_id"),         Nullable] public byte[]?  CorrelationThreadID     { get; set; } // varbinary(8)
			[Column("file_context"),                  Nullable] public byte[]?  FileContext             { get; set; } // varbinary(8)
			[Column("state"),                         Nullable] public int?     State                   { get; set; } // int
			[Column("state_desc"),                    Nullable] public string?  StateDesc               { get; set; } // nvarchar(60)
			[Column("current_workitem_type"),         Nullable] public int?     CurrentWorkitemType     { get; set; } // int
			[Column("current_workitem_type_desc"),    Nullable] public string?  CurrentWorkitemTypeDesc { get; set; } // nvarchar(60)
			[Column("fcb_id"),                        Nullable] public long?    FcbID                   { get; set; } // bigint
			[Column("item_id"),                       Nullable] public byte[]?  ItemID                  { get; set; } // varbinary(892)
			[Column("is_directory"),                  Nullable] public bool?    IsDirectory             { get; set; } // bit
			[Column("item_name"),                     Nullable] public string?  ItemName                { get; set; } // nvarchar(256)
			[Column("opened_file_name"),              Nullable] public string?  OpenedFileName          { get; set; } // nvarchar(256)
			[Column("database_directory_name"),       Nullable] public string?  DatabaseDirectoryName   { get; set; } // nvarchar(256)
			[Column("table_directory_name"),          Nullable] public string?  TableDirectoryName      { get; set; } // nvarchar(256)
			[Column("remaining_file_name"),           Nullable] public string?  RemainingFileName       { get; set; } // nvarchar(256)
			[Column("open_time"),                  NotNull    ] public DateTime OpenTime                { get; set; } // datetime
			[Column("flags"),                         Nullable] public int?     Flags                   { get; set; } // int
			[Column("login_id"),                      Nullable] public int?     LoginID                 { get; set; } // int
			[Column("login_name"),                    Nullable] public string?  LoginName               { get; set; } // nvarchar(256)
			[Column("login_sid"),                     Nullable] public byte[]?  LoginSid                { get; set; } // varbinary(85)
			[Column("read_access"),                   Nullable] public bool?    ReadAccess              { get; set; } // bit
			[Column("write_access"),                  Nullable] public bool?    WriteAccess             { get; set; } // bit
			[Column("delete_access"),                 Nullable] public bool?    DeleteAccess            { get; set; } // bit
			[Column("share_read"),                    Nullable] public bool?    ShareRead               { get; set; } // bit
			[Column("share_write"),                   Nullable] public bool?    ShareWrite              { get; set; } // bit
			[Column("share_delete"),                  Nullable] public bool?    ShareDelete             { get; set; } // bit
			[Column("create_disposition"),            Nullable] public int?     CreateDisposition       { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="DmFilestreamNonTransactedHandles")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="dm_fts_active_catalogs", IsView=true)]
		public partial class DmFtsActiveCatalogs
		{
			[Column("database_id"),                       NotNull    ] public int     DatabaseID                     { get; set; } // int
			[Column("catalog_id"),                        NotNull    ] public int     CatalogID                      { get; set; } // int
			[Column("memory_address"),                    NotNull    ] public byte[]  MemoryAddress                  { get; set; } = null!; // varbinary(8)
			[Column("name"),                              NotNull    ] public string  Name                           { get; set; } = null!; // nvarchar(4000)
			[Column("is_paused"),                         NotNull    ] public bool    IsPaused                       { get; set; } // bit
			[Column("status"),                            NotNull    ] public int     Status                         { get; set; } // int
			[Column("status_description"),                   Nullable] public string? StatusDescription              { get; set; } // nvarchar(64)
			[Column("previous_status"),                   NotNull    ] public int     PreviousStatus                 { get; set; } // int
			[Column("previous_status_description"),          Nullable] public string? PreviousStatusDescription      { get; set; } // nvarchar(64)
			[Column("worker_count"),                      NotNull    ] public int     WorkerCount                    { get; set; } // int
			[Column("active_fts_index_count"),            NotNull    ] public int     ActiveFtsIndexCount            { get; set; } // int
			[Column("auto_population_count"),             NotNull    ] public int     AutoPopulationCount            { get; set; } // int
			[Column("manual_population_count"),           NotNull    ] public int     ManualPopulationCount          { get; set; } // int
			[Column("full_incremental_population_count"), NotNull    ] public int     FullIncrementalPopulationCount { get; set; } // int
			[Column("row_count_in_thousands"),            NotNull    ] public int     RowCountInThousands            { get; set; } // int
			[Column("is_importing"),                      NotNull    ] public bool    IsImporting                    { get; set; } // bit
		}

		[Table(Schema="sys", Name="dm_fts_fdhosts", IsView=true)]
		public partial class DmFtsFdhosts
		{
			[Column("fdhost_id"),         NotNull    ] public int     FdhostID        { get; set; } // int
			[Column("fdhost_name"),          Nullable] public string? FdhostName      { get; set; } // nvarchar(128)
			[Column("fdhost_process_id"), NotNull    ] public int     FdhostProcessID { get; set; } // int
			[Column("fdhost_type"),          Nullable] public string? FdhostType      { get; set; } // nvarchar(64)
			[Column("max_thread"),        NotNull    ] public int     MaxThread       { get; set; } // int
			[Column("batch_count"),       NotNull    ] public int     BatchCount      { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_fts_index_population", IsView=true)]
		public partial class DmFtsIndexPopulation
		{
			[Column("database_id"),                        NotNull    ] public int      DatabaseID                      { get; set; } // int
			[Column("catalog_id"),                         NotNull    ] public int      CatalogID                       { get; set; } // int
			[Column("table_id"),                           NotNull    ] public int      TableID                         { get; set; } // int
			[Column("memory_address"),                     NotNull    ] public byte[]   MemoryAddress                   { get; set; } = null!; // varbinary(8)
			[Column("population_type"),                    NotNull    ] public int      PopulationType                  { get; set; } // int
			[Column("population_type_description"),           Nullable] public string?  PopulationTypeDescription       { get; set; } // nvarchar(64)
			[Column("is_clustered_index_scan"),            NotNull    ] public bool     IsClusteredIndexScan            { get; set; } // bit
			[Column("range_count"),                        NotNull    ] public int      RangeCount                      { get; set; } // int
			[Column("completed_range_count"),              NotNull    ] public int      CompletedRangeCount             { get; set; } // int
			[Column("outstanding_batch_count"),            NotNull    ] public int      OutstandingBatchCount           { get; set; } // int
			[Column("status"),                             NotNull    ] public int      Status                          { get; set; } // int
			[Column("status_description"),                    Nullable] public string?  StatusDescription               { get; set; } // nvarchar(64)
			[Column("completion_type"),                    NotNull    ] public int      CompletionType                  { get; set; } // int
			[Column("completion_type_description"),           Nullable] public string?  CompletionTypeDescription       { get; set; } // nvarchar(64)
			[Column("worker_count"),                       NotNull    ] public int      WorkerCount                     { get; set; } // int
			[Column("queued_population_type"),             NotNull    ] public int      QueuedPopulationType            { get; set; } // int
			[Column("queued_population_type_description"),    Nullable] public string?  QueuedPopulationTypeDescription { get; set; } // nvarchar(64)
			[Column("start_time"),                         NotNull    ] public DateTime StartTime                       { get; set; } // datetime
			[Column("incremental_timestamp"),              NotNull    ] public byte[]   IncrementalTimestamp            { get; set; } = null!; // binary(8)
		}

		[Table(Schema="sys", Name="dm_fts_memory_buffers", IsView=true)]
		public partial class DmFtsMemoryBuffers
		{
			[Column("pool_id"),        NotNull] public int    PoolID        { get; set; } // int
			[Column("memory_address"), NotNull] public byte[] MemoryAddress { get; set; } = null!; // varbinary(8)
			[Column("name"),           NotNull] public string Name          { get; set; } = null!; // nvarchar(4000)
			[Column("is_free"),        NotNull] public bool   IsFree        { get; set; } // bit
			[Column("row_count"),      NotNull] public int    RowCount      { get; set; } // int
			[Column("bytes_used"),     NotNull] public int    BytesUsed     { get; set; } // int
			[Column("percent_used"),   NotNull] public int    PercentUsed   { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_fts_memory_pools", IsView=true)]
		public partial class DmFtsMemoryPools
		{
			[Column("pool_id"),          NotNull] public int PoolID         { get; set; } // int
			[Column("buffer_size"),      NotNull] public int BufferSize     { get; set; } // int
			[Column("min_buffer_limit"), NotNull] public int MinBufferLimit { get; set; } // int
			[Column("max_buffer_limit"), NotNull] public int MaxBufferLimit { get; set; } // int
			[Column("buffer_count"),     NotNull] public int BufferCount    { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_fts_outstanding_batches", IsView=true)]
		public partial class DmFtsOutstandingBatches
		{
			[Column("database_id"),              NotNull    ] public int     DatabaseID             { get; set; } // int
			[Column("catalog_id"),               NotNull    ] public int     CatalogID              { get; set; } // int
			[Column("table_id"),                 NotNull    ] public int     TableID                { get; set; } // int
			[Column("batch_id"),                 NotNull    ] public int     BatchID                { get; set; } // int
			[Column("memory_address"),           NotNull    ] public byte[]  MemoryAddress          { get; set; } = null!; // varbinary(8)
			[Column("crawl_memory_address"),     NotNull    ] public byte[]  CrawlMemoryAddress     { get; set; } = null!; // varbinary(8)
			[Column("memregion_memory_address"), NotNull    ] public byte[]  MemregionMemoryAddress { get; set; } = null!; // varbinary(8)
			[Column("hr_batch"),                 NotNull    ] public int     HrBatch                { get; set; } // int
			[Column("is_retry_batch"),           NotNull    ] public bool    IsRetryBatch           { get; set; } // bit
			[Column("retry_hints"),              NotNull    ] public int     RetryHints             { get; set; } // int
			[Column("retry_hints_description"),     Nullable] public string? RetryHintsDescription  { get; set; } // nvarchar(64)
			[Column("doc_failed"),               NotNull    ] public long    DocFailed              { get; set; } // bigint
			[Column("batch_timestamp"),          NotNull    ] public byte[]  BatchTimestamp         { get; set; } = null!; // binary(8)
		}

		[Table(Schema="sys", Name="dm_fts_population_ranges", IsView=true)]
		public partial class DmFtsPopulationRanges
		{
			[Column("memory_address"),        NotNull] public byte[] MemoryAddress       { get; set; } = null!; // varbinary(8)
			[Column("parent_memory_address"), NotNull] public byte[] ParentMemoryAddress { get; set; } = null!; // varbinary(8)
			[Column("is_retry"),              NotNull] public bool   IsRetry             { get; set; } // bit
			[Column("session_id"),            NotNull] public short  SessionID           { get; set; } // smallint
			[Column("processed_row_count"),   NotNull] public int    ProcessedRowCount   { get; set; } // int
			[Column("error_count"),           NotNull] public int    ErrorCount          { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_fts_semantic_similarity_population", IsView=true)]
		public partial class DmFtsSemanticSimilarityPopulation
		{
			[Column("database_id"),                 NotNull    ] public int      DatabaseID                { get; set; } // int
			[Column("catalog_id"),                  NotNull    ] public int      CatalogID                 { get; set; } // int
			[Column("table_id"),                    NotNull    ] public int      TableID                   { get; set; } // int
			[Column("document_count"),              NotNull    ] public long     DocumentCount             { get; set; } // bigint
			[Column("document_processed_count"),    NotNull    ] public long     DocumentProcessedCount    { get; set; } // bigint
			[Column("completion_type"),             NotNull    ] public int      CompletionType            { get; set; } // int
			[Column("completion_type_description"),    Nullable] public string?  CompletionTypeDescription { get; set; } // nvarchar(64)
			[Column("worker_count"),                NotNull    ] public int      WorkerCount               { get; set; } // int
			[Column("status"),                      NotNull    ] public int      Status                    { get; set; } // int
			[Column("status_description"),             Nullable] public string?  StatusDescription         { get; set; } // nvarchar(64)
			[Column("start_time"),                  NotNull    ] public DateTime StartTime                 { get; set; } // datetime
			[Column("incremental_timestamp"),       NotNull    ] public byte[]   IncrementalTimestamp      { get; set; } = null!; // binary(8)
		}

		[Table(Schema="sys", Name="dm_hadr_ag_threads", IsView=true)]
		public partial class DmHadrAgThreads
		{
			[Column("group_id"),                  NotNull    ] public Guid   GroupID                { get; set; } // uniqueidentifier
			[Column("name"),                      NotNull    ] public string Name                   { get; set; } = null!; // nvarchar(128)
			[Column("num_databases"),                Nullable] public int?   NumDatabases           { get; set; } // int
			[Column("num_capture_threads"),          Nullable] public int?   NumCaptureThreads      { get; set; } // int
			[Column("num_redo_threads"),             Nullable] public int?   NumRedoThreads         { get; set; } // int
			[Column("num_parallel_redo_threads"),    Nullable] public int?   NumParallelRedoThreads { get; set; } // int
			[Column("num_hadr_threads"),             Nullable] public int?   NumHadrThreads         { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_hadr_automatic_seeding", IsView=true)]
		public partial class DmHadrAutomaticSeeding
		{
			[Column("start_time"),           NotNull    ] public DateTime  StartTime         { get; set; } // datetime
			[Column("completion_time"),         Nullable] public DateTime? CompletionTime    { get; set; } // datetime
			[Column("ag_id"),                NotNull    ] public Guid      AgID              { get; set; } // uniqueidentifier
			[Column("ag_db_id"),             NotNull    ] public Guid      AgDbID            { get; set; } // uniqueidentifier
			[Column("ag_remote_replica_id"), NotNull    ] public Guid      AgRemoteReplicaID { get; set; } // uniqueidentifier
			[Column("operation_id"),         NotNull    ] public Guid      OperationID       { get; set; } // uniqueidentifier
			[Column("is_source"),            NotNull    ] public bool      IsSource          { get; set; } // bit
			[Column("current_state"),        NotNull    ] public string    CurrentState      { get; set; } = null!; // nvarchar(4000)
			[Column("performed_seeding"),    NotNull    ] public bool      PerformedSeeding  { get; set; } // bit
			[Column("failure_state"),           Nullable] public int?      FailureState      { get; set; } // int
			[Column("failure_state_desc"),      Nullable] public string?   FailureStateDesc  { get; set; } // nvarchar(4000)
			[Column("error_code"),              Nullable] public int?      ErrorCode         { get; set; } // int
			[Column("number_of_attempts"),   NotNull    ] public int       NumberOfAttempts  { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_hadr_auto_page_repair", IsView=true)]
		public partial class DmHadrAutoPageRepair
		{
			[Column("database_id"),       NotNull] public int      DatabaseID       { get; set; } // int
			[Column("file_id"),           NotNull] public int      FileID           { get; set; } // int
			[Column("page_id"),           NotNull] public long     PageID           { get; set; } // bigint
			[Column("error_type"),        NotNull] public short    ErrorType        { get; set; } // smallint
			[Column("page_status"),       NotNull] public byte     PageStatus       { get; set; } // tinyint
			[Column("modification_time"), NotNull] public DateTime ModificationTime { get; set; } // datetime
		}

		[Table(Schema="sys", Name="dm_hadr_availability_group_states", IsView=true)]
		public partial class DmHadrAvailabilityGroupStates
		{
			[Column("group_id"),                       NotNull    ] public Guid    GroupID                     { get; set; } // uniqueidentifier
			[Column("primary_replica"),                   Nullable] public string? PrimaryReplica              { get; set; } // nvarchar(128)
			[Column("primary_recovery_health"),           Nullable] public byte?   PrimaryRecoveryHealth       { get; set; } // tinyint
			[Column("primary_recovery_health_desc"),      Nullable] public string? PrimaryRecoveryHealthDesc   { get; set; } // nvarchar(60)
			[Column("secondary_recovery_health"),         Nullable] public byte?   SecondaryRecoveryHealth     { get; set; } // tinyint
			[Column("secondary_recovery_health_desc"),    Nullable] public string? SecondaryRecoveryHealthDesc { get; set; } // nvarchar(60)
			[Column("synchronization_health"),            Nullable] public byte?   SynchronizationHealth       { get; set; } // tinyint
			[Column("synchronization_health_desc"),       Nullable] public string? SynchronizationHealthDesc   { get; set; } // nvarchar(60)
		}

		[Table(Schema="sys", Name="dm_hadr_availability_replica_cluster_nodes", IsView=true)]
		public partial class DmHadrAvailabilityReplicaClusterNodes
		{
			[Column("group_name"),          NotNull] public string GroupName         { get; set; } = null!; // nvarchar(256)
			[Column("replica_server_name"), NotNull] public string ReplicaServerName { get; set; } = null!; // nvarchar(256)
			[Column("node_name"),           NotNull] public string NodeName          { get; set; } = null!; // nvarchar(256)
		}

		[Table(Schema="sys", Name="dm_hadr_availability_replica_cluster_states", IsView=true)]
		public partial class DmHadrAvailabilityReplicaClusterStates
		{
			[Column("replica_id"),          NotNull    ] public Guid    ReplicaID         { get; set; } // uniqueidentifier
			[Column("replica_server_name"), NotNull    ] public string  ReplicaServerName { get; set; } = null!; // nvarchar(256)
			[Column("group_id"),            NotNull    ] public Guid    GroupID           { get; set; } // uniqueidentifier
			[Column("join_state"),          NotNull    ] public byte    JoinState         { get; set; } // tinyint
			[Column("join_state_desc"),        Nullable] public string? JoinStateDesc     { get; set; } // nvarchar(60)
		}

		[Table(Schema="sys", Name="dm_hadr_availability_replica_states", IsView=true)]
		public partial class DmHadrAvailabilityReplicaStates
		{
			[Column("replica_id"),                                  NotNull    ] public Guid      ReplicaID                              { get; set; } // uniqueidentifier
			[Column("group_id"),                                    NotNull    ] public Guid      GroupID                                { get; set; } // uniqueidentifier
			[Column("is_local"),                                    NotNull    ] public bool      IsLocal                                { get; set; } // bit
			[Column("role"),                                           Nullable] public byte?     Role                                   { get; set; } // tinyint
			[Column("role_desc"),                                      Nullable] public string?   RoleDesc                               { get; set; } // nvarchar(60)
			[Column("operational_state"),                              Nullable] public byte?     OperationalState                       { get; set; } // tinyint
			[Column("operational_state_desc"),                         Nullable] public string?   OperationalStateDesc                   { get; set; } // nvarchar(60)
			[Column("connected_state"),                                Nullable] public byte?     ConnectedState                         { get; set; } // tinyint
			[Column("connected_state_desc"),                           Nullable] public string?   ConnectedStateDesc                     { get; set; } // nvarchar(60)
			[Column("recovery_health"),                                Nullable] public byte?     RecoveryHealth                         { get; set; } // tinyint
			[Column("recovery_health_desc"),                           Nullable] public string?   RecoveryHealthDesc                     { get; set; } // nvarchar(60)
			[Column("synchronization_health"),                         Nullable] public byte?     SynchronizationHealth                  { get; set; } // tinyint
			[Column("synchronization_health_desc"),                    Nullable] public string?   SynchronizationHealthDesc              { get; set; } // nvarchar(60)
			[Column("last_connect_error_number"),                      Nullable] public int?      LastConnectErrorNumber                 { get; set; } // int
			[Column("last_connect_error_description"),                 Nullable] public string?   LastConnectErrorDescription            { get; set; } // nvarchar(1024)
			[Column("last_connect_error_timestamp"),                   Nullable] public DateTime? LastConnectErrorTimestamp              { get; set; } // datetime
			[Column("write_lease_remaining_ticks"),                    Nullable] public long?     WriteLeaseRemainingTicks               { get; set; } // bigint
			[Column("current_configuration_commit_start_time_utc"),    Nullable] public DateTime? CurrentConfigurationCommitStartTimeUtc { get; set; } // datetime
		}

		[Table(Schema="sys", Name="dm_hadr_cluster", IsView=true)]
		public partial class DmHadrCluster
		{
			[Column("cluster_name"),      NotNull] public string ClusterName     { get; set; } = null!; // nvarchar(256)
			[Column("quorum_type"),       NotNull] public byte   QuorumType      { get; set; } // tinyint
			[Column("quorum_type_desc"),  NotNull] public string QuorumTypeDesc  { get; set; } = null!; // nvarchar(60)
			[Column("quorum_state"),      NotNull] public byte   QuorumState     { get; set; } // tinyint
			[Column("quorum_state_desc"), NotNull] public string QuorumStateDesc { get; set; } = null!; // nvarchar(60)
		}

		[Table(Schema="sys", Name="dm_hadr_cluster_members", IsView=true)]
		public partial class DmHadrClusterMembers
		{
			[Column("member_name"),            NotNull    ] public string MemberName          { get; set; } = null!; // nvarchar(256)
			[Column("member_type"),            NotNull    ] public byte   MemberType          { get; set; } // tinyint
			[Column("member_type_desc"),       NotNull    ] public string MemberTypeDesc      { get; set; } = null!; // nvarchar(60)
			[Column("member_state"),           NotNull    ] public byte   MemberState         { get; set; } // tinyint
			[Column("member_state_desc"),      NotNull    ] public string MemberStateDesc     { get; set; } = null!; // nvarchar(60)
			[Column("number_of_quorum_votes"),    Nullable] public int?   NumberOfQuorumVotes { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_hadr_cluster_networks", IsView=true)]
		public partial class DmHadrClusterNetworks
		{
			[Column("member_name"),                  NotNull    ] public string  MemberName                { get; set; } = null!; // nvarchar(128)
			[Column("network_subnet_ip"),            NotNull    ] public string  NetworkSubnetIp           { get; set; } = null!; // nvarchar(64)
			[Column("network_subnet_ipv4_mask"),        Nullable] public string? NetworkSubnetIpv4Mask     { get; set; } // nvarchar(45)
			[Column("network_subnet_prefix_length"),    Nullable] public int?    NetworkSubnetPrefixLength { get; set; } // int
			[Column("is_public"),                    NotNull    ] public bool    IsPublic                  { get; set; } // bit
			[Column("is_ipv4"),                      NotNull    ] public bool    IsIpv4                    { get; set; } // bit
		}

		[Table(Schema="sys", Name="dm_hadr_database_replica_cluster_states", IsView=true)]
		public partial class DmHadrDatabaseReplicaClusterStates
		{
			[Column("replica_id"),                   NotNull    ] public Guid     ReplicaID                 { get; set; } // uniqueidentifier
			[Column("group_database_id"),            NotNull    ] public Guid     GroupDatabaseID           { get; set; } // uniqueidentifier
			[Column("database_name"),                   Nullable] public string?  DatabaseName              { get; set; } // nvarchar(128)
			[Column("is_failover_ready"),            NotNull    ] public bool     IsFailoverReady           { get; set; } // bit
			[Column("is_pending_secondary_suspend"), NotNull    ] public bool     IsPendingSecondarySuspend { get; set; } // bit
			[Column("is_database_joined"),           NotNull    ] public bool     IsDatabaseJoined          { get; set; } // bit
			[Column("recovery_lsn"),                    Nullable] public decimal? RecoveryLsn               { get; set; } // numeric(25,0)
			[Column("truncation_lsn"),                  Nullable] public decimal? TruncationLsn             { get; set; } // numeric(25,0)
		}

		[Table(Schema="sys", Name="dm_hadr_database_replica_states", IsView=true)]
		public partial class DmHadrDatabaseReplicaStates
		{
			[Column("database_id"),                 NotNull    ] public int       DatabaseID                { get; set; } // int
			[Column("group_id"),                    NotNull    ] public Guid      GroupID                   { get; set; } // uniqueidentifier
			[Column("replica_id"),                  NotNull    ] public Guid      ReplicaID                 { get; set; } // uniqueidentifier
			[Column("group_database_id"),           NotNull    ] public Guid      GroupDatabaseID           { get; set; } // uniqueidentifier
			[Column("is_local"),                       Nullable] public bool?     IsLocal                   { get; set; } // bit
			[Column("is_primary_replica"),             Nullable] public bool?     IsPrimaryReplica          { get; set; } // bit
			[Column("synchronization_state"),          Nullable] public byte?     SynchronizationState      { get; set; } // tinyint
			[Column("synchronization_state_desc"),     Nullable] public string?   SynchronizationStateDesc  { get; set; } // nvarchar(60)
			[Column("is_commit_participant"),          Nullable] public bool?     IsCommitParticipant       { get; set; } // bit
			[Column("synchronization_health"),         Nullable] public byte?     SynchronizationHealth     { get; set; } // tinyint
			[Column("synchronization_health_desc"),    Nullable] public string?   SynchronizationHealthDesc { get; set; } // nvarchar(60)
			[Column("database_state"),                 Nullable] public byte?     DatabaseState             { get; set; } // tinyint
			[Column("database_state_desc"),            Nullable] public string?   DatabaseStateDesc         { get; set; } // nvarchar(60)
			[Column("is_suspended"),                   Nullable] public bool?     IsSuspended               { get; set; } // bit
			[Column("suspend_reason"),                 Nullable] public byte?     SuspendReason             { get; set; } // tinyint
			[Column("suspend_reason_desc"),            Nullable] public string?   SuspendReasonDesc         { get; set; } // nvarchar(60)
			[Column("recovery_lsn"),                   Nullable] public decimal?  RecoveryLsn               { get; set; } // numeric(25,0)
			[Column("truncation_lsn"),                 Nullable] public decimal?  TruncationLsn             { get; set; } // numeric(25,0)
			[Column("last_sent_lsn"),                  Nullable] public decimal?  LastSentLsn               { get; set; } // numeric(25,0)
			[Column("last_sent_time"),                 Nullable] public DateTime? LastSentTime              { get; set; } // datetime
			[Column("last_received_lsn"),              Nullable] public decimal?  LastReceivedLsn           { get; set; } // numeric(25,0)
			[Column("last_received_time"),             Nullable] public DateTime? LastReceivedTime          { get; set; } // datetime
			[Column("last_hardened_lsn"),              Nullable] public decimal?  LastHardenedLsn           { get; set; } // numeric(25,0)
			[Column("last_hardened_time"),             Nullable] public DateTime? LastHardenedTime          { get; set; } // datetime
			[Column("last_redone_lsn"),                Nullable] public decimal?  LastRedoneLsn             { get; set; } // numeric(25,0)
			[Column("last_redone_time"),               Nullable] public DateTime? LastRedoneTime            { get; set; } // datetime
			[Column("log_send_queue_size"),            Nullable] public long?     LogSendQueueSize          { get; set; } // bigint
			[Column("log_send_rate"),                  Nullable] public long?     LogSendRate               { get; set; } // bigint
			[Column("redo_queue_size"),                Nullable] public long?     RedoQueueSize             { get; set; } // bigint
			[Column("redo_rate"),                      Nullable] public long?     RedoRate                  { get; set; } // bigint
			[Column("filestream_send_rate"),           Nullable] public long?     FilestreamSendRate        { get; set; } // bigint
			[Column("end_of_log_lsn"),                 Nullable] public decimal?  EndOfLogLsn               { get; set; } // numeric(25,0)
			[Column("last_commit_lsn"),                Nullable] public decimal?  LastCommitLsn             { get; set; } // numeric(25,0)
			[Column("last_commit_time"),               Nullable] public DateTime? LastCommitTime            { get; set; } // datetime
			[Column("low_water_mark_for_ghosts"),      Nullable] public long?     LowWaterMarkForGhosts     { get; set; } // bigint
			[Column("secondary_lag_seconds"),          Nullable] public long?     SecondaryLagSeconds       { get; set; } // bigint
			[Column("quorum_commit_lsn"),              Nullable] public decimal?  QuorumCommitLsn           { get; set; } // numeric(25,0)
			[Column("quorum_commit_time"),             Nullable] public DateTime? QuorumCommitTime          { get; set; } // datetime
		}

		[Table(Schema="sys", Name="dm_hadr_db_threads", IsView=true)]
		public partial class DmHadrDbThreads
		{
			[Column("group_id"),                  NotNull    ] public Guid   GroupID                { get; set; } // uniqueidentifier
			[Column("ag_db_id"),                  NotNull    ] public Guid   AgDbID                 { get; set; } // uniqueidentifier
			[Column("name"),                      NotNull    ] public string Name                   { get; set; } = null!; // nvarchar(128)
			[Column("num_capture_threads"),          Nullable] public int?   NumCaptureThreads      { get; set; } // int
			[Column("num_redo_threads"),             Nullable] public int?   NumRedoThreads         { get; set; } // int
			[Column("num_parallel_redo_threads"),    Nullable] public int?   NumParallelRedoThreads { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_hadr_instance_node_map", IsView=true)]
		public partial class DmHadrInstanceNodeMap
		{
			[Column("ag_resource_id"), NotNull] public string AgResourceID { get; set; } = null!; // nvarchar(256)
			[Column("instance_name"),  NotNull] public string InstanceName { get; set; } = null!; // nvarchar(256)
			[Column("node_name"),      NotNull] public string NodeName     { get; set; } = null!; // nvarchar(256)
		}

		[Table(Schema="sys", Name="dm_hadr_name_id_map", IsView=true)]
		public partial class DmHadrNameIdMap
		{
			[Column("ag_name"),        NotNull] public string AgName       { get; set; } = null!; // nvarchar(256)
			[Column("ag_id"),          NotNull] public Guid   AgID         { get; set; } // uniqueidentifier
			[Column("ag_resource_id"), NotNull] public string AgResourceID { get; set; } = null!; // nvarchar(256)
			[Column("ag_group_id"),    NotNull] public string AgGroupID    { get; set; } = null!; // nvarchar(256)
		}

		[Table(Schema="sys", Name="dm_hadr_physical_seeding_stats", IsView=true)]
		public partial class DmHadrPhysicalSeedingStats
		{
			[Column("local_physical_seeding_id"),      NotNull    ] public Guid      LocalPhysicalSeedingID     { get; set; } // uniqueidentifier
			[Column("remote_physical_seeding_id"),        Nullable] public Guid?     RemotePhysicalSeedingID    { get; set; } // uniqueidentifier
			[Column("local_database_id"),              NotNull    ] public int       LocalDatabaseID            { get; set; } // int
			[Column("local_database_name"),               Nullable] public string?   LocalDatabaseName          { get; set; } // nvarchar(128)
			[Column("remote_machine_name"),               Nullable] public string?   RemoteMachineName          { get; set; } // nvarchar(128)
			[Column("role_desc"),                         Nullable] public string?   RoleDesc                   { get; set; } // nvarchar(128)
			[Column("internal_state_desc"),               Nullable] public string?   InternalStateDesc          { get; set; } // nvarchar(128)
			[Column("transfer_rate_bytes_per_second"),    Nullable] public long?     TransferRateBytesPerSecond { get; set; } // bigint
			[Column("transferred_size_bytes"),            Nullable] public long?     TransferredSizeBytes       { get; set; } // bigint
			[Column("database_size_bytes"),               Nullable] public long?     DatabaseSizeBytes          { get; set; } // bigint
			[Column("start_time_utc"),                    Nullable] public DateTime? StartTimeUtc               { get; set; } // datetime
			[Column("end_time_utc"),                      Nullable] public DateTime? EndTimeUtc                 { get; set; } // datetime
			[Column("estimate_time_complete_utc"),        Nullable] public DateTime? EstimateTimeCompleteUtc    { get; set; } // datetime
			[Column("total_disk_io_wait_time_ms"),        Nullable] public long?     TotalDiskIoWaitTimeMs      { get; set; } // bigint
			[Column("total_network_wait_time_ms"),        Nullable] public long?     TotalNetworkWaitTimeMs     { get; set; } // bigint
			[Column("failure_code"),                      Nullable] public int?      FailureCode                { get; set; } // int
			[Column("failure_message"),                   Nullable] public string?   FailureMessage             { get; set; } // nvarchar(128)
			[Column("failure_time_utc"),                  Nullable] public DateTime? FailureTimeUtc             { get; set; } // datetime
			[Column("is_compression_enabled"),            Nullable] public bool?     IsCompressionEnabled       { get; set; } // bit
		}

		[Table(Schema="sys", Name="dm_hpc_device_stats", IsView=true)]
		public partial class DmHpcDeviceStats
		{
			[Column("device_logical_id"),    NotNull] public int  DeviceLogicalID   { get; set; } // int
			[Column("device_type"),          NotNull] public int  DeviceType        { get; set; } // int
			[Column("device_provider"),      NotNull] public int  DeviceProvider    { get; set; } // int
			[Column("device_physical_id"),   NotNull] public long DevicePhysicalID  { get; set; } // bigint
			[Column("version"),              NotNull] public long Version           { get; set; } // bigint
			[Column("compute_units"),        NotNull] public int  ComputeUnits      { get; set; } // int
			[Column("max_thread_proxies"),   NotNull] public int  MaxThreadProxies  { get; set; } // int
			[Column("clock_frequency"),      NotNull] public long ClockFrequency    { get; set; } // bigint
			[Column("device_memory_bytes"),  NotNull] public long DeviceMemoryBytes { get; set; } // bigint
			[Column("rows_handled"),         NotNull] public long RowsHandled       { get; set; } // bigint
			[Column("cycles_used"),          NotNull] public long CyclesUsed        { get; set; } // bigint
			[Column("device_to_host_bytes"), NotNull] public long DeviceToHostBytes { get; set; } // bigint
			[Column("host_to_device_bytes"), NotNull] public long HostToDeviceBytes { get; set; } // bigint
			[Column("device_ready"),         NotNull] public bool DeviceReady       { get; set; } // bit
		}

		[Table(Schema="sys", Name="dm_hpc_thread_proxy_stats", IsView=true)]
		public partial class DmHpcThreadProxyStats
		{
			[Column("device_logical_id"),    NotNull] public int   DeviceLogicalID   { get; set; } // int
			[Column("device_type"),          NotNull] public int   DeviceType        { get; set; } // int
			[Column("device_provider"),      NotNull] public int   DeviceProvider    { get; set; } // int
			[Column("proxy_id"),             NotNull] public int   ProxyID           { get; set; } // int
			[Column("rows_handled"),         NotNull] public long  RowsHandled       { get; set; } // bigint
			[Column("cycles_used"),          NotNull] public long  CyclesUsed        { get; set; } // bigint
			[Column("host_to_device_bytes"), NotNull] public long  HostToDeviceBytes { get; set; } // bigint
			[Column("device_to_host_bytes"), NotNull] public long  DeviceToHostBytes { get; set; } // bigint
			[Column("device_memory_bytes"),  NotNull] public long  DeviceMemoryBytes { get; set; } // bigint
			[Column("session_id"),           NotNull] public short SessionID         { get; set; } // smallint
			[Column("request_id"),           NotNull] public int   RequestID         { get; set; } // int
			[Column("active"),               NotNull] public bool  Active            { get; set; } // bit
		}

		[Table(Schema="sys", Name="dm_io_backup_tapes", IsView=true)]
		public partial class DmIoBackupTapes
		{
			[Column("physical_device_name"),    NotNull    ] public string    PhysicalDeviceName   { get; set; } = null!; // nvarchar(260)
			[Column("logical_device_name"),        Nullable] public string?   LogicalDeviceName    { get; set; } // nvarchar(128)
			[Column("status"),                  NotNull    ] public int       Status               { get; set; } // int
			[Column("status_desc"),             NotNull    ] public string    StatusDesc           { get; set; } = null!; // nvarchar(260)
			[Column("mount_request_time"),         Nullable] public DateTime? MountRequestTime     { get; set; } // datetime
			[Column("mount_expiration_time"),      Nullable] public DateTime? MountExpirationTime  { get; set; } // datetime
			[Column("database_name"),              Nullable] public string?   DatabaseName         { get; set; } // nvarchar(128)
			[Column("spid"),                       Nullable] public int?      Spid                 { get; set; } // int
			[Column("command"),                    Nullable] public int?      Command              { get; set; } // int
			[Column("command_desc"),               Nullable] public string?   CommandDesc          { get; set; } // nvarchar(60)
			[Column("media_family_id"),            Nullable] public int?      MediaFamilyID        { get; set; } // int
			[Column("media_set_name"),             Nullable] public string?   MediaSetName         { get; set; } // nvarchar(128)
			[Column("media_set_guid"),             Nullable] public Guid?     MediaSetGuid         { get; set; } // uniqueidentifier
			[Column("media_sequence_number"),      Nullable] public int?      MediaSequenceNumber  { get; set; } // int
			[Column("tape_operation"),             Nullable] public int?      TapeOperation        { get; set; } // int
			[Column("tape_operation_desc"),        Nullable] public string?   TapeOperationDesc    { get; set; } // nvarchar(60)
			[Column("mount_request_type"),         Nullable] public int?      MountRequestType     { get; set; } // int
			[Column("mount_request_type_desc"),    Nullable] public string?   MountRequestTypeDesc { get; set; } // nvarchar(60)
		}

		[Table(Schema="sys", Name="dm_io_cluster_shared_drives", IsView=true)]
		public partial class DmIoClusterSharedDrives
		{
			[Column, Nullable] public string? DriveName { get; set; } // nchar(1)
		}

		[Table(Schema="sys", Name="dm_io_cluster_valid_path_names", IsView=true)]
		public partial class DmIoClusterValidPathNames
		{
			[Column("path_name"),                   Nullable] public string? PathName              { get; set; } // nvarchar(256)
			[Column("cluster_owner_node"),          Nullable] public string? ClusterOwnerNode      { get; set; } // nvarchar(60)
			[Column("is_cluster_shared_volume"), NotNull    ] public bool    IsClusterSharedVolume { get; set; } // bit
		}

		[Table(Schema="sys", Name="dm_io_pending_io_requests", IsView=true)]
		public partial class DmIoPendingIoRequests
		{
			[Column("io_completion_request_address"), NotNull    ] public byte[]  IoCompletionRequestAddress { get; set; } = null!; // varbinary(8)
			[Column("io_type"),                       NotNull    ] public string  IoType                     { get; set; } = null!; // nvarchar(60)
			[Column("io_pending_ms_ticks"),           NotNull    ] public long    IoPendingMsTicks           { get; set; } // bigint
			[Column("io_pending"),                    NotNull    ] public int     IoPending                  { get; set; } // int
			[Column("io_completion_routine_address"),    Nullable] public byte[]? IoCompletionRoutineAddress { get; set; } // varbinary(8)
			[Column("io_user_data_address"),             Nullable] public byte[]? IoUserDataAddress          { get; set; } // varbinary(8)
			[Column("scheduler_address"),             NotNull    ] public byte[]  SchedulerAddress           { get; set; } = null!; // varbinary(8)
			[Column("io_handle"),                        Nullable] public byte[]? IoHandle                   { get; set; } // varbinary(8)
			[Column("io_offset"),                     NotNull    ] public long    IoOffset                   { get; set; } // bigint
			[Column("io_handle_path"),                   Nullable] public string? IoHandlePath               { get; set; } // nvarchar(256)
		}

		[Table(Schema="sys", Name="dm_logpool_hashentries", IsView=true)]
		public partial class DmLogpoolHashentries
		{
			[Column("bucket_no"),        NotNull] public int    BucketNo       { get; set; } // int
			[Column("database_id"),      NotNull] public int    DatabaseID     { get; set; } // int
			[Column("recovery_unit_id"), NotNull] public int    RecoveryUnitID { get; set; } // int
			[Column("log_block_id"),     NotNull] public long   LogBlockID     { get; set; } // bigint
			[Column("cache_buffer"),     NotNull] public byte[] CacheBuffer    { get; set; } = null!; // varbinary(8)
		}

		[Table(Schema="sys", Name="dm_logpool_stats", IsView=true)]
		public partial class DmLogpoolStats
		{
			[Column("hash_hit_total_search_length"),  NotNull] public long HashHitTotalSearchLength  { get; set; } // bigint
			[Column("hash_miss_total_search_length"), NotNull] public long HashMissTotalSearchLength { get; set; } // bigint
			[Column("hash_hits"),                     NotNull] public long HashHits                  { get; set; } // bigint
			[Column("hash_misses"),                   NotNull] public long HashMisses                { get; set; } // bigint
			[Column("hash_bucket_count"),             NotNull] public int  HashBucketCount           { get; set; } // int
			[Column("mem_status_stamp"),              NotNull] public long MemStatusStamp            { get; set; } // bigint
			[Column("mem_status"),                    NotNull] public int  MemStatus                 { get; set; } // int
			[Column("logpoolmgr_count"),              NotNull] public int  LogpoolmgrCount           { get; set; } // int
			[Column("total_pages"),                   NotNull] public long TotalPages                { get; set; } // bigint
			[Column("private_pages"),                 NotNull] public long PrivatePages              { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_os_buffer_descriptors", IsView=true)]
		public partial class DmOsBufferDescriptors
		{
			[Column("database_id"),           Nullable] public int?    DatabaseID         { get; set; } // int
			[Column("file_id"),               Nullable] public int?    FileID             { get; set; } // int
			[Column("page_id"),               Nullable] public int?    PageID             { get; set; } // int
			[Column("page_level"),            Nullable] public int?    PageLevel          { get; set; } // int
			[Column("allocation_unit_id"),    Nullable] public long?   AllocationUnitID   { get; set; } // bigint
			[Column("page_type"),             Nullable] public string? PageType           { get; set; } // nvarchar(60)
			[Column("row_count"),             Nullable] public int?    RowCount           { get; set; } // int
			[Column("free_space_in_bytes"),   Nullable] public int?    FreeSpaceInBytes   { get; set; } // int
			[Column("is_modified"),           Nullable] public bool?   IsModified         { get; set; } // bit
			[Column("numa_node"),             Nullable] public int?    NumaNode           { get; set; } // int
			[Column("read_microsec"),         Nullable] public long?   ReadMicrosec       { get; set; } // bigint
			[Column("is_in_bpool_extension"), Nullable] public bool?   IsInBpoolExtension { get; set; } // bit
			[Column("error_code"),            Nullable] public int?    ErrorCode          { get; set; } // int
			[Column("op_history"),            Nullable] public byte[]? OpHistory          { get; set; } // varbinary(8)
		}

		[Table(Schema="sys", Name="dm_os_buffer_pool_extension_configuration", IsView=true)]
		public partial class DmOsBufferPoolExtensionConfiguration
		{
			[Column("path"),                  Nullable] public string? Path             { get; set; } // nvarchar(256)
			[Column("file_id"),               Nullable] public int?    FileID           { get; set; } // int
			[Column("state"),                 Nullable] public int?    State            { get; set; } // int
			[Column("state_description"),  NotNull    ] public string  StateDescription { get; set; } = null!; // nvarchar(60)
			[Column("current_size_in_kb"),    Nullable] public long?   CurrentSizeInKb  { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_os_child_instances", IsView=true)]
		public partial class DmOsChildInstances
		{
			[Column("owning_principal_name"),       Nullable] public string?   OwningPrincipalName      { get; set; } // nvarchar(256)
			[Column("owning_principal_sid"),        Nullable] public string?   OwningPrincipalSid       { get; set; } // nvarchar(256)
			[Column("owning_principal_sid_binary"), Nullable] public byte[]?   OwningPrincipalSidBinary { get; set; } // varbinary(85)
			[Column("instance_name"),               Nullable] public string?   InstanceName             { get; set; } // nvarchar(128)
			[Column("instance_pipe_name"),          Nullable] public string?   InstancePipeName         { get; set; } // nvarchar(260)
			[Column("OS_process_id"),               Nullable] public int?      OsProcessID              { get; set; } // int
			[Column("OS_process_creation_date"),    Nullable] public DateTime? OsProcessCreationDate    { get; set; } // datetime
			[Column("heart_beat"),                  Nullable] public string?   HeartBeat                { get; set; } // nvarchar(5)
		}

		[Table(Schema="sys", Name="dm_os_cluster_nodes", IsView=true)]
		public partial class DmOsClusterNodes
		{
			[Column(),                        Nullable] public string? NodeName          { get; set; } // nvarchar(128)
			[Column("status"),                Nullable] public int?    Status            { get; set; } // int
			[Column("status_description"), NotNull    ] public string  StatusDescription { get; set; } = null!; // varchar(7)
			[Column("is_current_owner"),      Nullable] public bool?   IsCurrentOwner    { get; set; } // bit
		}

		[Table(Schema="sys", Name="dm_os_cluster_properties", IsView=true)]
		public partial class DmOsClusterProperties
		{
			[Column,    Nullable] public long?  VerboseLogging        { get; set; } // bigint
			[Column,    Nullable] public long?  SqlDumperDumpFlags    { get; set; } // bigint
			[Column, NotNull    ] public string SqlDumperDumpPath     { get; set; } = null!; // nvarchar(260)
			[Column,    Nullable] public long?  SqlDumperDumpTimeOut  { get; set; } // bigint
			[Column,    Nullable] public long?  FailureConditionLevel { get; set; } // bigint
			[Column,    Nullable] public long?  HealthCheckTimeout    { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_os_dispatcher_pools", IsView=true)]
		public partial class DmOsDispatcherPools
		{
			[Column("dispatcher_pool_address"),  NotNull] public byte[] DispatcherPoolAddress  { get; set; } = null!; // varbinary(8)
			[Column("type"),                     NotNull] public string Type                   { get; set; } = null!; // nvarchar(256)
			[Column("name"),                     NotNull] public string Name                   { get; set; } = null!; // nvarchar(256)
			[Column("dispatcher_count"),         NotNull] public int    DispatcherCount        { get; set; } // int
			[Column("dispatcher_ideal_count"),   NotNull] public int    DispatcherIdealCount   { get; set; } // int
			[Column("dispatcher_timeout_ms"),    NotNull] public int    DispatcherTimeoutMs    { get; set; } // int
			[Column("dispatcher_waiting_count"), NotNull] public int    DispatcherWaitingCount { get; set; } // int
			[Column("queue_length"),             NotNull] public int    QueueLength            { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_os_dispatchers", IsView=true)]
		public partial class DmOsDispatchers
		{
			[Column("dispatcher_pool_address"), NotNull    ] public byte[] DispatcherPoolAddress { get; set; } = null!; // varbinary(8)
			[Column("task_address"),            NotNull    ] public byte[] TaskAddress           { get; set; } = null!; // varbinary(8)
			[Column("state"),                   NotNull    ] public string State                 { get; set; } = null!; // nvarchar(60)
			[Column("wait_duration"),              Nullable] public long?  WaitDuration          { get; set; } // bigint
			[Column("current_item_duration"),      Nullable] public long?  CurrentItemDuration   { get; set; } // bigint
			[Column("items_processed"),         NotNull    ] public long   ItemsProcessed        { get; set; } // bigint
			[Column("fade_end_time"),              Nullable] public int?   FadeEndTime           { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_os_enumerate_fixed_drives", IsView=true)]
		public partial class DmOsEnumerateFixedDrives
		{
			[Column("fixed_drive_path"),       Nullable] public string? FixedDrivePath   { get; set; } // nvarchar(256)
			[Column("drive_type"),          NotNull    ] public int     DriveType        { get; set; } // int
			[Column("drive_type_desc"),        Nullable] public string? DriveTypeDesc    { get; set; } // nvarchar(256)
			[Column("free_space_in_bytes"), NotNull    ] public long    FreeSpaceInBytes { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_os_host_info", IsView=true)]
		public partial class DmOsHostInfo
		{
			[Column("host_platform"),           NotNull    ] public string HostPlatform         { get; set; } = null!; // nvarchar(256)
			[Column("host_distribution"),       NotNull    ] public string HostDistribution     { get; set; } = null!; // nvarchar(256)
			[Column("host_release"),            NotNull    ] public string HostRelease          { get; set; } = null!; // nvarchar(256)
			[Column("host_service_pack_level"), NotNull    ] public string HostServicePackLevel { get; set; } = null!; // nvarchar(256)
			[Column("host_sku"),                   Nullable] public int?   HostSku              { get; set; } // int
			[Column("os_language_version"),     NotNull    ] public int    OsLanguageVersion    { get; set; } // int
			[Column("host_architecture"),       NotNull    ] public string HostArchitecture     { get; set; } = null!; // nvarchar(256)
		}

		[Table(Schema="sys", Name="dm_os_hosts", IsView=true)]
		public partial class DmOsHosts
		{
			[Column("host_address"),                 NotNull    ] public byte[]  HostAddress               { get; set; } = null!; // varbinary(8)
			[Column("type"),                            Nullable] public string? Type                      { get; set; } // nvarchar(60)
			[Column("name"),                         NotNull    ] public string  Name                      { get; set; } = null!; // nvarchar(60)
			[Column("enqueued_tasks_count"),            Nullable] public int?    EnqueuedTasksCount        { get; set; } // int
			[Column("active_tasks_count"),              Nullable] public int?    ActiveTasksCount          { get; set; } // int
			[Column("completed_ios_count"),             Nullable] public int?    CompletedIosCount         { get; set; } // int
			[Column("completed_ios_in_bytes"),          Nullable] public long?   CompletedIosInBytes       { get; set; } // bigint
			[Column("active_ios_count"),                Nullable] public int?    ActiveIosCount            { get; set; } // int
			[Column("default_memory_clerk_address"), NotNull    ] public byte[]  DefaultMemoryClerkAddress { get; set; } = null!; // varbinary(8)
		}

		[Table(Schema="sys", Name="dm_os_job_object", IsView=true)]
		public partial class DmOsJobObject
		{
			[Column("cpu_rate"),                       Nullable] public int?   CpuRate                 { get; set; } // int
			[Column("cpu_affinity_mask"),              Nullable] public long?  CpuAffinityMask         { get; set; } // bigint
			[Column("cpu_affinity_group"),             Nullable] public int?   CpuAffinityGroup        { get; set; } // int
			[Column("memory_limit_mb"),                Nullable] public long?  MemoryLimitMb           { get; set; } // bigint
			[Column("process_memory_limit_mb"),        Nullable] public long?  ProcessMemoryLimitMb    { get; set; } // bigint
			[Column("workingset_limit_mb"),            Nullable] public long?  WorkingsetLimitMb       { get; set; } // bigint
			[Column("non_sos_mem_gap_mb"),             Nullable] public long?  NonSosMemGapMb          { get; set; } // bigint
			[Column("low_mem_signal_threshold_mb"),    Nullable] public long?  LowMemSignalThresholdMb { get; set; } // bigint
			[Column("total_user_time"),                Nullable] public long?  TotalUserTime           { get; set; } // bigint
			[Column("total_kernel_time"),              Nullable] public long?  TotalKernelTime         { get; set; } // bigint
			[Column("write_operation_count"),          Nullable] public long?  WriteOperationCount     { get; set; } // bigint
			[Column("read_operation_count"),           Nullable] public long?  ReadOperationCount      { get; set; } // bigint
			[Column("peak_process_memory_used_mb"),    Nullable] public long?  PeakProcessMemoryUsedMb { get; set; } // bigint
			[Column("peak_job_memory_used_mb"),        Nullable] public long?  PeakJobMemoryUsedMb     { get; set; } // bigint
			[Column("process_physical_affinity"),   NotNull    ] public string ProcessPhysicalAffinity { get; set; } = null!; // nvarchar(3072)
		}

		[Table(Schema="sys", Name="dm_os_latch_stats", IsView=true)]
		public partial class DmOsLatchStats
		{
			[Column("latch_class"),            NotNull    ] public string LatchClass           { get; set; } = null!; // nvarchar(60)
			[Column("waiting_requests_count"),    Nullable] public long?  WaitingRequestsCount { get; set; } // bigint
			[Column("wait_time_ms"),              Nullable] public long?  WaitTimeMs           { get; set; } // bigint
			[Column("max_wait_time_ms"),          Nullable] public long?  MaxWaitTimeMs        { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_os_loaded_modules", IsView=true)]
		public partial class DmOsLoadedModules
		{
			[Column("base_address"),    NotNull    ] public byte[]  BaseAddress    { get; set; } = null!; // varbinary(8)
			[Column("file_version"),       Nullable] public string? FileVersion    { get; set; } // varchar(256)
			[Column("product_version"),    Nullable] public string? ProductVersion { get; set; } // varchar(256)
			[Column("debug"),              Nullable] public bool?   Debug          { get; set; } // bit
			[Column("patched"),            Nullable] public bool?   Patched        { get; set; } // bit
			[Column("prerelease"),         Nullable] public bool?   Prerelease     { get; set; } // bit
			[Column("private_build"),      Nullable] public bool?   PrivateBuild   { get; set; } // bit
			[Column("special_build"),      Nullable] public bool?   SpecialBuild   { get; set; } // bit
			[Column("language"),           Nullable] public int?    Language       { get; set; } // int
			[Column("company"),            Nullable] public string? Company        { get; set; } // nvarchar(256)
			[Column("description"),        Nullable] public string? Description    { get; set; } // nvarchar(256)
			[Column("name"),               Nullable] public string? Name           { get; set; } // nvarchar(512)
		}

		[Table(Schema="sys", Name="dm_os_memory_allocations", IsView=true)]
		public partial class DmOsMemoryAllocations
		{
			[Column("memory_allocation_address"), NotNull    ] public byte[]   MemoryAllocationAddress { get; set; } = null!; // varbinary(8)
			[Column("size_in_bytes"),             NotNull    ] public long     SizeInBytes             { get; set; } // bigint
			[Column("creation_time"),             NotNull    ] public DateTime CreationTime            { get; set; } // datetime
			[Column("memory_object_address"),     NotNull    ] public byte[]   MemoryObjectAddress     { get; set; } = null!; // varbinary(8)
			[Column("memory_node_id"),            NotNull    ] public short    MemoryNodeID            { get; set; } // smallint
			[Column("allocator_stack_address"),   NotNull    ] public byte[]   AllocatorStackAddress   { get; set; } = null!; // varbinary(8)
			[Column("source_file"),                  Nullable] public string?  SourceFile              { get; set; } // varchar(256)
			[Column("line_num"),                  NotNull    ] public int      LineNum                 { get; set; } // int
			[Column("sequence_num"),              NotNull    ] public int      SequenceNum             { get; set; } // int
			[Column("tag"),                       NotNull    ] public int      Tag                     { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_os_memory_broker_clerks", IsView=true)]
		public partial class DmOsMemoryBrokerClerks
		{
			[Column("clerk_name"),         NotNull] public string ClerkName         { get; set; } = null!; // nvarchar(256)
			[Column("total_kb"),           NotNull] public long   TotalKb           { get; set; } // bigint
			[Column("simulated_kb"),       NotNull] public long   SimulatedKb       { get; set; } // bigint
			[Column("simulation_benefit"), NotNull] public double SimulationBenefit { get; set; } // float
			[Column("internal_benefit"),   NotNull] public double InternalBenefit   { get; set; } // float
			[Column("external_benefit"),   NotNull] public double ExternalBenefit   { get; set; } // float
			[Column("value_of_memory"),    NotNull] public double ValueOfMemory     { get; set; } // float
			[Column("periodic_freed_kb"),  NotNull] public long   PeriodicFreedKb   { get; set; } // bigint
			[Column("internal_freed_kb"),  NotNull] public long   InternalFreedKb   { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_os_memory_brokers", IsView=true)]
		public partial class DmOsMemoryBrokers
		{
			[Column("pool_id"),                  NotNull] public int    PoolID                 { get; set; } // int
			[Column("memory_broker_type"),       NotNull] public string MemoryBrokerType       { get; set; } = null!; // nvarchar(60)
			[Column("allocations_kb"),           NotNull] public long   AllocationsKb          { get; set; } // bigint
			[Column("allocations_kb_per_sec"),   NotNull] public long   AllocationsKbPerSec    { get; set; } // bigint
			[Column("predicted_allocations_kb"), NotNull] public long   PredictedAllocationsKb { get; set; } // bigint
			[Column("target_allocations_kb"),    NotNull] public long   TargetAllocationsKb    { get; set; } // bigint
			[Column("future_allocations_kb"),    NotNull] public long   FutureAllocationsKb    { get; set; } // bigint
			[Column("overall_limit_kb"),         NotNull] public long   OverallLimitKb         { get; set; } // bigint
			[Column("last_notification"),        NotNull] public string LastNotification       { get; set; } = null!; // nvarchar(60)
		}

		[Table(Schema="sys", Name="dm_os_memory_cache_clock_hands", IsView=true)]
		public partial class DmOsMemoryCacheClockHands
		{
			[Column("cache_address"),            NotNull] public byte[] CacheAddress          { get; set; } = null!; // varbinary(8)
			[Column("name"),                     NotNull] public string Name                  { get; set; } = null!; // nvarchar(256)
			[Column("type"),                     NotNull] public string Type                  { get; set; } = null!; // nvarchar(60)
			[Column("clock_hand"),               NotNull] public string ClockHand             { get; set; } = null!; // nvarchar(60)
			[Column("clock_status"),             NotNull] public string ClockStatus           { get; set; } = null!; // nvarchar(60)
			[Column("rounds_count"),             NotNull] public long   RoundsCount           { get; set; } // bigint
			[Column("removed_all_rounds_count"), NotNull] public long   RemovedAllRoundsCount { get; set; } // bigint
			[Column("updated_last_round_count"), NotNull] public long   UpdatedLastRoundCount { get; set; } // bigint
			[Column("removed_last_round_count"), NotNull] public long   RemovedLastRoundCount { get; set; } // bigint
			[Column("last_tick_time"),           NotNull] public long   LastTickTime          { get; set; } // bigint
			[Column("round_start_time"),         NotNull] public long   RoundStartTime        { get; set; } // bigint
			[Column("last_round_start_time"),    NotNull] public long   LastRoundStartTime    { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_os_memory_cache_counters", IsView=true)]
		public partial class DmOsMemoryCacheCounters
		{
			[Column("cache_address"),        NotNull    ] public byte[] CacheAddress      { get; set; } = null!; // varbinary(8)
			[Column("name"),                 NotNull    ] public string Name              { get; set; } = null!; // nvarchar(256)
			[Column("type"),                 NotNull    ] public string Type              { get; set; } = null!; // nvarchar(60)
			[Column("pages_kb"),             NotNull    ] public long   PagesKb           { get; set; } // bigint
			[Column("pages_in_use_kb"),         Nullable] public long?  PagesInUseKb      { get; set; } // bigint
			[Column("entries_count"),        NotNull    ] public long   EntriesCount      { get; set; } // bigint
			[Column("entries_in_use_count"), NotNull    ] public long   EntriesInUseCount { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_os_memory_cache_entries", IsView=true)]
		public partial class DmOsMemoryCacheEntries
		{
			[Column("cache_address"),             NotNull    ] public byte[]  CacheAddress           { get; set; } = null!; // varbinary(8)
			[Column("name"),                      NotNull    ] public string  Name                   { get; set; } = null!; // nvarchar(256)
			[Column("type"),                      NotNull    ] public string  Type                   { get; set; } = null!; // nvarchar(60)
			[Column("entry_address"),             NotNull    ] public byte[]  EntryAddress           { get; set; } = null!; // varbinary(8)
			[Column("entry_data_address"),        NotNull    ] public byte[]  EntryDataAddress       { get; set; } = null!; // varbinary(8)
			[Column("in_use_count"),              NotNull    ] public int     InUseCount             { get; set; } // int
			[Column("is_dirty"),                  NotNull    ] public bool    IsDirty                { get; set; } // bit
			[Column("disk_ios_count"),            NotNull    ] public int     DiskIosCount           { get; set; } // int
			[Column("context_switches_count"),    NotNull    ] public int     ContextSwitchesCount   { get; set; } // int
			[Column("original_cost"),             NotNull    ] public int     OriginalCost           { get; set; } // int
			[Column("current_cost"),              NotNull    ] public int     CurrentCost            { get; set; } // int
			[Column("memory_object_address"),        Nullable] public byte[]? MemoryObjectAddress    { get; set; } // varbinary(8)
			[Column("pages_kb"),                  NotNull    ] public long    PagesKb                { get; set; } // bigint
			[Column("entry_data"),                   Nullable] public string? EntryData              { get; set; } // nvarchar(3072)
			[Column("pool_id"),                      Nullable] public int?    PoolID                 { get; set; } // int
			[Column("time_to_generate"),             Nullable] public double? TimeToGenerate         { get; set; } // float
			[Column("use_count"),                    Nullable] public long?   UseCount               { get; set; } // bigint
			[Column("average_time_between_uses"),    Nullable] public double? AverageTimeBetweenUses { get; set; } // float
			[Column("time_since_last_use"),          Nullable] public double? TimeSinceLastUse       { get; set; } // float
			[Column("probability_of_reuse"),         Nullable] public double? ProbabilityOfReuse     { get; set; } // float
			[Column("value"),                        Nullable] public double? Value                  { get; set; } // float
		}

		[Table(Schema="sys", Name="dm_os_memory_cache_hash_tables", IsView=true)]
		public partial class DmOsMemoryCacheHashTables
		{
			[Column("cache_address"),                NotNull] public byte[] CacheAddress             { get; set; } = null!; // varbinary(8)
			[Column("name"),                         NotNull] public string Name                     { get; set; } = null!; // nvarchar(256)
			[Column("type"),                         NotNull] public string Type                     { get; set; } = null!; // nvarchar(60)
			[Column("table_level"),                  NotNull] public int    TableLevel               { get; set; } // int
			[Column("buckets_count"),                NotNull] public int    BucketsCount             { get; set; } // int
			[Column("buckets_in_use_count"),         NotNull] public int    BucketsInUseCount        { get; set; } // int
			[Column("buckets_min_length"),           NotNull] public int    BucketsMinLength         { get; set; } // int
			[Column("buckets_max_length"),           NotNull] public int    BucketsMaxLength         { get; set; } // int
			[Column("buckets_avg_length"),           NotNull] public int    BucketsAvgLength         { get; set; } // int
			[Column("buckets_max_length_ever"),      NotNull] public int    BucketsMaxLengthEver     { get; set; } // int
			[Column("hits_count"),                   NotNull] public long   HitsCount                { get; set; } // bigint
			[Column("misses_count"),                 NotNull] public long   MissesCount              { get; set; } // bigint
			[Column("buckets_avg_scan_hit_length"),  NotNull] public int    BucketsAvgScanHitLength  { get; set; } // int
			[Column("buckets_avg_scan_miss_length"), NotNull] public int    BucketsAvgScanMissLength { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_os_memory_clerks", IsView=true)]
		public partial class DmOsMemoryClerks
		{
			[Column("memory_clerk_address"),        NotNull    ] public byte[]  MemoryClerkAddress       { get; set; } = null!; // varbinary(8)
			[Column("type"),                        NotNull    ] public string  Type                     { get; set; } = null!; // nvarchar(60)
			[Column("name"),                        NotNull    ] public string  Name                     { get; set; } = null!; // nvarchar(256)
			[Column("memory_node_id"),              NotNull    ] public short   MemoryNodeID             { get; set; } // smallint
			[Column("pages_kb"),                    NotNull    ] public long    PagesKb                  { get; set; } // bigint
			[Column("virtual_memory_reserved_kb"),  NotNull    ] public long    VirtualMemoryReservedKb  { get; set; } // bigint
			[Column("virtual_memory_committed_kb"), NotNull    ] public long    VirtualMemoryCommittedKb { get; set; } // bigint
			[Column("awe_allocated_kb"),            NotNull    ] public long    AweAllocatedKb           { get; set; } // bigint
			[Column("shared_memory_reserved_kb"),   NotNull    ] public long    SharedMemoryReservedKb   { get; set; } // bigint
			[Column("shared_memory_committed_kb"),  NotNull    ] public long    SharedMemoryCommittedKb  { get; set; } // bigint
			[Column("page_size_in_bytes"),          NotNull    ] public long    PageSizeInBytes          { get; set; } // bigint
			[Column("page_allocator_address"),      NotNull    ] public byte[]  PageAllocatorAddress     { get; set; } = null!; // varbinary(8)
			[Column("host_address"),                NotNull    ] public byte[]  HostAddress              { get; set; } = null!; // varbinary(8)
			[Column("parent_memory_broker_type"),      Nullable] public string? ParentMemoryBrokerType   { get; set; } // nvarchar(60)
		}

		[Table(Schema="sys", Name="dm_os_memory_node_access_stats", IsView=true)]
		public partial class DmOsMemoryNodeAccessStats
		{
			[Column("local_node"),  Nullable] public int?    LocalNode  { get; set; } // int
			[Column("remote_node"), Nullable] public int?    RemoteNode { get; set; } // int
			[Column("page_class"),  Nullable] public string? PageClass  { get; set; } // nvarchar(60)
			[Column("read_count"),  Nullable] public long?   ReadCount  { get; set; } // bigint
			[Column("write_count"), Nullable] public long?   WriteCount { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_os_memory_nodes", IsView=true)]
		public partial class DmOsMemoryNodes
		{
			[Column("memory_node_id"),                     NotNull] public short MemoryNodeID                   { get; set; } // smallint
			[Column("virtual_address_space_reserved_kb"),  NotNull] public long  VirtualAddressSpaceReservedKb  { get; set; } // bigint
			[Column("virtual_address_space_committed_kb"), NotNull] public long  VirtualAddressSpaceCommittedKb { get; set; } // bigint
			[Column("locked_page_allocations_kb"),         NotNull] public long  LockedPageAllocationsKb        { get; set; } // bigint
			[Column("pages_kb"),                           NotNull] public long  PagesKb                        { get; set; } // bigint
			[Column("shared_memory_reserved_kb"),          NotNull] public long  SharedMemoryReservedKb         { get; set; } // bigint
			[Column("shared_memory_committed_kb"),         NotNull] public long  SharedMemoryCommittedKb        { get; set; } // bigint
			[Column("cpu_affinity_mask"),                  NotNull] public long  CpuAffinityMask                { get; set; } // bigint
			[Column("online_scheduler_mask"),              NotNull] public long  OnlineSchedulerMask            { get; set; } // bigint
			[Column("processor_group"),                    NotNull] public short ProcessorGroup                 { get; set; } // smallint
			[Column("foreign_committed_kb"),               NotNull] public long  ForeignCommittedKb             { get; set; } // bigint
			[Column("target_kb"),                          NotNull] public long  TargetKb                       { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_os_memory_objects", IsView=true)]
		public partial class DmOsMemoryObjects
		{
			[Column("memory_object_address"),  NotNull    ] public byte[]    MemoryObjectAddress  { get; set; } = null!; // varbinary(8)
			[Column("parent_address"),            Nullable] public byte[]?   ParentAddress        { get; set; } // varbinary(8)
			[Column("pages_in_bytes"),         NotNull    ] public long      PagesInBytes         { get; set; } // bigint
			[Column("creation_options"),          Nullable] public int?      CreationOptions      { get; set; } // int
			[Column("bytes_used"),                Nullable] public long?     BytesUsed            { get; set; } // bigint
			[Column("type"),                   NotNull    ] public string    Type                 { get; set; } = null!; // nvarchar(60)
			[Column("name"),                      Nullable] public string?   Name                 { get; set; } // varchar(256)
			[Column("memory_node_id"),         NotNull    ] public short     MemoryNodeID         { get; set; } // smallint
			[Column("creation_time"),             Nullable] public DateTime? CreationTime         { get; set; } // datetime
			[Column("page_size_in_bytes"),     NotNull    ] public int       PageSizeInBytes      { get; set; } // int
			[Column("max_pages_in_bytes"),     NotNull    ] public long      MaxPagesInBytes      { get; set; } // bigint
			[Column("page_allocator_address"), NotNull    ] public byte[]    PageAllocatorAddress { get; set; } = null!; // varbinary(8)
			[Column("creation_stack_address"),    Nullable] public byte[]?   CreationStackAddress { get; set; } // varbinary(8)
			[Column("sequence_num"),              Nullable] public int?      SequenceNum          { get; set; } // int
			[Column("partition_type"),         NotNull    ] public int       PartitionType        { get; set; } // int
			[Column("partition_type_desc"),    NotNull    ] public string    PartitionTypeDesc    { get; set; } = null!; // nvarchar(60)
			[Column("contention_factor"),         Nullable] public float?    ContentionFactor     { get; set; } // real
			[Column("waiting_tasks_count"),       Nullable] public long?     WaitingTasksCount    { get; set; } // bigint
			[Column("exclusive_access_count"),    Nullable] public long?     ExclusiveAccessCount { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_os_memory_pools", IsView=true)]
		public partial class DmOsMemoryPools
		{
			[Column("memory_pool_address"),         NotNull] public byte[] MemoryPoolAddress       { get; set; } = null!; // varbinary(8)
			[Column("pool_id"),                     NotNull] public int    PoolID                  { get; set; } // int
			[Column("type"),                        NotNull] public string Type                    { get; set; } = null!; // nvarchar(60)
			[Column("name"),                        NotNull] public string Name                    { get; set; } = null!; // nvarchar(256)
			[Column("max_free_entries_count"),      NotNull] public long   MaxFreeEntriesCount     { get; set; } // bigint
			[Column("free_entries_count"),          NotNull] public long   FreeEntriesCount        { get; set; } // bigint
			[Column("removed_in_all_rounds_count"), NotNull] public long   RemovedInAllRoundsCount { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_os_nodes", IsView=true)]
		public partial class DmOsNodes
		{
			[Column("node_id"),                      NotNull    ] public short   NodeID                    { get; set; } // smallint
			[Column("node_state_desc"),              NotNull    ] public string  NodeStateDesc             { get; set; } = null!; // nvarchar(256)
			[Column("memory_object_address"),        NotNull    ] public byte[]  MemoryObjectAddress       { get; set; } = null!; // varbinary(8)
			[Column("memory_clerk_address"),         NotNull    ] public byte[]  MemoryClerkAddress        { get; set; } = null!; // varbinary(8)
			[Column("io_completion_worker_address"),    Nullable] public byte[]? IoCompletionWorkerAddress { get; set; } // varbinary(8)
			[Column("memory_node_id"),               NotNull    ] public short   MemoryNodeID              { get; set; } // smallint
			[Column("cpu_affinity_mask"),            NotNull    ] public long    CpuAffinityMask           { get; set; } // bigint
			[Column("online_scheduler_count"),       NotNull    ] public short   OnlineSchedulerCount      { get; set; } // smallint
			[Column("idle_scheduler_count"),         NotNull    ] public short   IdleSchedulerCount        { get; set; } // smallint
			[Column("active_worker_count"),          NotNull    ] public int     ActiveWorkerCount         { get; set; } // int
			[Column("avg_load_balance"),             NotNull    ] public int     AvgLoadBalance            { get; set; } // int
			[Column("timer_task_affinity_mask"),     NotNull    ] public long    TimerTaskAffinityMask     { get; set; } // bigint
			[Column("permanent_task_affinity_mask"), NotNull    ] public long    PermanentTaskAffinityMask { get; set; } // bigint
			[Column("resource_monitor_state"),       NotNull    ] public bool    ResourceMonitorState      { get; set; } // bit
			[Column("online_scheduler_mask"),        NotNull    ] public long    OnlineSchedulerMask       { get; set; } // bigint
			[Column("processor_group"),              NotNull    ] public short   ProcessorGroup            { get; set; } // smallint
			[Column("cpu_count"),                    NotNull    ] public int     CpuCount                  { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_os_performance_counters", IsView=true)]
		public partial class DmOsPerformanceCounters
		{
			[Column("object_name"),   NotNull    ] public string  ObjectName   { get; set; } = null!; // nchar(128)
			[Column("counter_name"),  NotNull    ] public string  CounterName  { get; set; } = null!; // nchar(128)
			[Column("instance_name"),    Nullable] public string? InstanceName { get; set; } // nchar(128)
			[Column("cntr_value"),    NotNull    ] public long    CntrValue    { get; set; } // bigint
			[Column("cntr_type"),     NotNull    ] public int     CntrType     { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_os_process_memory", IsView=true)]
		public partial class DmOsProcessMemory
		{
			[Column("physical_memory_in_use_kb"),          NotNull] public long PhysicalMemoryInUseKb          { get; set; } // bigint
			[Column("large_page_allocations_kb"),          NotNull] public long LargePageAllocationsKb         { get; set; } // bigint
			[Column("locked_page_allocations_kb"),         NotNull] public long LockedPageAllocationsKb        { get; set; } // bigint
			[Column("total_virtual_address_space_kb"),     NotNull] public long TotalVirtualAddressSpaceKb     { get; set; } // bigint
			[Column("virtual_address_space_reserved_kb"),  NotNull] public long VirtualAddressSpaceReservedKb  { get; set; } // bigint
			[Column("virtual_address_space_committed_kb"), NotNull] public long VirtualAddressSpaceCommittedKb { get; set; } // bigint
			[Column("virtual_address_space_available_kb"), NotNull] public long VirtualAddressSpaceAvailableKb { get; set; } // bigint
			[Column("page_fault_count"),                   NotNull] public long PageFaultCount                 { get; set; } // bigint
			[Column("memory_utilization_percentage"),      NotNull] public int  MemoryUtilizationPercentage    { get; set; } // int
			[Column("available_commit_limit_kb"),          NotNull] public long AvailableCommitLimitKb         { get; set; } // bigint
			[Column("process_physical_memory_low"),        NotNull] public bool ProcessPhysicalMemoryLow       { get; set; } // bit
			[Column("process_virtual_memory_low"),         NotNull] public bool ProcessVirtualMemoryLow        { get; set; } // bit
		}

		[Table(Schema="sys", Name="dm_os_ring_buffers", IsView=true)]
		public partial class DmOsRingBuffers
		{
			[Column("ring_buffer_address"), NotNull    ] public byte[]  RingBufferAddress { get; set; } = null!; // varbinary(8)
			[Column("ring_buffer_type"),    NotNull    ] public string  RingBufferType    { get; set; } = null!; // nvarchar(60)
			[Column("timestamp"),           NotNull    ] public long    Timestamp         { get; set; } // bigint
			[Column("record"),                 Nullable] public string? Record            { get; set; } // nvarchar(3072)
		}

		[Table(Schema="sys", Name="dm_os_schedulers", IsView=true)]
		public partial class DmOsSchedulers
		{
			[Column("scheduler_address"),          NotNull    ] public byte[]  SchedulerAddress        { get; set; } = null!; // varbinary(8)
			[Column("parent_node_id"),             NotNull    ] public int     ParentNodeID            { get; set; } // int
			[Column("scheduler_id"),               NotNull    ] public int     SchedulerID             { get; set; } // int
			[Column("cpu_id"),                     NotNull    ] public int     CpuID                   { get; set; } // int
			[Column("status"),                     NotNull    ] public string  Status                  { get; set; } = null!; // nvarchar(60)
			[Column("is_online"),                  NotNull    ] public bool    IsOnline                { get; set; } // bit
			[Column("is_idle"),                    NotNull    ] public bool    IsIdle                  { get; set; } // bit
			[Column("preemptive_switches_count"),  NotNull    ] public int     PreemptiveSwitchesCount { get; set; } // int
			[Column("context_switches_count"),     NotNull    ] public int     ContextSwitchesCount    { get; set; } // int
			[Column("idle_switches_count"),        NotNull    ] public int     IdleSwitchesCount       { get; set; } // int
			[Column("current_tasks_count"),        NotNull    ] public int     CurrentTasksCount       { get; set; } // int
			[Column("runnable_tasks_count"),       NotNull    ] public int     RunnableTasksCount      { get; set; } // int
			[Column("current_workers_count"),      NotNull    ] public int     CurrentWorkersCount     { get; set; } // int
			[Column("active_workers_count"),       NotNull    ] public int     ActiveWorkersCount      { get; set; } // int
			[Column("work_queue_count"),           NotNull    ] public long    WorkQueueCount          { get; set; } // bigint
			[Column("pending_disk_io_count"),      NotNull    ] public int     PendingDiskIoCount      { get; set; } // int
			[Column("load_factor"),                NotNull    ] public int     LoadFactor              { get; set; } // int
			[Column("yield_count"),                NotNull    ] public int     YieldCount              { get; set; } // int
			[Column("last_timer_activity"),        NotNull    ] public long    LastTimerActivity       { get; set; } // bigint
			[Column("failed_to_create_worker"),    NotNull    ] public bool    FailedToCreateWorker    { get; set; } // bit
			[Column("active_worker_address"),         Nullable] public byte[]? ActiveWorkerAddress     { get; set; } // varbinary(8)
			[Column("memory_object_address"),      NotNull    ] public byte[]  MemoryObjectAddress     { get; set; } = null!; // varbinary(8)
			[Column("task_memory_object_address"), NotNull    ] public byte[]  TaskMemoryObjectAddress { get; set; } = null!; // varbinary(8)
			[Column("quantum_length_us"),          NotNull    ] public long    QuantumLengthUs         { get; set; } // bigint
			[Column("total_cpu_usage_ms"),         NotNull    ] public long    TotalCpuUsageMs         { get; set; } // bigint
			[Column("total_cpu_idle_capped_ms"),      Nullable] public long?   TotalCpuIdleCappedMs    { get; set; } // bigint
			[Column("total_scheduler_delay_ms"),   NotNull    ] public long    TotalSchedulerDelayMs   { get; set; } // bigint
			[Column("ideal_workers_limit"),        NotNull    ] public int     IdealWorkersLimit       { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_os_server_diagnostics_log_configurations", IsView=true)]
		public partial class DmOsServerDiagnosticsLogConfigurations
		{
			[Column("is_enabled"),    Nullable] public int?   IsEnabled { get; set; } // int
			[Column("path"),       NotNull    ] public string Path      { get; set; } = null!; // nvarchar(260)
			[Column("max_size"),      Nullable] public int?   MaxSize   { get; set; } // int
			[Column("max_files"),     Nullable] public int?   MaxFiles  { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_os_spinlock_stats", IsView=true)]
		public partial class DmOsSpinlockStats
		{
			[Column("name"),                NotNull    ] public string Name              { get; set; } = null!; // nvarchar(256)
			[Column("collisions"),             Nullable] public long?  Collisions        { get; set; } // bigint
			[Column("spins"),                  Nullable] public long?  Spins             { get; set; } // bigint
			[Column("spins_per_collision"),    Nullable] public float? SpinsPerCollision { get; set; } // real
			[Column("sleep_time"),             Nullable] public long?  SleepTime         { get; set; } // bigint
			[Column("backoffs"),               Nullable] public long?  Backoffs          { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_os_stacks", IsView=true)]
		public partial class DmOsStacks
		{
			[Column("stack_address"), NotNull] public byte[] StackAddress { get; set; } = null!; // varbinary(8)
			[Column("frame_index"),   NotNull] public int    FrameIndex   { get; set; } // int
			[Column("frame_address"), NotNull] public byte[] FrameAddress { get; set; } = null!; // varbinary(8)
		}

		[Table(Schema="sys", Name="dm_os_sublatches", IsView=true)]
		public partial class DmOsSublatches
		{
			[Column("superlatch_address"),    Nullable] public byte[]? SuperlatchAddress { get; set; } // varbinary(8)
			[Column("sublatch_address"),   NotNull    ] public byte[]  SublatchAddress   { get; set; } = null!; // varbinary(8)
			[Column("partition_id"),       NotNull    ] public int     PartitionID       { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_os_sys_info", IsView=true)]
		public partial class DmOsSysInfo
		{
			[Column("cpu_ticks"),                      NotNull    ] public long     CpuTicks                    { get; set; } // bigint
			[Column("ms_ticks"),                       NotNull    ] public long     MsTicks                     { get; set; } // bigint
			[Column("cpu_count"),                      NotNull    ] public int      CpuCount                    { get; set; } // int
			[Column("hyperthread_ratio"),              NotNull    ] public int      HyperthreadRatio            { get; set; } // int
			[Column("physical_memory_kb"),             NotNull    ] public long     PhysicalMemoryKb            { get; set; } // bigint
			[Column("virtual_memory_kb"),              NotNull    ] public long     VirtualMemoryKb             { get; set; } // bigint
			[Column("committed_kb"),                   NotNull    ] public long     CommittedKb                 { get; set; } // bigint
			[Column("committed_target_kb"),            NotNull    ] public long     CommittedTargetKb           { get; set; } // bigint
			[Column("visible_target_kb"),              NotNull    ] public long     VisibleTargetKb             { get; set; } // bigint
			[Column("stack_size_in_bytes"),            NotNull    ] public int      StackSizeInBytes            { get; set; } // int
			[Column("os_quantum"),                     NotNull    ] public long     OsQuantum                   { get; set; } // bigint
			[Column("os_error_mode"),                  NotNull    ] public int      OsErrorMode                 { get; set; } // int
			[Column("os_priority_class"),                 Nullable] public int?     OsPriorityClass             { get; set; } // int
			[Column("max_workers_count"),              NotNull    ] public int      MaxWorkersCount             { get; set; } // int
			[Column("scheduler_count"),                NotNull    ] public int      SchedulerCount              { get; set; } // int
			[Column("scheduler_total_count"),          NotNull    ] public int      SchedulerTotalCount         { get; set; } // int
			[Column("deadlock_monitor_serial_number"), NotNull    ] public int      DeadlockMonitorSerialNumber { get; set; } // int
			[Column("sqlserver_start_time_ms_ticks"),  NotNull    ] public long     SqlserverStartTimeMsTicks   { get; set; } // bigint
			[Column("sqlserver_start_time"),           NotNull    ] public DateTime SqlserverStartTime          { get; set; } // datetime
			[Column("affinity_type"),                  NotNull    ] public int      AffinityType                { get; set; } // int
			[Column("affinity_type_desc"),             NotNull    ] public string   AffinityTypeDesc            { get; set; } = null!; // nvarchar(60)
			[Column("process_kernel_time_ms"),         NotNull    ] public long     ProcessKernelTimeMs         { get; set; } // bigint
			[Column("process_user_time_ms"),           NotNull    ] public long     ProcessUserTimeMs           { get; set; } // bigint
			[Column("time_source"),                    NotNull    ] public int      TimeSource                  { get; set; } // int
			[Column("time_source_desc"),               NotNull    ] public string   TimeSourceDesc              { get; set; } = null!; // nvarchar(60)
			[Column("virtual_machine_type"),           NotNull    ] public int      VirtualMachineType          { get; set; } // int
			[Column("virtual_machine_type_desc"),      NotNull    ] public string   VirtualMachineTypeDesc      { get; set; } = null!; // nvarchar(60)
			[Column("softnuma_configuration"),         NotNull    ] public int      SoftnumaConfiguration       { get; set; } // int
			[Column("softnuma_configuration_desc"),    NotNull    ] public string   SoftnumaConfigurationDesc   { get; set; } = null!; // nvarchar(60)
			[Column("process_physical_affinity"),      NotNull    ] public string   ProcessPhysicalAffinity     { get; set; } = null!; // nvarchar(3072)
			[Column("sql_memory_model"),               NotNull    ] public int      SqlMemoryModel              { get; set; } // int
			[Column("sql_memory_model_desc"),          NotNull    ] public string   SqlMemoryModelDesc          { get; set; } = null!; // nvarchar(60)
			[Column("socket_count"),                   NotNull    ] public int      SocketCount                 { get; set; } // int
			[Column("cores_per_socket"),               NotNull    ] public int      CoresPerSocket              { get; set; } // int
			[Column("numa_node_count"),                NotNull    ] public int      NumaNodeCount               { get; set; } // int
			[Column("container_type"),                 NotNull    ] public int      ContainerType               { get; set; } // int
			[Column("container_type_desc"),            NotNull    ] public string   ContainerTypeDesc           { get; set; } = null!; // nvarchar(60)
		}

		[Table(Schema="sys", Name="dm_os_sys_memory", IsView=true)]
		public partial class DmOsSysMemory
		{
			[Column("total_physical_memory_kb"),        NotNull] public long   TotalPhysicalMemoryKb       { get; set; } // bigint
			[Column("available_physical_memory_kb"),    NotNull] public long   AvailablePhysicalMemoryKb   { get; set; } // bigint
			[Column("total_page_file_kb"),              NotNull] public long   TotalPageFileKb             { get; set; } // bigint
			[Column("available_page_file_kb"),          NotNull] public long   AvailablePageFileKb         { get; set; } // bigint
			[Column("system_cache_kb"),                 NotNull] public long   SystemCacheKb               { get; set; } // bigint
			[Column("kernel_paged_pool_kb"),            NotNull] public long   KernelPagedPoolKb           { get; set; } // bigint
			[Column("kernel_nonpaged_pool_kb"),         NotNull] public long   KernelNonpagedPoolKb        { get; set; } // bigint
			[Column("system_high_memory_signal_state"), NotNull] public bool   SystemHighMemorySignalState { get; set; } // bit
			[Column("system_low_memory_signal_state"),  NotNull] public bool   SystemLowMemorySignalState  { get; set; } // bit
			[Column("system_memory_state_desc"),        NotNull] public string SystemMemoryStateDesc       { get; set; } = null!; // nvarchar(256)
		}

		[Table(Schema="sys", Name="dm_os_tasks", IsView=true)]
		public partial class DmOsTasks
		{
			[Column("task_address"),            NotNull    ] public byte[]  TaskAddress          { get; set; } = null!; // varbinary(8)
			[Column("task_state"),                 Nullable] public string? TaskState            { get; set; } // nvarchar(60)
			[Column("context_switches_count"),     Nullable] public int?    ContextSwitchesCount { get; set; } // int
			[Column("pending_io_count"),           Nullable] public int?    PendingIoCount       { get; set; } // int
			[Column("pending_io_byte_count"),      Nullable] public long?   PendingIoByteCount   { get; set; } // bigint
			[Column("pending_io_byte_average"),    Nullable] public int?    PendingIoByteAverage { get; set; } // int
			[Column("scheduler_id"),            NotNull    ] public int     SchedulerID          { get; set; } // int
			[Column("session_id"),                 Nullable] public short?  SessionID            { get; set; } // smallint
			[Column("exec_context_id"),            Nullable] public int?    ExecContextID        { get; set; } // int
			[Column("request_id"),                 Nullable] public int?    RequestID            { get; set; } // int
			[Column("worker_address"),             Nullable] public byte[]? WorkerAddress        { get; set; } // varbinary(8)
			[Column("host_address"),            NotNull    ] public byte[]  HostAddress          { get; set; } = null!; // varbinary(8)
			[Column("parent_task_address"),        Nullable] public byte[]? ParentTaskAddress    { get; set; } // varbinary(8)
		}

		[Table(Schema="sys", Name="dm_os_threads", IsView=true)]
		public partial class DmOsThreads
		{
			[Column("thread_address"),            NotNull    ] public byte[]    ThreadAddress         { get; set; } = null!; // varbinary(8)
			[Column("started_by_sqlservr"),       NotNull    ] public bool      StartedBySqlservr     { get; set; } // bit
			[Column("os_thread_id"),              NotNull    ] public int       OsThreadID            { get; set; } // int
			[Column("status"),                    NotNull    ] public int       Status                { get; set; } // int
			[Column("instruction_address"),          Nullable] public byte[]?   InstructionAddress    { get; set; } // varbinary(8)
			[Column("creation_time"),                Nullable] public DateTime? CreationTime          { get; set; } // datetime
			[Column("kernel_time"),                  Nullable] public long?     KernelTime            { get; set; } // bigint
			[Column("usermode_time"),                Nullable] public long?     UsermodeTime          { get; set; } // bigint
			[Column("stack_base_address"),        NotNull    ] public byte[]    StackBaseAddress      { get; set; } = null!; // varbinary(8)
			[Column("stack_end_address"),            Nullable] public byte[]?   StackEndAddress       { get; set; } // varbinary(8)
			[Column("stack_bytes_committed"),     NotNull    ] public int       StackBytesCommitted   { get; set; } // int
			[Column("stack_bytes_used"),             Nullable] public int?      StackBytesUsed        { get; set; } // int
			[Column("affinity"),                  NotNull    ] public long      Affinity              { get; set; } // bigint
			[Column("priority"),                     Nullable] public int?      Priority              { get; set; } // int
			[Column("locale"),                       Nullable] public int?      Locale                { get; set; } // int
			[Column("token"),                        Nullable] public byte[]?   Token                 { get; set; } // varbinary(8)
			[Column("is_impersonating"),             Nullable] public int?      IsImpersonating       { get; set; } // int
			[Column("is_waiting_on_loader_lock"),    Nullable] public int?      IsWaitingOnLoaderLock { get; set; } // int
			[Column("fiber_data"),                   Nullable] public byte[]?   FiberData             { get; set; } // varbinary(8)
			[Column("thread_handle"),                Nullable] public byte[]?   ThreadHandle          { get; set; } // varbinary(8)
			[Column("event_handle"),                 Nullable] public byte[]?   EventHandle           { get; set; } // varbinary(8)
			[Column("scheduler_address"),            Nullable] public byte[]?   SchedulerAddress      { get; set; } // varbinary(8)
			[Column("worker_address"),               Nullable] public byte[]?   WorkerAddress         { get; set; } // varbinary(8)
			[Column("fiber_context_address"),        Nullable] public byte[]?   FiberContextAddress   { get; set; } // varbinary(8)
			[Column("self_address"),                 Nullable] public byte[]?   SelfAddress           { get; set; } // varbinary(8)
			[Column("processor_group"),           NotNull    ] public short     ProcessorGroup        { get; set; } // smallint
		}

		[Table(Schema="sys", Name="dm_os_virtual_address_dump", IsView=true)]
		public partial class DmOsVirtualAddressDump
		{
			[Column("region_base_address"),            NotNull] public byte[] RegionBaseAddress           { get; set; } = null!; // varbinary(8)
			[Column("region_allocation_base_address"), NotNull] public byte[] RegionAllocationBaseAddress { get; set; } = null!; // varbinary(8)
			[Column("region_allocation_protection"),   NotNull] public byte[] RegionAllocationProtection  { get; set; } = null!; // varbinary(8)
			[Column("region_size_in_bytes"),           NotNull] public long   RegionSizeInBytes           { get; set; } // bigint
			[Column("region_state"),                   NotNull] public byte[] RegionState                 { get; set; } = null!; // varbinary(8)
			[Column("region_current_protection"),      NotNull] public byte[] RegionCurrentProtection     { get; set; } = null!; // varbinary(8)
			[Column("region_type"),                    NotNull] public byte[] RegionType                  { get; set; } = null!; // varbinary(8)
		}

		[Table(Schema="sys", Name="dm_os_waiting_tasks", IsView=true)]
		public partial class DmOsWaitingTasks
		{
			[Column("waiting_task_address"),     NotNull    ] public byte[]  WaitingTaskAddress    { get; set; } = null!; // varbinary(8)
			[Column("session_id"),                  Nullable] public short?  SessionID             { get; set; } // smallint
			[Column("exec_context_id"),             Nullable] public int?    ExecContextID         { get; set; } // int
			[Column("wait_duration_ms"),            Nullable] public long?   WaitDurationMs        { get; set; } // bigint
			[Column("wait_type"),                   Nullable] public string? WaitType              { get; set; } // nvarchar(60)
			[Column("resource_address"),            Nullable] public byte[]? ResourceAddress       { get; set; } // varbinary(8)
			[Column("blocking_task_address"),       Nullable] public byte[]? BlockingTaskAddress   { get; set; } // varbinary(8)
			[Column("blocking_session_id"),         Nullable] public short?  BlockingSessionID     { get; set; } // smallint
			[Column("blocking_exec_context_id"),    Nullable] public int?    BlockingExecContextID { get; set; } // int
			[Column("resource_description"),        Nullable] public string? ResourceDescription   { get; set; } // nvarchar(3072)
		}

		[Table(Schema="sys", Name="dm_os_wait_stats", IsView=true)]
		public partial class DmOsWaitStats
		{
			[Column("wait_type"),           NotNull] public string WaitType          { get; set; } = null!; // nvarchar(60)
			[Column("waiting_tasks_count"), NotNull] public long   WaitingTasksCount { get; set; } // bigint
			[Column("wait_time_ms"),        NotNull] public long   WaitTimeMs        { get; set; } // bigint
			[Column("max_wait_time_ms"),    NotNull] public long   MaxWaitTimeMs     { get; set; } // bigint
			[Column("signal_wait_time_ms"), NotNull] public long   SignalWaitTimeMs  { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_os_windows_info", IsView=true)]
		public partial class DmOsWindowsInfo
		{
			[Column("windows_release"),            NotNull    ] public string WindowsRelease          { get; set; } = null!; // nvarchar(256)
			[Column("windows_service_pack_level"), NotNull    ] public string WindowsServicePackLevel { get; set; } = null!; // nvarchar(256)
			[Column("windows_sku"),                   Nullable] public int?   WindowsSku              { get; set; } // int
			[Column("os_language_version"),        NotNull    ] public int    OsLanguageVersion       { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_os_worker_local_storage", IsView=true)]
		public partial class DmOsWorkerLocalStorage
		{
			[Column("worker_address"),             NotNull] public byte[] WorkerAddress            { get; set; } = null!; // varbinary(8)
			[Column("comp_exec_ctxt_address"),     NotNull] public byte[] CompExecCtxtAddress      { get; set; } = null!; // varbinary(8)
			[Column("ec_address"),                 NotNull] public byte[] EcAddress                { get; set; } = null!; // varbinary(8)
			[Column("broker_address"),             NotNull] public byte[] BrokerAddress            { get; set; } = null!; // varbinary(8)
			[Column("task_proxy_address"),         NotNull] public byte[] TaskProxyAddress         { get; set; } = null!; // varbinary(8)
			[Column("msqlxact_address"),           NotNull] public byte[] MsqlxactAddress          { get; set; } = null!; // varbinary(8)
			[Column("sql_prof_address"),           NotNull] public byte[] SqlProfAddress           { get; set; } = null!; // varbinary(8)
			[Column("stack_checker_address"),      NotNull] public byte[] StackCheckerAddress      { get; set; } = null!; // varbinary(8)
			[Column("host_task_address"),          NotNull] public byte[] HostTaskAddress          { get; set; } = null!; // varbinary(8)
			[Column("sni_error_address"),          NotNull] public byte[] SniErrorAddress          { get; set; } = null!; // varbinary(8)
			[Column("queryscan_address"),          NotNull] public byte[] QueryscanAddress         { get; set; } = null!; // varbinary(8)
			[Column("diag_address"),               NotNull] public byte[] DiagAddress              { get; set; } = null!; // varbinary(8)
			[Column("query_driver_address"),       NotNull] public byte[] QueryDriverAddress       { get; set; } = null!; // varbinary(8)
			[Column("federatedxact_address"),      NotNull] public byte[] FederatedxactAddress     { get; set; } = null!; // varbinary(8)
			[Column("filestream_address"),         NotNull] public byte[] FilestreamAddress        { get; set; } = null!; // varbinary(8)
			[Column("qe_cc_address"),              NotNull] public byte[] QeCcAddress              { get; set; } = null!; // varbinary(8)
			[Column("xtp_address"),                NotNull] public byte[] XtpAddress               { get; set; } = null!; // varbinary(8)
			[Column("gq_address"),                 NotNull] public byte[] GqAddress                { get; set; } = null!; // varbinary(8)
			[Column("extensibility_ctxt_address"), NotNull] public byte[] ExtensibilityCtxtAddress { get; set; } = null!; // varbinary(8)
		}

		[Table(Schema="sys", Name="dm_os_workers", IsView=true)]
		public partial class DmOsWorkers
		{
			[Column("worker_address"),                      NotNull    ] public byte[]  WorkerAddress                  { get; set; } = null!; // varbinary(8)
			[Column("status"),                              NotNull    ] public int     Status                         { get; set; } // int
			[Column("is_preemptive"),                          Nullable] public bool?   IsPreemptive                   { get; set; } // bit
			[Column("is_fiber"),                               Nullable] public bool?   IsFiber                        { get; set; } // bit
			[Column("is_sick"),                                Nullable] public bool?   IsSick                         { get; set; } // bit
			[Column("is_in_cc_exception"),                     Nullable] public bool?   IsInCcException                { get; set; } // bit
			[Column("is_fatal_exception"),                     Nullable] public bool?   IsFatalException               { get; set; } // bit
			[Column("is_inside_catch"),                        Nullable] public bool?   IsInsideCatch                  { get; set; } // bit
			[Column("is_in_polling_io_completion_routine"),    Nullable] public bool?   IsInPollingIoCompletionRoutine { get; set; } // bit
			[Column("context_switch_count"),                NotNull    ] public int     ContextSwitchCount             { get; set; } // int
			[Column("pending_io_count"),                    NotNull    ] public int     PendingIoCount                 { get; set; } // int
			[Column("pending_io_byte_count"),               NotNull    ] public long    PendingIoByteCount             { get; set; } // bigint
			[Column("pending_io_byte_average"),             NotNull    ] public int     PendingIoByteAverage           { get; set; } // int
			[Column("wait_started_ms_ticks"),               NotNull    ] public long    WaitStartedMsTicks             { get; set; } // bigint
			[Column("wait_resumed_ms_ticks"),               NotNull    ] public long    WaitResumedMsTicks             { get; set; } // bigint
			[Column("task_bound_ms_ticks"),                 NotNull    ] public long    TaskBoundMsTicks               { get; set; } // bigint
			[Column("worker_created_ms_ticks"),             NotNull    ] public long    WorkerCreatedMsTicks           { get; set; } // bigint
			[Column("exception_num"),                       NotNull    ] public int     ExceptionNum                   { get; set; } // int
			[Column("exception_severity"),                  NotNull    ] public int     ExceptionSeverity              { get; set; } // int
			[Column("exception_address"),                      Nullable] public byte[]? ExceptionAddress               { get; set; } // varbinary(8)
			[Column("affinity"),                            NotNull    ] public long    Affinity                       { get; set; } // bigint
			[Column("state"),                                  Nullable] public string? State                          { get; set; } // nvarchar(60)
			[Column("start_quantum"),                       NotNull    ] public long    StartQuantum                   { get; set; } // bigint
			[Column("end_quantum"),                         NotNull    ] public long    EndQuantum                     { get; set; } // bigint
			[Column("last_wait_type"),                         Nullable] public string? LastWaitType                   { get; set; } // nvarchar(60)
			[Column("return_code"),                         NotNull    ] public int     ReturnCode                     { get; set; } // int
			[Column("quantum_used"),                        NotNull    ] public long    QuantumUsed                    { get; set; } // bigint
			[Column("max_quantum"),                         NotNull    ] public long    MaxQuantum                     { get; set; } // bigint
			[Column("boost_count"),                         NotNull    ] public int     BoostCount                     { get; set; } // int
			[Column("tasks_processed_count"),               NotNull    ] public int     TasksProcessedCount            { get; set; } // int
			[Column("fiber_address"),                          Nullable] public byte[]? FiberAddress                   { get; set; } // varbinary(8)
			[Column("task_address"),                           Nullable] public byte[]? TaskAddress                    { get; set; } // varbinary(8)
			[Column("memory_object_address"),               NotNull    ] public byte[]  MemoryObjectAddress            { get; set; } = null!; // varbinary(8)
			[Column("thread_address"),                         Nullable] public byte[]? ThreadAddress                  { get; set; } // varbinary(8)
			[Column("signal_worker_address"),                  Nullable] public byte[]? SignalWorkerAddress            { get; set; } // varbinary(8)
			[Column("scheduler_address"),                      Nullable] public byte[]? SchedulerAddress               { get; set; } // varbinary(8)
			[Column("processor_group"),                     NotNull    ] public short   ProcessorGroup                 { get; set; } // smallint
			[Column("worker_migration_count"),              NotNull    ] public int     WorkerMigrationCount           { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_pal_cpu_stats", IsView=true)]
		public partial class DmPalCpuStats
		{
			[Column("uptime_secs"),        NotNull] public long   UptimeSecs       { get; set; } // bigint
			[Column("loadavg_1min"),       NotNull] public double Loadavg1min      { get; set; } // float
			[Column("user_time_cs"),       NotNull] public long   UserTimeCs       { get; set; } // bigint
			[Column("nice_time_cs"),       NotNull] public long   NiceTimeCs       { get; set; } // bigint
			[Column("system_time_cs"),     NotNull] public long   SystemTimeCs     { get; set; } // bigint
			[Column("idle_time_cs"),       NotNull] public long   IdleTimeCs       { get; set; } // bigint
			[Column("iowait_time_cs"),     NotNull] public long   IowaitTimeCs     { get; set; } // bigint
			[Column("irq_time_cs"),        NotNull] public long   IrqTimeCs        { get; set; } // bigint
			[Column("softirq_time_cs"),    NotNull] public long   SoftirqTimeCs    { get; set; } // bigint
			[Column("interrupt_cnt"),      NotNull] public long   InterruptCnt     { get; set; } // bigint
			[Column("csw_cnt"),            NotNull] public long   CswCnt           { get; set; } // bigint
			[Column("boot_time_secs"),     NotNull] public long   BootTimeSecs     { get; set; } // bigint
			[Column("total_forks_cnt"),    NotNull] public long   TotalForksCnt    { get; set; } // bigint
			[Column("proc_runable_cnt"),   NotNull] public long   ProcRunableCnt   { get; set; } // bigint
			[Column("proc_ioblocked_cnt"), NotNull] public long   ProcIoblockedCnt { get; set; } // bigint
			[Column("C3_time"),            NotNull] public long   C3Time           { get; set; } // bigint
			[Column("C2_time"),            NotNull] public long   C2Time           { get; set; } // bigint
			[Column("C1_time"),            NotNull] public long   C1Time           { get; set; } // bigint
			[Column("C3_count"),           NotNull] public long   C3Count          { get; set; } // bigint
			[Column("C2_count"),           NotNull] public long   C2Count          { get; set; } // bigint
			[Column("C1_count"),           NotNull] public long   C1Count          { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_pal_disk_stats", IsView=true)]
		public partial class DmPalDiskStats
		{
			[Column("dev_name"),            NotNull] public string DevName          { get; set; } = null!; // nvarchar(256)
			[Column("major_num"),           NotNull] public long   MajorNum         { get; set; } // bigint
			[Column("minor_num"),           NotNull] public long   MinorNum         { get; set; } // bigint
			[Column("reads_completed"),     NotNull] public long   ReadsCompleted   { get; set; } // bigint
			[Column("reads_merged"),        NotNull] public long   ReadsMerged      { get; set; } // bigint
			[Column("sectors_read"),        NotNull] public long   SectorsRead      { get; set; } // bigint
			[Column("read_time_ms"),        NotNull] public long   ReadTimeMs       { get; set; } // bigint
			[Column("writes_completed"),    NotNull] public long   WritesCompleted  { get; set; } // bigint
			[Column("writes_merged"),       NotNull] public long   WritesMerged     { get; set; } // bigint
			[Column("sectors_written"),     NotNull] public long   SectorsWritten   { get; set; } // bigint
			[Column("write_time_ms"),       NotNull] public long   WriteTimeMs      { get; set; } // bigint
			[Column("ios_in_progess"),      NotNull] public long   IosInProgess     { get; set; } // bigint
			[Column("io_time_ms"),          NotNull] public long   IoTimeMs         { get; set; } // bigint
			[Column("weighted_io_time_ms"), NotNull] public long   WeightedIoTimeMs { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_pal_net_stats", IsView=true)]
		public partial class DmPalNetStats
		{
			[Column("interface"),    NotNull] public string @interface  { get; set; } = null!; // nvarchar(256)
			[Column("recv_bytes"),   NotNull] public long   RecvBytes   { get; set; } // bigint
			[Column("recv_packets"), NotNull] public long   RecvPackets { get; set; } // bigint
			[Column("errors"),       NotNull] public long   Errors      { get; set; } // bigint
			[Column("drops"),        NotNull] public long   Drops       { get; set; } // bigint
			[Column("fifo"),         NotNull] public long   Fifo        { get; set; } // bigint
			[Column("frame"),        NotNull] public long   Frame       { get; set; } // bigint
			[Column("compressed"),   NotNull] public long   Compressed  { get; set; } // bigint
			[Column("multicast"),    NotNull] public long   Multicast   { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_pal_processes", IsView=true)]
		public partial class DmPalProcesses
		{
			[Column("process_id"),           NotNull] public long   ProcessID         { get; set; } // bigint
			[Column("process_name"),         NotNull] public string ProcessName       { get; set; } = null!; // nvarchar(256)
			[Column("processor_time"),       NotNull] public long   ProcessorTime     { get; set; } // bigint
			[Column("user_time"),            NotNull] public long   UserTime          { get; set; } // bigint
			[Column("privileged_time"),      NotNull] public long   PrivilegedTime    { get; set; } // bigint
			[Column("virtual_bytes_peak"),   NotNull] public long   VirtualBytesPeak  { get; set; } // bigint
			[Column("virtual_bytes"),        NotNull] public long   VirtualBytes      { get; set; } // bigint
			[Column("working_set_peak"),     NotNull] public long   WorkingSetPeak    { get; set; } // bigint
			[Column("working_set"),          NotNull] public long   WorkingSet        { get; set; } // bigint
			[Column("page_file_bytes_peak"), NotNull] public long   PageFileBytesPeak { get; set; } // bigint
			[Column("page_file_bytes"),      NotNull] public long   PageFileBytes     { get; set; } // bigint
			[Column("private_bytes"),        NotNull] public long   PrivateBytes      { get; set; } // bigint
			[Column("thread_count"),         NotNull] public long   ThreadCount       { get; set; } // bigint
			[Column("elapsed_time"),         NotNull] public long   ElapsedTime       { get; set; } // bigint
			[Column("pool_paged_bytes"),     NotNull] public long   PoolPagedBytes    { get; set; } // bigint
			[Column("handle_count"),         NotNull] public long   HandleCount       { get; set; } // bigint
			[Column("io_read_operations"),   NotNull] public long   IoReadOperations  { get; set; } // bigint
			[Column("io_write_operations"),  NotNull] public long   IoWriteOperations { get; set; } // bigint
			[Column("io_read_bytes"),        NotNull] public long   IoReadBytes       { get; set; } // bigint
			[Column("io_write_bytes"),       NotNull] public long   IoWriteBytes      { get; set; } // bigint
			[Column("working_set_private"),  NotNull] public long   WorkingSetPrivate { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_pal_spinlock_stats", IsView=true)]
		public partial class DmPalSpinlockStats
		{
			[Column("name"),                NotNull] public string Name              { get; set; } = null!; // nvarchar(256)
			[Column("collisions"),          NotNull] public long   Collisions        { get; set; } // bigint
			[Column("spins"),               NotNull] public long   Spins             { get; set; } // bigint
			[Column("spins_per_collision"), NotNull] public double SpinsPerCollision { get; set; } // float
			[Column("sleep_time"),          NotNull] public long   SleepTime         { get; set; } // bigint
			[Column("backoffs"),            NotNull] public long   Backoffs          { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_pal_vm_stats", IsView=true)]
		public partial class DmPalVmStats
		{
			[Column("vm_metric_name"), NotNull] public string VmMetricName { get; set; } = null!; // nvarchar(256)
			[Column("count"),          NotNull] public long   Count        { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_pal_wait_stats", IsView=true)]
		public partial class DmPalWaitStats
		{
			[Column("wait_type"),             NotNull] public string WaitType            { get; set; } = null!; // nvarchar(256)
			[Column("waiting_threads_count"), NotNull] public long   WaitingThreadsCount { get; set; } // bigint
			[Column("wait_time_ms"),          NotNull] public long   WaitTimeMs          { get; set; } // bigint
			[Column("max_wait_time_ms"),      NotNull] public long   MaxWaitTimeMs       { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_qn_subscriptions", IsView=true)]
		public partial class DmQnSubscriptions
		{
			[Column("id"),          NotNull] public int      Id         { get; set; } // int
			[Column("database_id"), NotNull] public int      DatabaseID { get; set; } // int
			[Column("sid"),         NotNull] public byte[]   Sid        { get; set; } = null!; // varbinary(85)
			[Column("object_id"),   NotNull] public int      ObjectID   { get; set; } // int
			[Column("created"),     NotNull] public DateTime Created    { get; set; } // datetime
			[Column("timeout"),     NotNull] public int      Timeout    { get; set; } // int
			[Column("status"),      NotNull] public int      Status     { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="DmQnSubscriptions")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="dm_repl_articles", IsView=true)]
		public partial class DmReplArticles
		{
			[Column("artcache_db_address"),      Nullable] public byte[]? ArtcacheDbAddress      { get; set; } // varbinary(8)
			[Column("artcache_table_address"),   Nullable] public byte[]? ArtcacheTableAddress   { get; set; } // varbinary(8)
			[Column("artcache_schema_address"),  Nullable] public byte[]? ArtcacheSchemaAddress  { get; set; } // varbinary(8)
			[Column("artcache_article_address"), Nullable] public byte[]? ArtcacheArticleAddress { get; set; } // varbinary(8)
			[Column("artid"),                    Nullable] public int?    Artid                  { get; set; } // int
			[Column("artfilter"),                Nullable] public int?    Artfilter              { get; set; } // int
			[Column("artobjid"),                 Nullable] public int?    Artobjid               { get; set; } // int
			[Column("artpubid"),                 Nullable] public int?    Artpubid               { get; set; } // int
			[Column("artstatus"),                Nullable] public byte?   Artstatus              { get; set; } // tinyint
			[Column("arttype"),                  Nullable] public byte?   Arttype                { get; set; } // tinyint
			[Column("wszArtdesttable"),          Nullable] public string? WszArtdesttable        { get; set; } // nvarchar(256)
			[Column("wszArtdesttableowner"),     Nullable] public string? WszArtdesttableowner   { get; set; } // nvarchar(256)
			[Column("wszArtinscmd"),             Nullable] public string? WszArtinscmd           { get; set; } // nvarchar(258)
			[Column("cmdTypeIns"),               Nullable] public int?    CmdTypeIns             { get; set; } // int
			[Column("wszArtdelcmd"),             Nullable] public string? WszArtdelcmd           { get; set; } // nvarchar(258)
			[Column("cmdTypeDel"),               Nullable] public int?    CmdTypeDel             { get; set; } // int
			[Column("wszArtupdcmd"),             Nullable] public string? WszArtupdcmd           { get; set; } // nvarchar(258)
			[Column("cmdTypeUpd"),               Nullable] public int?    CmdTypeUpd             { get; set; } // int
			[Column("wszArtpartialupdcmd"),      Nullable] public string? WszArtpartialupdcmd    { get; set; } // nvarchar(258)
			[Column("cmdTypePartialUpd"),        Nullable] public int?    CmdTypePartialUpd      { get; set; } // int
			[Column("numcol"),                   Nullable] public int?    Numcol                 { get; set; } // int
			[Column("artcmdtype"),               Nullable] public byte?   Artcmdtype             { get; set; } // tinyint
			[Column("artgeninscmd"),             Nullable] public string? Artgeninscmd           { get; set; } // nvarchar(4000)
			[Column("artgendelcmd"),             Nullable] public string? Artgendelcmd           { get; set; } // nvarchar(4000)
			[Column("artgenupdcmd"),             Nullable] public string? Artgenupdcmd           { get; set; } // nvarchar(4000)
			[Column("artpartialupdcmd"),         Nullable] public string? Artpartialupdcmd       { get; set; } // nvarchar(4000)
			[Column("artupdtxtcmd"),             Nullable] public string? Artupdtxtcmd           { get; set; } // nvarchar(4000)
			[Column("artgenins2cmd"),            Nullable] public string? Artgenins2cmd          { get; set; } // nvarchar(4000)
			[Column("artgendel2cmd"),            Nullable] public string? Artgendel2cmd          { get; set; } // nvarchar(4000)
			[Column("fInReconcile"),             Nullable] public byte?   FInReconcile           { get; set; } // tinyint
			[Column("fPubAllowUpdate"),          Nullable] public byte?   FPubAllowUpdate        { get; set; } // tinyint
			[Column("intPublicationOptions"),    Nullable] public int?    IntPublicationOptions  { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_repl_schemas", IsView=true)]
		public partial class DmReplSchemas
		{
			[Column("artcache_schema_address"), Nullable] public byte[]? ArtcacheSchemaAddress { get; set; } // varbinary(8)
			[Column("tabid"),                   Nullable] public int?    Tabid                 { get; set; } // int
			[Column("indexid"),                 Nullable] public short?  Indexid               { get; set; } // smallint
			[Column("idSch"),                   Nullable] public int?    IdSch                 { get; set; } // int
			[Column("tabschema"),               Nullable] public string? Tabschema             { get; set; } // nvarchar(256)
			[Column("ccTabschema"),             Nullable] public short?  CcTabschema           { get; set; } // smallint
			[Column("tabname"),                 Nullable] public string? Tabname               { get; set; } // nvarchar(256)
			[Column("ccTabname"),               Nullable] public short?  CcTabname             { get; set; } // smallint
			[Column("rowsetid_delete"),         Nullable] public long?   RowsetidDelete        { get; set; } // bigint
			[Column("rowsetid_insert"),         Nullable] public long?   RowsetidInsert        { get; set; } // bigint
			[Column("num_pk_cols"),             Nullable] public int?    NumPkCols             { get; set; } // int
			[Column("pcitee"),                  Nullable] public byte[]? Pcitee                { get; set; } // varbinary(8)
			[Column("re_numtextcols"),          Nullable] public int?    ReNumtextcols         { get; set; } // int
			[Column("re_schema_lsn_begin"),     Nullable] public string? ReSchemaLsnBegin      { get; set; } // nvarchar(24)
			[Column("re_schema_lsn_end"),       Nullable] public string? ReSchemaLsnEnd        { get; set; } // nvarchar(24)
			[Column("re_numcols"),              Nullable] public int?    ReNumcols             { get; set; } // int
			[Column("re_colid"),                Nullable] public int?    ReColid               { get; set; } // int
			[Column("re_awcName"),              Nullable] public string? ReAwcName             { get; set; } // nvarchar(256)
			[Column("re_ccName"),               Nullable] public short?  ReCcName              { get; set; } // smallint
			[Column("re_colattr"),              Nullable] public short?  ReColattr             { get; set; } // smallint
			[Column("re_maxlen"),               Nullable] public short?  ReMaxlen              { get; set; } // smallint
			[Column("re_prec"),                 Nullable] public byte?   RePrec                { get; set; } // tinyint
			[Column("re_scale"),                Nullable] public byte?   ReScale               { get; set; } // tinyint
			[Column("re_collatid"),             Nullable] public int?    ReCollatid            { get; set; } // int
			[Column("re_xvtype"),               Nullable] public byte?   ReXvtype              { get; set; } // tinyint
			[Column("re_offset"),               Nullable] public int?    ReOffset              { get; set; } // int
			[Column("re_bitpos"),               Nullable] public byte?   ReBitpos              { get; set; } // tinyint
			[Column("re_fNullable"),            Nullable] public byte?   ReFNullable           { get; set; } // tinyint
			[Column("re_fAnsiTrim"),            Nullable] public byte?   ReFAnsiTrim           { get; set; } // tinyint
			[Column("re_computed"),             Nullable] public int?    ReComputed            { get; set; } // int
			[Column("se_rowsetid"),             Nullable] public long?   SeRowsetid            { get; set; } // bigint
			[Column("se_schema_lsn_begin"),     Nullable] public string? SeSchemaLsnBegin      { get; set; } // nvarchar(24)
			[Column("se_schema_lsn_end"),       Nullable] public string? SeSchemaLsnEnd        { get; set; } // nvarchar(24)
			[Column("se_numcols"),              Nullable] public int?    SeNumcols             { get; set; } // int
			[Column("se_colid"),                Nullable] public int?    SeColid               { get; set; } // int
			[Column("se_maxlen"),               Nullable] public short?  SeMaxlen              { get; set; } // smallint
			[Column("se_prec"),                 Nullable] public byte?   SePrec                { get; set; } // tinyint
			[Column("se_scale"),                Nullable] public byte?   SeScale               { get; set; } // tinyint
			[Column("se_collatid"),             Nullable] public int?    SeCollatid            { get; set; } // int
			[Column("se_xvtype"),               Nullable] public byte?   SeXvtype              { get; set; } // tinyint
			[Column("se_offset"),               Nullable] public int?    SeOffset              { get; set; } // int
			[Column("se_bitpos"),               Nullable] public byte?   SeBitpos              { get; set; } // tinyint
			[Column("se_fNullable"),            Nullable] public byte?   SeFNullable           { get; set; } // tinyint
			[Column("se_fAnsiTrim"),            Nullable] public byte?   SeFAnsiTrim           { get; set; } // tinyint
			[Column("se_computed"),             Nullable] public byte?   SeComputed            { get; set; } // tinyint
			[Column("se_nullBitInLeafRows"),    Nullable] public short?  SeNullBitInLeafRows   { get; set; } // smallint
		}

		[Table(Schema="sys", Name="dm_repl_tranhash", IsView=true)]
		public partial class DmReplTranhash
		{
			[Column("buckets"),           Nullable] public int?    Buckets          { get; set; } // int
			[Column("hashed_trans"),      Nullable] public int?    HashedTrans      { get; set; } // int
			[Column("completed_trans"),   Nullable] public int?    CompletedTrans   { get; set; } // int
			[Column("compensated_trans"), Nullable] public int?    CompensatedTrans { get; set; } // int
			[Column("first_begin_lsn"),   Nullable] public string? FirstBeginLsn    { get; set; } // nvarchar(24)
			[Column("last_commit_lsn"),   Nullable] public string? LastCommitLsn    { get; set; } // nvarchar(24)
		}

		[Table(Schema="sys", Name="dm_repl_traninfo", IsView=true)]
		public partial class DmReplTraninfo
		{
			[Column("fp2p_pub_exists"),            Nullable] public byte?     Fp2pPubExists            { get; set; } // tinyint
			[Column("db_ver"),                     Nullable] public int?      DbVer                    { get; set; } // int
			[Column("comp_range_address"),         Nullable] public byte[]?   CompRangeAddress         { get; set; } // varbinary(8)
			[Column("textinfo_address"),           Nullable] public byte[]?   TextinfoAddress          { get; set; } // varbinary(8)
			[Column("fsinfo_address"),             Nullable] public byte[]?   FsinfoAddress            { get; set; } // varbinary(8)
			[Column("begin_lsn"),                  Nullable] public string?   BeginLsn                 { get; set; } // nvarchar(24)
			[Column("commit_lsn"),                 Nullable] public string?   CommitLsn                { get; set; } // nvarchar(24)
			[Column("dbid"),                       Nullable] public short?    Dbid                     { get; set; } // smallint
			[Column("rows"),                       Nullable] public int?      Rows                     { get; set; } // int
			[Column("xdesid"),                     Nullable] public string?   Xdesid                   { get; set; } // nvarchar(24)
			[Column("artcache_table_address"),     Nullable] public byte[]?   ArtcacheTableAddress     { get; set; } // varbinary(8)
			[Column("server"),                     Nullable] public string?   Server                   { get; set; } // nvarchar(256)
			[Column("server_len_in_bytes"),        Nullable] public int?      ServerLenInBytes         { get; set; } // int
			[Column("database"),                   Nullable] public string?   Database                 { get; set; } // nvarchar(256)
			[Column("db_len_in_bytes"),            Nullable] public int?      DbLenInBytes             { get; set; } // int
			[Column("originator"),                 Nullable] public string?   Originator               { get; set; } // nvarchar(256)
			[Column("originator_len_in_bytes"),    Nullable] public int?      OriginatorLenInBytes     { get; set; } // int
			[Column("orig_db"),                    Nullable] public string?   OrigDb                   { get; set; } // nvarchar(256)
			[Column("orig_db_len_in_bytes"),       Nullable] public int?      OrigDbLenInBytes         { get; set; } // int
			[Column("cmds_in_tran"),               Nullable] public int?      CmdsInTran               { get; set; } // int
			[Column("is_boundedupdate_singleton"), Nullable] public byte?     IsBoundedupdateSingleton { get; set; } // tinyint
			[Column("begin_update_lsn"),           Nullable] public string?   BeginUpdateLsn           { get; set; } // nvarchar(24)
			[Column("delete_lsn"),                 Nullable] public string?   DeleteLsn                { get; set; } // nvarchar(24)
			[Column("last_end_lsn"),               Nullable] public string?   LastEndLsn               { get; set; } // nvarchar(24)
			[Column("fcomplete"),                  Nullable] public byte?     Fcomplete                { get; set; } // tinyint
			[Column("fcompensated"),               Nullable] public byte?     Fcompensated             { get; set; } // tinyint
			[Column("fprocessingtext"),            Nullable] public byte?     Fprocessingtext          { get; set; } // tinyint
			[Column("max_cmds_in_tran"),           Nullable] public int?      MaxCmdsInTran            { get; set; } // int
			[Column("begin_time"),                 Nullable] public DateTime? BeginTime                { get; set; } // datetime
			[Column("commit_time"),                Nullable] public DateTime? CommitTime               { get; set; } // datetime
			[Column("session_id"),                 Nullable] public int?      SessionID                { get; set; } // int
			[Column("session_phase"),              Nullable] public string?   SessionPhase             { get; set; } // nvarchar(200)
			[Column("is_known_cdc_tran"),          Nullable] public byte?     IsKnownCdcTran           { get; set; } // tinyint
			[Column("error_count"),                Nullable] public int?      ErrorCount               { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_resource_governor_configuration", IsView=true)]
		public partial class DmResourceGovernorConfiguration
		{
			[Column("classifier_function_id"),        NotNull] public int  ClassifierFunctionID      { get; set; } // int
			[Column("is_reconfiguration_pending"),    NotNull] public byte IsReconfigurationPending  { get; set; } // tinyint
			[Column("max_outstanding_io_per_volume"), NotNull] public int  MaxOutstandingIoPerVolume { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_resource_governor_external_resource_pool_affinity", IsView=true)]
		public partial class DmResourceGovernorExternalResourcePoolAffinity
		{
			[Column("external_pool_id"), NotNull] public int   ExternalPoolID { get; set; } // int
			[Column("processor_group"),  NotNull] public short ProcessorGroup { get; set; } // smallint
			[Column("cpu_mask"),         NotNull] public long  CpuMask        { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_resource_governor_external_resource_pools", IsView=true)]
		public partial class DmResourceGovernorExternalResourcePools
		{
			[Column("external_pool_id"),       NotNull] public int      ExternalPoolID       { get; set; } // int
			[Column("name"),                   NotNull] public string   Name                 { get; set; } = null!; // nvarchar(256)
			[Column("pool_version"),           NotNull] public long     PoolVersion          { get; set; } // bigint
			[Column("max_cpu_percent"),        NotNull] public int      MaxCpuPercent        { get; set; } // int
			[Column("max_processes"),          NotNull] public int      MaxProcesses         { get; set; } // int
			[Column("max_memory_percent"),     NotNull] public int      MaxMemoryPercent     { get; set; } // int
			[Column("statistics_start_time"),  NotNull] public DateTime StatisticsStartTime  { get; set; } // datetime
			[Column("peak_memory_kb"),         NotNull] public long     PeakMemoryKb         { get; set; } // bigint
			[Column("write_io_count"),         NotNull] public long     WriteIoCount         { get; set; } // bigint
			[Column("read_io_count"),          NotNull] public long     ReadIoCount          { get; set; } // bigint
			[Column("total_cpu_kernel_ms"),    NotNull] public long     TotalCpuKernelMs     { get; set; } // bigint
			[Column("total_cpu_user_ms"),      NotNull] public long     TotalCpuUserMs       { get; set; } // bigint
			[Column("active_processes_count"), NotNull] public long     ActiveProcessesCount { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_resource_governor_resource_pool_affinity", IsView=true)]
		public partial class DmResourceGovernorResourcePoolAffinity
		{
			[Column("pool_id"),         NotNull] public int   PoolID         { get; set; } // int
			[Column("processor_group"), NotNull] public short ProcessorGroup { get; set; } // smallint
			[Column("scheduler_mask"),  NotNull] public long  SchedulerMask  { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_resource_governor_resource_pools", IsView=true)]
		public partial class DmResourceGovernorResourcePools
		{
			[Column("pool_id"),                               NotNull    ] public int      PoolID                          { get; set; } // int
			[Column("name"),                                  NotNull    ] public string   Name                            { get; set; } = null!; // nvarchar(256)
			[Column("statistics_start_time"),                 NotNull    ] public DateTime StatisticsStartTime             { get; set; } // datetime
			[Column("total_cpu_usage_ms"),                    NotNull    ] public long     TotalCpuUsageMs                 { get; set; } // bigint
			[Column("cache_memory_kb"),                       NotNull    ] public long     CacheMemoryKb                   { get; set; } // bigint
			[Column("compile_memory_kb"),                     NotNull    ] public long     CompileMemoryKb                 { get; set; } // bigint
			[Column("used_memgrant_kb"),                      NotNull    ] public long     UsedMemgrantKb                  { get; set; } // bigint
			[Column("total_memgrant_count"),                  NotNull    ] public long     TotalMemgrantCount              { get; set; } // bigint
			[Column("total_memgrant_timeout_count"),          NotNull    ] public long     TotalMemgrantTimeoutCount       { get; set; } // bigint
			[Column("active_memgrant_count"),                 NotNull    ] public int      ActiveMemgrantCount             { get; set; } // int
			[Column("active_memgrant_kb"),                    NotNull    ] public long     ActiveMemgrantKb                { get; set; } // bigint
			[Column("memgrant_waiter_count"),                 NotNull    ] public int      MemgrantWaiterCount             { get; set; } // int
			[Column("max_memory_kb"),                         NotNull    ] public long     MaxMemoryKb                     { get; set; } // bigint
			[Column("used_memory_kb"),                        NotNull    ] public long     UsedMemoryKb                    { get; set; } // bigint
			[Column("target_memory_kb"),                      NotNull    ] public long     TargetMemoryKb                  { get; set; } // bigint
			[Column("out_of_memory_count"),                   NotNull    ] public long     OutOfMemoryCount                { get; set; } // bigint
			[Column("min_cpu_percent"),                       NotNull    ] public int      MinCpuPercent                   { get; set; } // int
			[Column("max_cpu_percent"),                       NotNull    ] public int      MaxCpuPercent                   { get; set; } // int
			[Column("min_memory_percent"),                    NotNull    ] public int      MinMemoryPercent                { get; set; } // int
			[Column("max_memory_percent"),                    NotNull    ] public int      MaxMemoryPercent                { get; set; } // int
			[Column("cap_cpu_percent"),                       NotNull    ] public int      CapCpuPercent                   { get; set; } // int
			[Column("min_iops_per_volume"),                      Nullable] public int?     MinIopsPerVolume                { get; set; } // int
			[Column("max_iops_per_volume"),                      Nullable] public int?     MaxIopsPerVolume                { get; set; } // int
			[Column("read_io_queued_total"),                     Nullable] public int?     ReadIoQueuedTotal               { get; set; } // int
			[Column("read_io_issued_total"),                     Nullable] public int?     ReadIoIssuedTotal               { get; set; } // int
			[Column("read_io_completed_total"),               NotNull    ] public int      ReadIoCompletedTotal            { get; set; } // int
			[Column("read_io_throttled_total"),                  Nullable] public int?     ReadIoThrottledTotal            { get; set; } // int
			[Column("read_bytes_total"),                      NotNull    ] public long     ReadBytesTotal                  { get; set; } // bigint
			[Column("read_io_stall_total_ms"),                NotNull    ] public long     ReadIoStallTotalMs              { get; set; } // bigint
			[Column("read_io_stall_queued_ms"),                  Nullable] public long?    ReadIoStallQueuedMs             { get; set; } // bigint
			[Column("write_io_queued_total"),                    Nullable] public int?     WriteIoQueuedTotal              { get; set; } // int
			[Column("write_io_issued_total"),                    Nullable] public int?     WriteIoIssuedTotal              { get; set; } // int
			[Column("write_io_completed_total"),              NotNull    ] public int      WriteIoCompletedTotal           { get; set; } // int
			[Column("write_io_throttled_total"),                 Nullable] public int?     WriteIoThrottledTotal           { get; set; } // int
			[Column("write_bytes_total"),                     NotNull    ] public long     WriteBytesTotal                 { get; set; } // bigint
			[Column("write_io_stall_total_ms"),               NotNull    ] public long     WriteIoStallTotalMs             { get; set; } // bigint
			[Column("write_io_stall_queued_ms"),                 Nullable] public long?    WriteIoStallQueuedMs            { get; set; } // bigint
			[Column("io_issue_violations_total"),                Nullable] public int?     IoIssueViolationsTotal          { get; set; } // int
			[Column("io_issue_delay_total_ms"),                  Nullable] public long?    IoIssueDelayTotalMs             { get; set; } // bigint
			[Column("io_issue_ahead_total_ms"),                  Nullable] public long?    IoIssueAheadTotalMs             { get; set; } // bigint
			[Column("reserved_io_limited_by_volume_total"),      Nullable] public int?     ReservedIoLimitedByVolumeTotal  { get; set; } // int
			[Column("io_issue_delay_non_throttled_total_ms"),    Nullable] public long?    IoIssueDelayNonThrottledTotalMs { get; set; } // bigint
			[Column("total_cpu_delayed_ms"),                  NotNull    ] public long     TotalCpuDelayedMs               { get; set; } // bigint
			[Column("total_cpu_active_ms"),                   NotNull    ] public long     TotalCpuActiveMs                { get; set; } // bigint
			[Column("total_cpu_violation_delay_ms"),          NotNull    ] public long     TotalCpuViolationDelayMs        { get; set; } // bigint
			[Column("total_cpu_violation_sec"),               NotNull    ] public long     TotalCpuViolationSec            { get; set; } // bigint
			[Column("total_cpu_usage_preemptive_ms"),         NotNull    ] public long     TotalCpuUsagePreemptiveMs       { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_resource_governor_resource_pool_volumes", IsView=true)]
		public partial class DmResourceGovernorResourcePoolVolumes
		{
			[Column("pool_id"),                               NotNull    ] public int    PoolID                          { get; set; } // int
			[Column("volume_name"),                           NotNull    ] public string VolumeName                      { get; set; } = null!; // nvarchar(256)
			[Column("read_io_queued_total"),                  NotNull    ] public int    ReadIoQueuedTotal               { get; set; } // int
			[Column("read_io_issued_total"),                  NotNull    ] public int    ReadIoIssuedTotal               { get; set; } // int
			[Column("read_io_completed_total"),               NotNull    ] public int    ReadIoCompletedTotal            { get; set; } // int
			[Column("read_io_throttled_total"),               NotNull    ] public int    ReadIoThrottledTotal            { get; set; } // int
			[Column("read_bytes_total"),                      NotNull    ] public long   ReadBytesTotal                  { get; set; } // bigint
			[Column("read_io_stall_total_ms"),                NotNull    ] public long   ReadIoStallTotalMs              { get; set; } // bigint
			[Column("read_io_stall_queued_ms"),               NotNull    ] public long   ReadIoStallQueuedMs             { get; set; } // bigint
			[Column("write_io_queued_total"),                 NotNull    ] public int    WriteIoQueuedTotal              { get; set; } // int
			[Column("write_io_issued_total"),                 NotNull    ] public int    WriteIoIssuedTotal              { get; set; } // int
			[Column("write_io_completed_total"),              NotNull    ] public int    WriteIoCompletedTotal           { get; set; } // int
			[Column("write_io_throttled_total"),              NotNull    ] public int    WriteIoThrottledTotal           { get; set; } // int
			[Column("write_bytes_total"),                     NotNull    ] public long   WriteBytesTotal                 { get; set; } // bigint
			[Column("write_io_stall_total_ms"),               NotNull    ] public long   WriteIoStallTotalMs             { get; set; } // bigint
			[Column("write_io_stall_queued_ms"),              NotNull    ] public long   WriteIoStallQueuedMs            { get; set; } // bigint
			[Column("io_issue_violations_total"),             NotNull    ] public int    IoIssueViolationsTotal          { get; set; } // int
			[Column("io_issue_delay_total_ms"),               NotNull    ] public long   IoIssueDelayTotalMs             { get; set; } // bigint
			[Column("io_issue_ahead_total_ms"),               NotNull    ] public long   IoIssueAheadTotalMs             { get; set; } // bigint
			[Column("reserved_io_limited_by_volume_total"),   NotNull    ] public int    ReservedIoLimitedByVolumeTotal  { get; set; } // int
			[Column("io_issue_delay_non_throttled_total_ms"),    Nullable] public long?  IoIssueDelayNonThrottledTotalMs { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_resource_governor_workload_groups", IsView=true)]
		public partial class DmResourceGovernorWorkloadGroups
		{
			[Column("group_id"),                                 NotNull    ] public int      GroupID                             { get; set; } // int
			[Column("name"),                                     NotNull    ] public string   Name                                { get; set; } = null!; // nvarchar(256)
			[Column("pool_id"),                                  NotNull    ] public int      PoolID                              { get; set; } // int
			[Column("external_pool_id"),                            Nullable] public int?     ExternalPoolID                      { get; set; } // int
			[Column("statistics_start_time"),                    NotNull    ] public DateTime StatisticsStartTime                 { get; set; } // datetime
			[Column("total_request_count"),                      NotNull    ] public long     TotalRequestCount                   { get; set; } // bigint
			[Column("total_queued_request_count"),               NotNull    ] public long     TotalQueuedRequestCount             { get; set; } // bigint
			[Column("active_request_count"),                     NotNull    ] public int      ActiveRequestCount                  { get; set; } // int
			[Column("queued_request_count"),                     NotNull    ] public int      QueuedRequestCount                  { get; set; } // int
			[Column("total_cpu_limit_violation_count"),          NotNull    ] public long     TotalCpuLimitViolationCount         { get; set; } // bigint
			[Column("total_cpu_usage_ms"),                       NotNull    ] public long     TotalCpuUsageMs                     { get; set; } // bigint
			[Column("max_request_cpu_time_ms"),                  NotNull    ] public long     MaxRequestCpuTimeMs                 { get; set; } // bigint
			[Column("blocked_task_count"),                       NotNull    ] public int      BlockedTaskCount                    { get; set; } // int
			[Column("total_lock_wait_count"),                    NotNull    ] public long     TotalLockWaitCount                  { get; set; } // bigint
			[Column("total_lock_wait_time_ms"),                  NotNull    ] public long     TotalLockWaitTimeMs                 { get; set; } // bigint
			[Column("total_query_optimization_count"),           NotNull    ] public long     TotalQueryOptimizationCount         { get; set; } // bigint
			[Column("total_suboptimal_plan_generation_count"),   NotNull    ] public long     TotalSuboptimalPlanGenerationCount  { get; set; } // bigint
			[Column("total_reduced_memgrant_count"),             NotNull    ] public long     TotalReducedMemgrantCount           { get; set; } // bigint
			[Column("max_request_grant_memory_kb"),              NotNull    ] public long     MaxRequestGrantMemoryKb             { get; set; } // bigint
			[Column("active_parallel_thread_count"),             NotNull    ] public long     ActiveParallelThreadCount           { get; set; } // bigint
			[Column("importance"),                               NotNull    ] public string   Importance                          { get; set; } = null!; // nvarchar(256)
			[Column("request_max_memory_grant_percent"),         NotNull    ] public int      RequestMaxMemoryGrantPercent        { get; set; } // int
			[Column("request_max_cpu_time_sec"),                 NotNull    ] public int      RequestMaxCpuTimeSec                { get; set; } // int
			[Column("request_memory_grant_timeout_sec"),         NotNull    ] public int      RequestMemoryGrantTimeoutSec        { get; set; } // int
			[Column("group_max_requests"),                       NotNull    ] public int      GroupMaxRequests                    { get; set; } // int
			[Column("max_dop"),                                  NotNull    ] public int      MaxDop                              { get; set; } // int
			[Column("effective_max_dop"),                        NotNull    ] public int      EffectiveMaxDop                     { get; set; } // int
			[Column("total_cpu_usage_preemptive_ms"),            NotNull    ] public long     TotalCpuUsagePreemptiveMs           { get; set; } // bigint
			[Column("request_max_memory_grant_percent_numeric"), NotNull    ] public double   RequestMaxMemoryGrantPercentNumeric { get; set; } // float
		}

		[Table(Schema="sys", Name="dm_server_audit_status", IsView=true)]
		public partial class DmServerAuditStatus
		{
			[Column("audit_id"),              NotNull    ] public int      AuditID             { get; set; } // int
			[Column("name"),                  NotNull    ] public string   Name                { get; set; } = null!; // nvarchar(256)
			[Column("status"),                NotNull    ] public short    Status              { get; set; } // smallint
			[Column("status_desc"),           NotNull    ] public string   StatusDesc          { get; set; } = null!; // nvarchar(256)
			[Column("status_time"),           NotNull    ] public DateTime StatusTime          { get; set; } // datetime2(7)
			[Column("event_session_address"),    Nullable] public byte[]?  EventSessionAddress { get; set; } // varbinary(8)
			[Column("audit_file_path"),          Nullable] public string?  AuditFilePath       { get; set; } // nvarchar(256)
			[Column("audit_file_size"),          Nullable] public long?    AuditFileSize       { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_server_memory_dumps", IsView=true)]
		public partial class DmServerMemoryDumps
		{
			[Column("filename"),      NotNull    ] public string         Filename     { get; set; } = null!; // nvarchar(256)
			[Column("creation_time"), NotNull    ] public DateTimeOffset CreationTime { get; set; } // datetimeoffset(7)
			[Column("size_in_bytes"),    Nullable] public long?          SizeInBytes  { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_server_registry", IsView=true)]
		public partial class DmServerRegistry
		{
			[Column("registry_key"), Nullable] public string? RegistryKey { get; set; } // nvarchar(256)
			[Column("value_name"),   Nullable] public string? ValueName   { get; set; } // nvarchar(256)
			[Column("value_data"),   Nullable] public object? ValueData   { get; set; } // sql_variant
		}

		[Table(Schema="sys", Name="dm_server_services", IsView=true)]
		public partial class DmServerServices
		{
			[Column("servicename"),                         NotNull    ] public string          Servicename                      { get; set; } = null!; // nvarchar(256)
			[Column("startup_type"),                           Nullable] public int?            StartupType                      { get; set; } // int
			[Column("startup_type_desc"),                   NotNull    ] public string          StartupTypeDesc                  { get; set; } = null!; // nvarchar(256)
			[Column("status"),                                 Nullable] public int?            Status                           { get; set; } // int
			[Column("status_desc"),                         NotNull    ] public string          StatusDesc                       { get; set; } = null!; // nvarchar(256)
			[Column("process_id"),                             Nullable] public int?            ProcessID                        { get; set; } // int
			[Column("last_startup_time"),                      Nullable] public DateTimeOffset? LastStartupTime                  { get; set; } // datetimeoffset(7)
			[Column("service_account"),                     NotNull    ] public string          ServiceAccount                   { get; set; } = null!; // nvarchar(256)
			[Column("filename"),                            NotNull    ] public string          Filename                         { get; set; } = null!; // nvarchar(256)
			[Column("is_clustered"),                        NotNull    ] public string          IsClustered                      { get; set; } = null!; // nvarchar(1)
			[Column("cluster_nodename"),                       Nullable] public string?         ClusterNodename                  { get; set; } // nvarchar(256)
			[Column("instant_file_initialization_enabled"), NotNull    ] public string          InstantFileInitializationEnabled { get; set; } = null!; // nvarchar(1)
		}

		[Table(Schema="sys", Name="dm_tcp_listener_states", IsView=true)]
		public partial class DmTcpListenerStates
		{
			[Column("listener_id"), NotNull] public int      ListenerID { get; set; } // int
			[Column("ip_address"),  NotNull] public string   IpAddress  { get; set; } = null!; // nvarchar(48)
			[Column("is_ipv4"),     NotNull] public bool     IsIpv4     { get; set; } // bit
			[Column("port"),        NotNull] public int      Port       { get; set; } // int
			[Column("type"),        NotNull] public short    Type       { get; set; } // smallint
			[Column("type_desc"),   NotNull] public string   TypeDesc   { get; set; } = null!; // nvarchar(20)
			[Column("state"),       NotNull] public short    State      { get; set; } // smallint
			[Column("state_desc"),  NotNull] public string   StateDesc  { get; set; } = null!; // nvarchar(16)
			[Column("start_time"),  NotNull] public DateTime StartTime  { get; set; } // datetime
		}

		[Table(Schema="sys", Name="dm_tran_aborted_transactions", IsView=true)]
		public partial class DmTranAbortedTransactions
		{
			[Column("transaction_id"), NotNull    ] public long      TransactionID { get; set; } // bigint
			[Column("database_id"),    NotNull    ] public short     DatabaseID    { get; set; } // smallint
			[Column("begin_xact_lsn"),    Nullable] public decimal?  BeginXactLsn  { get; set; } // numeric(25,0)
			[Column("end_xact_lsn"),      Nullable] public decimal?  EndXactLsn    { get; set; } // numeric(25,0)
			[Column("begin_time"),        Nullable] public DateTime? BeginTime     { get; set; } // datetime
			[Column("nest_aborted"),      Nullable] public bool?     NestAborted   { get; set; } // bit
		}

		[Table(Schema="sys", Name="dm_tran_active_snapshot_database_transactions", IsView=true)]
		public partial class DmTranActiveSnapshotDatabaseTransactions
		{
			[Column("transaction_id"),                  Nullable] public long?   TransactionID                { get; set; } // bigint
			[Column("transaction_sequence_num"),        Nullable] public long?   TransactionSequenceNum       { get; set; } // bigint
			[Column("commit_sequence_num"),             Nullable] public long?   CommitSequenceNum            { get; set; } // bigint
			[Column("session_id"),                      Nullable] public int?    SessionID                    { get; set; } // int
			[Column("is_snapshot"),                     Nullable] public bool?   IsSnapshot                   { get; set; } // bit
			[Column("first_snapshot_sequence_num"),     Nullable] public long?   FirstSnapshotSequenceNum     { get; set; } // bigint
			[Column("max_version_chain_traversed"),     Nullable] public int?    MaxVersionChainTraversed     { get; set; } // int
			[Column("average_version_chain_traversed"), Nullable] public double? AverageVersionChainTraversed { get; set; } // float
			[Column("elapsed_time_seconds"),            Nullable] public long?   ElapsedTimeSeconds           { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_tran_active_transactions", IsView=true)]
		public partial class DmTranActiveTransactions
		{
			[Column("transaction_id"),            NotNull    ] public long     TransactionID           { get; set; } // bigint
			[Column("name"),                      NotNull    ] public string   Name                    { get; set; } = null!; // nvarchar(32)
			[Column("transaction_begin_time"),    NotNull    ] public DateTime TransactionBeginTime    { get; set; } // datetime
			[Column("transaction_type"),          NotNull    ] public int      TransactionType         { get; set; } // int
			[Column("transaction_uow"),              Nullable] public Guid?    TransactionUow          { get; set; } // uniqueidentifier
			[Column("transaction_state"),         NotNull    ] public int      TransactionState        { get; set; } // int
			[Column("transaction_status"),        NotNull    ] public int      TransactionStatus       { get; set; } // int
			[Column("transaction_status2"),       NotNull    ] public int      TransactionStatus2      { get; set; } // int
			[Column("dtc_state"),                 NotNull    ] public int      DtcState                { get; set; } // int
			[Column("dtc_status"),                NotNull    ] public int      DtcStatus               { get; set; } // int
			[Column("dtc_isolation_level"),       NotNull    ] public int      DtcIsolationLevel       { get; set; } // int
			[Column("filestream_transaction_id"),    Nullable] public byte[]?  FilestreamTransactionID { get; set; } // varbinary(128)
		}

		[Table(Schema="sys", Name="dm_tran_commit_table", IsView=true)]
		public partial class DmTranCommitTable
		{
			[Column("commit_ts"),      Nullable] public long?    CommitTs   { get; set; } // bigint
			[Column("xdes_id"),        Nullable] public long?    XdesID     { get; set; } // bigint
			[Column("commit_lbn"),  NotNull    ] public long     CommitLbn  { get; set; } // bigint
			[Column("commit_csn"),  NotNull    ] public long     CommitCsn  { get; set; } // bigint
			[Column("commit_time"), NotNull    ] public DateTime CommitTime { get; set; } // datetime
		}

		[Table(Schema="sys", Name="dm_tran_current_snapshot", IsView=true)]
		public partial class DmTranCurrentSnapshot
		{
			[Column("transaction_sequence_num"), Nullable] public long? TransactionSequenceNum { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_tran_current_transaction", IsView=true)]
		public partial class DmTranCurrentTransaction
		{
			[Column("transaction_id"),                Nullable] public long? TransactionID              { get; set; } // bigint
			[Column("transaction_sequence_num"),      Nullable] public long? TransactionSequenceNum     { get; set; } // bigint
			[Column("transaction_is_snapshot"),       Nullable] public bool? TransactionIsSnapshot      { get; set; } // bit
			[Column("first_snapshot_sequence_num"),   Nullable] public long? FirstSnapshotSequenceNum   { get; set; } // bigint
			[Column("last_transaction_sequence_num"), Nullable] public long? LastTransactionSequenceNum { get; set; } // bigint
			[Column("first_useful_sequence_num"),     Nullable] public long? FirstUsefulSequenceNum     { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_tran_database_transactions", IsView=true)]
		public partial class DmTranDatabaseTransactions
		{
			[Column("transaction_id"),                                 NotNull    ] public long      TransactionID                             { get; set; } // bigint
			[Column("database_id"),                                    NotNull    ] public int       DatabaseID                                { get; set; } // int
			[Column("database_transaction_begin_time"),                   Nullable] public DateTime? DatabaseTransactionBeginTime              { get; set; } // datetime
			[Column("database_transaction_type"),                      NotNull    ] public int       DatabaseTransactionType                   { get; set; } // int
			[Column("database_transaction_state"),                     NotNull    ] public int       DatabaseTransactionState                  { get; set; } // int
			[Column("database_transaction_status"),                    NotNull    ] public int       DatabaseTransactionStatus                 { get; set; } // int
			[Column("database_transaction_status2"),                   NotNull    ] public int       DatabaseTransactionStatus2                { get; set; } // int
			[Column("database_transaction_log_record_count"),          NotNull    ] public long      DatabaseTransactionLogRecordCount         { get; set; } // bigint
			[Column("database_transaction_replicate_record_count"),    NotNull    ] public int       DatabaseTransactionReplicateRecordCount   { get; set; } // int
			[Column("database_transaction_log_bytes_used"),            NotNull    ] public long      DatabaseTransactionLogBytesUsed           { get; set; } // bigint
			[Column("database_transaction_log_bytes_reserved"),        NotNull    ] public long      DatabaseTransactionLogBytesReserved       { get; set; } // bigint
			[Column("database_transaction_log_bytes_used_system"),     NotNull    ] public int       DatabaseTransactionLogBytesUsedSystem     { get; set; } // int
			[Column("database_transaction_log_bytes_reserved_system"), NotNull    ] public int       DatabaseTransactionLogBytesReservedSystem { get; set; } // int
			[Column("database_transaction_begin_lsn"),                    Nullable] public decimal?  DatabaseTransactionBeginLsn               { get; set; } // numeric(25,0)
			[Column("database_transaction_last_lsn"),                     Nullable] public decimal?  DatabaseTransactionLastLsn                { get; set; } // numeric(25,0)
			[Column("database_transaction_most_recent_savepoint_lsn"),    Nullable] public decimal?  DatabaseTransactionMostRecentSavepointLsn { get; set; } // numeric(25,0)
			[Column("database_transaction_commit_lsn"),                   Nullable] public decimal?  DatabaseTransactionCommitLsn              { get; set; } // numeric(25,0)
			[Column("database_transaction_last_rollback_lsn"),            Nullable] public decimal?  DatabaseTransactionLastRollbackLsn        { get; set; } // numeric(25,0)
			[Column("database_transaction_next_undo_lsn"),                Nullable] public decimal?  DatabaseTransactionNextUndoLsn            { get; set; } // numeric(25,0)
		}

		[Table(Schema="sys", Name="dm_tran_global_recovery_transactions", IsView=true)]
		public partial class DmTranGlobalRecoveryTransactions
		{
			[Column("database_id"),                       NotNull    ] public int     DatabaseID                     { get; set; } // int
			[Column("transaction_uow"),                   NotNull    ] public Guid    TransactionUow                 { get; set; } // uniqueidentifier
			[Column("transaction_manager_dbid"),          NotNull    ] public int     TransactionManagerDbid         { get; set; } // int
			[Column("transaction_manager_rmid"),          NotNull    ] public Guid    TransactionManagerRmid         { get; set; } // uniqueidentifier
			[Column("transaction_manager_server_name"),      Nullable] public string? TransactionManagerServerName   { get; set; } // nvarchar(261)
			[Column("transaction_manager_database_name"),    Nullable] public string? TransactionManagerDatabaseName { get; set; } // nvarchar(129)
		}

		[Table(Schema="sys", Name="dm_tran_global_transactions", IsView=true)]
		public partial class DmTranGlobalTransactions
		{
			[Column("transaction_id"),               NotNull    ] public Guid    TransactionID             { get; set; } // uniqueidentifier
			[Column("database_id"),                  NotNull    ] public int     DatabaseID                { get; set; } // int
			[Column("transaction_state"),            NotNull    ] public int     TransactionState          { get; set; } // int
			[Column("resource_manager_id"),          NotNull    ] public Guid    ResourceManagerID         { get; set; } // uniqueidentifier
			[Column("resource_manager_server"),         Nullable] public string? ResourceManagerServer     { get; set; } // nvarchar(261)
			[Column("resource_manager_database"),       Nullable] public string? ResourceManagerDatabase   { get; set; } // nvarchar(129)
			[Column("resource_manager_dbid"),        NotNull    ] public int     ResourceManagerDbid       { get; set; } // int
			[Column("resource_manager_state"),       NotNull    ] public int     ResourceManagerState      { get; set; } // int
			[Column("resource_prepare_lsn"),            Nullable] public string? ResourcePrepareLsn        { get; set; } // nvarchar(24)
			[Column("resource_phase_1_time"),        NotNull    ] public long    ResourcePhase1Time        { get; set; } // bigint
			[Column("resource_phase_2_time"),        NotNull    ] public long    ResourcePhase2Time        { get; set; } // bigint
			[Column("transaction_phase_1_time"),     NotNull    ] public long    TransactionPhase1Time     { get; set; } // bigint
			[Column("transaction_phase_2_time"),     NotNull    ] public long    TransactionPhase2Time     { get; set; } // bigint
			[Column("transaction_total_time"),       NotNull    ] public long    TransactionTotalTime      { get; set; } // bigint
			[Column("transaction_diag_status"),      NotNull    ] public int     TransactionDiagStatus     { get; set; } // int
			[Column("resource_manager_diag_status"), NotNull    ] public int     ResourceManagerDiagStatus { get; set; } // int
			[Column("max_csn"),                      NotNull    ] public long    MaxCsn                    { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_tran_global_transactions_enlistments", IsView=true)]
		public partial class DmTranGlobalTransactionsEnlistments
		{
			[Column("transaction_id"),                    NotNull    ] public Guid    TransactionID                  { get; set; } // uniqueidentifier
			[Column("database_id"),                       NotNull    ] public int     DatabaseID                     { get; set; } // int
			[Column("iso_level"),                         NotNull    ] public int     IsoLevel                       { get; set; } // int
			[Column("can_commit"),                        NotNull    ] public int     CanCommit                      { get; set; } // int
			[Column("enlistment_state"),                  NotNull    ] public int     EnlistmentState                { get; set; } // int
			[Column("resource_manager_id"),               NotNull    ] public Guid    ResourceManagerID              { get; set; } // uniqueidentifier
			[Column("server_name"),                          Nullable] public string? ServerName                     { get; set; } // nvarchar(261)
			[Column("database_name"),                        Nullable] public string? DatabaseName                   { get; set; } // nvarchar(129)
			[Column("transaction_manager_server_name"),      Nullable] public string? TransactionManagerServerName   { get; set; } // nvarchar(261)
			[Column("transaction_manager_database_name"),    Nullable] public string? TransactionManagerDatabaseName { get; set; } // nvarchar(129)
			[Column("transaction_manager_database_id"),   NotNull    ] public int     TransactionManagerDatabaseID   { get; set; } // int
			[Column("transaction_manager_rmid"),          NotNull    ] public Guid    TransactionManagerRmid         { get; set; } // uniqueidentifier
			[Column("prepare_lsn"),                          Nullable] public string? PrepareLsn                     { get; set; } // nvarchar(24)
			[Column("snapshot_timestamp"),                NotNull    ] public long    SnapshotTimestamp              { get; set; } // bigint
			[Column("oldest_active_lsn"),                    Nullable] public string? OldestActiveLsn                { get; set; } // nvarchar(24)
			[Column("prepare_elapsed_time"),              NotNull    ] public long    PrepareElapsedTime             { get; set; } // bigint
			[Column("object_ref_count"),                  NotNull    ] public int     ObjectRefCount                 { get; set; } // int
			[Column("transaction_timeout"),               NotNull    ] public int     TransactionTimeout             { get; set; } // int
			[Column("diag_status"),                       NotNull    ] public int     DiagStatus                     { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_tran_global_transactions_log", IsView=true)]
		public partial class DmTranGlobalTransactionsLog
		{
			[Column("transaction_id"),                NotNull    ] public Guid     TransactionID              { get; set; } // uniqueidentifier
			[Column("time_utc"),                      NotNull    ] public DateTime TimeUtc                    { get; set; } // datetime
			[Column("dropped"),                       NotNull    ] public byte     Dropped                    { get; set; } // tinyint
			[Column("resource_manager_id"),           NotNull    ] public Guid     ResourceManagerID          { get; set; } // uniqueidentifier
			[Column("resource_manager_prepare_lsn"),     Nullable] public string?  ResourceManagerPrepareLsn  { get; set; } // nvarchar(24)
			[Column("resource_manager_ack_received"), NotNull    ] public byte     ResourceManagerAckReceived { get; set; } // tinyint
			[Column("commit_timestamp"),              NotNull    ] public long     CommitTimestamp            { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_tran_locks", IsView=true)]
		public partial class DmTranLocks
		{
			[Column("resource_type"),                 NotNull    ] public string ResourceType               { get; set; } = null!; // nvarchar(60)
			[Column("resource_subtype"),              NotNull    ] public string ResourceSubtype            { get; set; } = null!; // nvarchar(60)
			[Column("resource_database_id"),          NotNull    ] public int    ResourceDatabaseID         { get; set; } // int
			[Column("resource_description"),          NotNull    ] public string ResourceDescription        { get; set; } = null!; // nvarchar(256)
			[Column("resource_associated_entity_id"),    Nullable] public long?  ResourceAssociatedEntityID { get; set; } // bigint
			[Column("resource_lock_partition"),          Nullable] public int?   ResourceLockPartition      { get; set; } // int
			[Column("request_mode"),                  NotNull    ] public string RequestMode                { get; set; } = null!; // nvarchar(60)
			[Column("request_type"),                  NotNull    ] public string RequestType                { get; set; } = null!; // nvarchar(60)
			[Column("request_status"),                NotNull    ] public string RequestStatus              { get; set; } = null!; // nvarchar(60)
			[Column("request_reference_count"),       NotNull    ] public short  RequestReferenceCount      { get; set; } // smallint
			[Column("request_lifetime"),              NotNull    ] public int    RequestLifetime            { get; set; } // int
			[Column("request_session_id"),            NotNull    ] public int    RequestSessionID           { get; set; } // int
			[Column("request_exec_context_id"),       NotNull    ] public int    RequestExecContextID       { get; set; } // int
			[Column("request_request_id"),            NotNull    ] public int    RequestRequestID           { get; set; } // int
			[Column("request_owner_type"),            NotNull    ] public string RequestOwnerType           { get; set; } = null!; // nvarchar(60)
			[Column("request_owner_id"),                 Nullable] public long?  RequestOwnerID             { get; set; } // bigint
			[Column("request_owner_guid"),               Nullable] public Guid?  RequestOwnerGuid           { get; set; } // uniqueidentifier
			[Column("request_owner_lockspace_id"),    NotNull    ] public string RequestOwnerLockspaceID    { get; set; } = null!; // nvarchar(32)
			[Column("lock_owner_address"),            NotNull    ] public byte[] LockOwnerAddress           { get; set; } = null!; // varbinary(8)
		}

		[Table(Schema="sys", Name="dm_tran_persistent_version_store", IsView=true)]
		public partial class DmTranPersistentVersionStore
		{
			[Column("xdes_ts_push"),      NotNull    ] public long   XdesTsPush     { get; set; } // bigint
			[Column("xdes_ts_tran"),      NotNull    ] public long   XdesTsTran     { get; set; } // bigint
			[Column("subid_push"),           Nullable] public int?   SubidPush      { get; set; } // int
			[Column("subid_tran"),           Nullable] public int?   SubidTran      { get; set; } // int
			[Column("rowset_id"),         NotNull    ] public long   RowsetID       { get; set; } // bigint
			[Column("sec_version_rid"),   NotNull    ] public byte[] SecVersionRid  { get; set; } = null!; // binary(8)
			[Column("min_len"),              Nullable] public short? MinLen         { get; set; } // smallint
			[Column("seq_num"),              Nullable] public long?  SeqNum         { get; set; } // bigint
			[Column("prev_row_in_chain"), NotNull    ] public byte[] PrevRowInChain { get; set; } = null!; // binary(8)
			[Column("row_version"),       NotNull    ] public byte[] RowVersion     { get; set; } = null!; // varbinary(8000)
		}

		[Table(Schema="sys", Name="dm_tran_persistent_version_store_stats", IsView=true)]
		public partial class DmTranPersistentVersionStoreStats
		{
			[Column("database_id"),                                      NotNull    ] public int       DatabaseID                                { get; set; } // int
			[Column("pvs_filegroup_id"),                                 NotNull    ] public short     PvsFilegroupID                            { get; set; } // smallint
			[Column("persistent_version_store_size_kb"),                 NotNull    ] public long      PersistentVersionStoreSizeKb              { get; set; } // bigint
			[Column("online_index_version_store_size_kb"),               NotNull    ] public long      OnlineIndexVersionStoreSizeKb             { get; set; } // bigint
			[Column("current_aborted_transaction_count"),                NotNull    ] public long      CurrentAbortedTransactionCount            { get; set; } // bigint
			[Column("oldest_active_transaction_id"),                     NotNull    ] public long      OldestActiveTransactionID                 { get; set; } // bigint
			[Column("oldest_aborted_transaction_id"),                    NotNull    ] public long      OldestAbortedTransactionID                { get; set; } // bigint
			[Column("min_transaction_timestamp"),                        NotNull    ] public long      MinTransactionTimestamp                   { get; set; } // bigint
			[Column("online_index_min_transaction_timestamp"),           NotNull    ] public long      OnlineIndexMinTransactionTimestamp        { get; set; } // bigint
			[Column("secondary_low_water_mark"),                         NotNull    ] public long      SecondaryLowWaterMark                     { get; set; } // bigint
			[Column("offrow_version_cleaner_start_time"),                   Nullable] public DateTime? OffrowVersionCleanerStartTime             { get; set; } // datetime2(7)
			[Column("offrow_version_cleaner_end_time"),                     Nullable] public DateTime? OffrowVersionCleanerEndTime               { get; set; } // datetime2(7)
			[Column("aborted_version_cleaner_start_time"),                  Nullable] public DateTime? AbortedVersionCleanerStartTime            { get; set; } // datetime2(7)
			[Column("aborted_version_cleaner_end_time"),                    Nullable] public DateTime? AbortedVersionCleanerEndTime              { get; set; } // datetime2(7)
			[Column("pvs_off_row_page_skipped_low_water_mark"),          NotNull    ] public long      PvsOffRowPageSkippedLowWaterMark          { get; set; } // bigint
			[Column("pvs_off_row_page_skipped_transaction_not_cleaned"), NotNull    ] public long      PvsOffRowPageSkippedTransactionNotCleaned { get; set; } // bigint
			[Column("pvs_off_row_page_skipped_oldest_active_xdesid"),    NotNull    ] public long      PvsOffRowPageSkippedOldestActiveXdesid    { get; set; } // bigint
			[Column("pvs_off_row_page_skipped_min_useful_xts"),          NotNull    ] public long      PvsOffRowPageSkippedMinUsefulXts          { get; set; } // bigint
			[Column("pvs_off_row_page_skipped_oldest_snapshot"),         NotNull    ] public long      PvsOffRowPageSkippedOldestSnapshot        { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_tran_session_transactions", IsView=true)]
		public partial class DmTranSessionTransactions
		{
			[Column("session_id"),             NotNull] public int    SessionID             { get; set; } // int
			[Column("transaction_id"),         NotNull] public long   TransactionID         { get; set; } // bigint
			[Column("transaction_descriptor"), NotNull] public byte[] TransactionDescriptor { get; set; } = null!; // binary(8)
			[Column("enlist_count"),           NotNull] public int    EnlistCount           { get; set; } // int
			[Column("is_user_transaction"),    NotNull] public bool   IsUserTransaction     { get; set; } // bit
			[Column("is_local"),               NotNull] public bool   IsLocal               { get; set; } // bit
			[Column("is_enlisted"),            NotNull] public bool   IsEnlisted            { get; set; } // bit
			[Column("is_bound"),               NotNull] public bool   IsBound               { get; set; } // bit
			[Column("open_transaction_count"), NotNull] public int    OpenTransactionCount  { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_tran_top_version_generators", IsView=true)]
		public partial class DmTranTopVersionGenerators
		{
			[Column("database_id"),                       Nullable] public short? DatabaseID                    { get; set; } // smallint
			[Column("rowset_id"),                         Nullable] public long?  RowsetID                      { get; set; } // bigint
			[Column("aggregated_record_length_in_bytes"), Nullable] public int?   AggregatedRecordLengthInBytes { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_tran_transactions_snapshot", IsView=true)]
		public partial class DmTranTransactionsSnapshot
		{
			[Column("transaction_sequence_num"), Nullable] public long? TransactionSequenceNum { get; set; } // bigint
			[Column("snapshot_id"),              Nullable] public int?  SnapshotID             { get; set; } // int
			[Column("snapshot_sequence_num"),    Nullable] public long? SnapshotSequenceNum    { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_tran_version_store", IsView=true)]
		public partial class DmTranVersionStore
		{
			[Column("transaction_sequence_num"),           Nullable] public long?   TransactionSequenceNum        { get; set; } // bigint
			[Column("version_sequence_num"),               Nullable] public long?   VersionSequenceNum            { get; set; } // bigint
			[Column("database_id"),                        Nullable] public short?  DatabaseID                    { get; set; } // smallint
			[Column("rowset_id"),                          Nullable] public long?   RowsetID                      { get; set; } // bigint
			[Column("status"),                             Nullable] public byte?   Status                        { get; set; } // tinyint
			[Column("min_length_in_bytes"),                Nullable] public short?  MinLengthInBytes              { get; set; } // smallint
			[Column("record_length_first_part_in_bytes"),  Nullable] public short?  RecordLengthFirstPartInBytes  { get; set; } // smallint
			[Column("record_image_first_part"),            Nullable] public byte[]? RecordImageFirstPart          { get; set; } // varbinary(8000)
			[Column("record_length_second_part_in_bytes"), Nullable] public short?  RecordLengthSecondPartInBytes { get; set; } // smallint
			[Column("record_image_second_part"),           Nullable] public byte[]? RecordImageSecondPart         { get; set; } // varbinary(8000)
		}

		[Table(Schema="sys", Name="dm_tran_version_store_space_usage", IsView=true)]
		public partial class DmTranVersionStoreSpaceUsage
		{
			[Column("database_id"),         Nullable] public int?  DatabaseID        { get; set; } // int
			[Column("reserved_page_count"), Nullable] public long? ReservedPageCount { get; set; } // bigint
			[Column("reserved_space_kb"),   Nullable] public long? ReservedSpaceKb   { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_xe_map_values", IsView=true)]
		public partial class DmXeMapValues
		{
			[Column("name"),                NotNull] public string Name              { get; set; } = null!; // nvarchar(256)
			[Column("object_package_guid"), NotNull] public Guid   ObjectPackageGuid { get; set; } // uniqueidentifier
			[Column("map_key"),             NotNull] public int    MapKey            { get; set; } // int
			[Column("map_value"),           NotNull] public string MapValue          { get; set; } = null!; // nvarchar(3072)
		}

		[Table(Schema="sys", Name="dm_xe_object_columns", IsView=true)]
		public partial class DmXeObjectColumns
		{
			[Column("name"),                NotNull    ] public string  Name              { get; set; } = null!; // nvarchar(256)
			[Column("column_id"),           NotNull    ] public int     ColumnID          { get; set; } // int
			[Column("object_name"),         NotNull    ] public string  ObjectName        { get; set; } = null!; // nvarchar(256)
			[Column("object_package_guid"), NotNull    ] public Guid    ObjectPackageGuid { get; set; } // uniqueidentifier
			[Column("type_name"),           NotNull    ] public string  TypeName          { get; set; } = null!; // nvarchar(256)
			[Column("type_package_guid"),   NotNull    ] public Guid    TypePackageGuid   { get; set; } // uniqueidentifier
			[Column("column_type"),         NotNull    ] public string  ColumnType        { get; set; } = null!; // nvarchar(60)
			[Column("column_value"),           Nullable] public string? ColumnValue       { get; set; } // nvarchar(256)
			[Column("capabilities"),           Nullable] public int?    Capabilities      { get; set; } // int
			[Column("capabilities_desc"),      Nullable] public string? CapabilitiesDesc  { get; set; } // nvarchar(256)
			[Column("description"),            Nullable] public string? Description       { get; set; } // nvarchar(3072)
		}

		[Table(Schema="sys", Name="dm_xe_objects", IsView=true)]
		public partial class DmXeObjects
		{
			[Column("name"),              NotNull    ] public string  Name             { get; set; } = null!; // nvarchar(256)
			[Column("object_type"),       NotNull    ] public string  ObjectType       { get; set; } = null!; // nvarchar(60)
			[Column("package_guid"),      NotNull    ] public Guid    PackageGuid      { get; set; } // uniqueidentifier
			[Column("description"),       NotNull    ] public string  Description      { get; set; } = null!; // nvarchar(3072)
			[Column("capabilities"),         Nullable] public int?    Capabilities     { get; set; } // int
			[Column("capabilities_desc"),    Nullable] public string? CapabilitiesDesc { get; set; } // nvarchar(256)
			[Column("type_name"),            Nullable] public string? TypeName         { get; set; } // nvarchar(256)
			[Column("type_package_guid"),    Nullable] public Guid?   TypePackageGuid  { get; set; } // uniqueidentifier
			[Column("type_size"),            Nullable] public int?    TypeSize         { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_xe_packages", IsView=true)]
		public partial class DmXePackages
		{
			[Column("name"),              NotNull    ] public string  Name             { get; set; } = null!; // nvarchar(256)
			[Column("guid"),              NotNull    ] public Guid    Guid             { get; set; } // uniqueidentifier
			[Column("description"),       NotNull    ] public string  Description      { get; set; } = null!; // nvarchar(3072)
			[Column("capabilities"),         Nullable] public int?    Capabilities     { get; set; } // int
			[Column("capabilities_desc"),    Nullable] public string? CapabilitiesDesc { get; set; } // nvarchar(256)
			[Column("module_guid"),       NotNull    ] public string  ModuleGuid       { get; set; } = null!; // nvarchar(60)
			[Column("module_address"),    NotNull    ] public byte[]  ModuleAddress    { get; set; } = null!; // varbinary(8)
		}

		[Table(Schema="sys", Name="dm_xe_session_event_actions", IsView=true)]
		public partial class DmXeSessionEventActions
		{
			[Column("event_session_address"), NotNull] public byte[] EventSessionAddress { get; set; } = null!; // varbinary(8)
			[Column("action_name"),           NotNull] public string ActionName          { get; set; } = null!; // nvarchar(256)
			[Column("action_package_guid"),   NotNull] public Guid   ActionPackageGuid   { get; set; } // uniqueidentifier
			[Column("event_name"),            NotNull] public string EventName           { get; set; } = null!; // nvarchar(256)
			[Column("event_package_guid"),    NotNull] public Guid   EventPackageGuid    { get; set; } // uniqueidentifier
		}

		[Table(Schema="sys", Name="dm_xe_session_events", IsView=true)]
		public partial class DmXeSessionEvents
		{
			[Column("event_session_address"), NotNull    ] public byte[]  EventSessionAddress { get; set; } = null!; // varbinary(8)
			[Column("event_name"),            NotNull    ] public string  EventName           { get; set; } = null!; // nvarchar(256)
			[Column("event_package_guid"),    NotNull    ] public Guid    EventPackageGuid    { get; set; } // uniqueidentifier
			[Column("event_predicate"),          Nullable] public string? EventPredicate      { get; set; } // nvarchar(3072)
		}

		[Table(Schema="sys", Name="dm_xe_session_object_columns", IsView=true)]
		public partial class DmXeSessionObjectColumns
		{
			[Column("event_session_address"), NotNull    ] public byte[]  EventSessionAddress { get; set; } = null!; // varbinary(8)
			[Column("column_name"),           NotNull    ] public string  ColumnName          { get; set; } = null!; // nvarchar(256)
			[Column("column_id"),             NotNull    ] public int     ColumnID            { get; set; } // int
			[Column("column_value"),             Nullable] public string? ColumnValue         { get; set; } // nvarchar(3072)
			[Column("object_type"),           NotNull    ] public string  ObjectType          { get; set; } = null!; // nvarchar(60)
			[Column("object_name"),           NotNull    ] public string  ObjectName          { get; set; } = null!; // nvarchar(256)
			[Column("object_package_guid"),   NotNull    ] public Guid    ObjectPackageGuid   { get; set; } // uniqueidentifier
		}

		[Table(Schema="sys", Name="dm_xe_sessions", IsView=true)]
		public partial class DmXeSessions
		{
			[Column("address"),                    NotNull] public byte[]   Address                 { get; set; } = null!; // varbinary(8)
			[Column("name"),                       NotNull] public string   Name                    { get; set; } = null!; // nvarchar(256)
			[Column("pending_buffers"),            NotNull] public int      PendingBuffers          { get; set; } // int
			[Column("total_regular_buffers"),      NotNull] public int      TotalRegularBuffers     { get; set; } // int
			[Column("regular_buffer_size"),        NotNull] public long     RegularBufferSize       { get; set; } // bigint
			[Column("total_large_buffers"),        NotNull] public int      TotalLargeBuffers       { get; set; } // int
			[Column("large_buffer_size"),          NotNull] public long     LargeBufferSize         { get; set; } // bigint
			[Column("total_buffer_size"),          NotNull] public long     TotalBufferSize         { get; set; } // bigint
			[Column("buffer_policy_flags"),        NotNull] public int      BufferPolicyFlags       { get; set; } // int
			[Column("buffer_policy_desc"),         NotNull] public string   BufferPolicyDesc        { get; set; } = null!; // nvarchar(256)
			[Column("flags"),                      NotNull] public int      Flags                   { get; set; } // int
			[Column("flag_desc"),                  NotNull] public string   FlagDesc                { get; set; } = null!; // nvarchar(256)
			[Column("dropped_event_count"),        NotNull] public int      DroppedEventCount       { get; set; } // int
			[Column("dropped_buffer_count"),       NotNull] public int      DroppedBufferCount      { get; set; } // int
			[Column("blocked_event_fire_time"),    NotNull] public int      BlockedEventFireTime    { get; set; } // int
			[Column("create_time"),                NotNull] public DateTime CreateTime              { get; set; } // datetime
			[Column("largest_event_dropped_size"), NotNull] public int      LargestEventDroppedSize { get; set; } // int
			[Column("session_source"),             NotNull] public string   SessionSource           { get; set; } = null!; // nvarchar(256)
			[Column("buffer_processed_count"),     NotNull] public long     BufferProcessedCount    { get; set; } // bigint
			[Column("buffer_full_count"),          NotNull] public long     BufferFullCount         { get; set; } // bigint
			[Column("total_bytes_generated"),      NotNull] public long     TotalBytesGenerated     { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_xe_session_targets", IsView=true)]
		public partial class DmXeSessionTargets
		{
			[Column("event_session_address"), NotNull    ] public byte[]  EventSessionAddress { get; set; } = null!; // varbinary(8)
			[Column("target_name"),           NotNull    ] public string  TargetName          { get; set; } = null!; // nvarchar(256)
			[Column("target_package_guid"),   NotNull    ] public Guid    TargetPackageGuid   { get; set; } // uniqueidentifier
			[Column("execution_count"),       NotNull    ] public long    ExecutionCount      { get; set; } // bigint
			[Column("execution_duration_ms"), NotNull    ] public long    ExecutionDurationMs { get; set; } // bigint
			[Column("target_data"),              Nullable] public string? TargetData          { get; set; } // nvarchar(0)
			[Column("bytes_written"),         NotNull    ] public long    BytesWritten        { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_xtp_gc_queue_stats", IsView=true)]
		public partial class DmXtpGcQueueStats
		{
			[Column("queue_id"),            NotNull] public int  QueueID           { get; set; } // int
			[Column("total_enqueues"),      NotNull] public long TotalEnqueues     { get; set; } // bigint
			[Column("total_dequeues"),      NotNull] public long TotalDequeues     { get; set; } // bigint
			[Column("current_queue_depth"), NotNull] public long CurrentQueueDepth { get; set; } // bigint
			[Column("maximum_queue_depth"), NotNull] public long MaximumQueueDepth { get; set; } // bigint
			[Column("last_service_ticks"),  NotNull] public long LastServiceTicks  { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_xtp_gc_stats", IsView=true)]
		public partial class DmXtpGcStats
		{
			[Column("rows_examined"),                NotNull] public long RowsExamined             { get; set; } // bigint
			[Column("rows_no_sweep_needed"),         NotNull] public long RowsNoSweepNeeded        { get; set; } // bigint
			[Column("rows_first_in_bucket"),         NotNull] public long RowsFirstInBucket        { get; set; } // bigint
			[Column("rows_first_in_bucket_removed"), NotNull] public long RowsFirstInBucketRemoved { get; set; } // bigint
			[Column("rows_marked_for_unlink"),       NotNull] public long RowsMarkedForUnlink      { get; set; } // bigint
			[Column("parallel_assist_count"),        NotNull] public long ParallelAssistCount      { get; set; } // bigint
			[Column("idle_worker_count"),            NotNull] public long IdleWorkerCount          { get; set; } // bigint
			[Column("sweep_scans_started"),          NotNull] public long SweepScansStarted        { get; set; } // bigint
			[Column("sweep_scan_retries"),           NotNull] public long SweepScanRetries         { get; set; } // bigint
			[Column("sweep_rows_touched"),           NotNull] public long SweepRowsTouched         { get; set; } // bigint
			[Column("sweep_rows_expiring"),          NotNull] public long SweepRowsExpiring        { get; set; } // bigint
			[Column("sweep_rows_expired"),           NotNull] public long SweepRowsExpired         { get; set; } // bigint
			[Column("sweep_rows_expired_removed"),   NotNull] public long SweepRowsExpiredRemoved  { get; set; } // bigint
		}

		[Table(Schema="sys", Name="dm_xtp_system_memory_consumers", IsView=true)]
		public partial class DmXtpSystemMemoryConsumers
		{
			[Column("memory_consumer_id"),        NotNull    ] public long    MemoryConsumerID       { get; set; } // bigint
			[Column("memory_consumer_type"),      NotNull    ] public int     MemoryConsumerType     { get; set; } // int
			[Column("memory_consumer_type_desc"), NotNull    ] public string  MemoryConsumerTypeDesc { get; set; } = null!; // nvarchar(16)
			[Column("memory_consumer_desc"),         Nullable] public string? MemoryConsumerDesc     { get; set; } // nvarchar(64)
			[Column("lookaside_id"),                 Nullable] public long?   LookasideID            { get; set; } // bigint
			[Column("allocated_bytes"),           NotNull    ] public long    AllocatedBytes         { get; set; } // bigint
			[Column("used_bytes"),                NotNull    ] public long    UsedBytes              { get; set; } // bigint
			[Column("allocation_count"),          NotNull    ] public long    AllocationCount        { get; set; } // bigint
			[Column("partition_count"),           NotNull    ] public int     PartitionCount         { get; set; } // int
			[Column("sizeclass_count"),           NotNull    ] public int     SizeclassCount         { get; set; } // int
			[Column("min_sizeclass"),             NotNull    ] public int     MinSizeclass           { get; set; } // int
			[Column("max_sizeclass"),             NotNull    ] public int     MaxSizeclass           { get; set; } // int
			[Column("memory_consumer_address"),   NotNull    ] public byte[]  MemoryConsumerAddress  { get; set; } = null!; // varbinary(8)
		}

		[Table(Schema="sys", Name="dm_xtp_threads", IsView=true)]
		public partial class DmXtpThreads
		{
			[Column("thread_address"),            NotNull] public byte[] ThreadAddress           { get; set; } = null!; // varbinary(8)
			[Column("thread_type"),               NotNull] public int    ThreadType              { get; set; } // int
			[Column("thread_type_desc"),          NotNull] public string ThreadTypeDesc          { get; set; } = null!; // nvarchar(32)
			[Column("retired_row_count"),         NotNull] public int    RetiredRowCount         { get; set; } // int
			[Column("retired_transaction_count"), NotNull] public int    RetiredTransactionCount { get; set; } // int
		}

		[Table(Schema="sys", Name="dm_xtp_transaction_recent_rows", IsView=true)]
		public partial class DmXtpTransactionRecentRows
		{
			[Column("node_id"),            NotNull] public short  NodeID           { get; set; } // smallint
			[Column("xtp_transaction_id"), NotNull] public long   XtpTransactionID { get; set; } // bigint
			[Column("row_address"),        NotNull] public byte[] RowAddress       { get; set; } = null!; // varbinary(8)
			[Column("table_address"),      NotNull] public byte[] TableAddress     { get; set; } = null!; // varbinary(8)
			[Column("before_begin"),       NotNull] public long   BeforeBegin      { get; set; } // bigint
			[Column("before_end"),         NotNull] public long   BeforeEnd        { get; set; } // bigint
			[Column("before_links"),       NotNull] public int    BeforeLinks      { get; set; } // int
			[Column("before_time"),        NotNull] public long   BeforeTime       { get; set; } // bigint
			[Column("after_begin"),        NotNull] public long   AfterBegin       { get; set; } // bigint
			[Column("after_end"),          NotNull] public long   AfterEnd         { get; set; } // bigint
			[Column("after_links"),        NotNull] public int    AfterLinks       { get; set; } // int
			[Column("after_time"),         NotNull] public long   AfterTime        { get; set; } // bigint
			[Column("outcome"),            NotNull] public byte[] Outcome          { get; set; } = null!; // varbinary(8)
		}

		[Table(Schema="sys", Name="dm_xtp_transaction_stats", IsView=true)]
		public partial class DmXtpTransactionStats
		{
			[Column("total_count"),                  NotNull] public long TotalCount                 { get; set; } // bigint
			[Column("read_only_count"),              NotNull] public long ReadOnlyCount              { get; set; } // bigint
			[Column("total_aborts"),                 NotNull] public long TotalAborts                { get; set; } // bigint
			[Column("system_aborts"),                NotNull] public long SystemAborts               { get; set; } // bigint
			[Column("validation_failures"),          NotNull] public long ValidationFailures         { get; set; } // bigint
			[Column("dependencies_taken"),           NotNull] public long DependenciesTaken          { get; set; } // bigint
			[Column("dependencies_failed"),          NotNull] public long DependenciesFailed         { get; set; } // bigint
			[Column("savepoint_create"),             NotNull] public long SavepointCreate            { get; set; } // bigint
			[Column("savepoint_rollbacks"),          NotNull] public long SavepointRollbacks         { get; set; } // bigint
			[Column("savepoint_refreshes"),          NotNull] public long SavepointRefreshes         { get; set; } // bigint
			[Column("log_bytes_written"),            NotNull] public long LogBytesWritten            { get; set; } // bigint
			[Column("log_IO_count"),                 NotNull] public long LogIoCount                 { get; set; } // bigint
			[Column("phantom_scans_started"),        NotNull] public long PhantomScansStarted        { get; set; } // bigint
			[Column("phantom_scans_retries"),        NotNull] public long PhantomScansRetries        { get; set; } // bigint
			[Column("phantom_rows_touched"),         NotNull] public long PhantomRowsTouched         { get; set; } // bigint
			[Column("phantom_rows_expiring"),        NotNull] public long PhantomRowsExpiring        { get; set; } // bigint
			[Column("phantom_rows_expired"),         NotNull] public long PhantomRowsExpired         { get; set; } // bigint
			[Column("phantom_rows_expired_removed"), NotNull] public long PhantomRowsExpiredRemoved  { get; set; } // bigint
			[Column("scans_started"),                NotNull] public long ScansStarted               { get; set; } // bigint
			[Column("scans_retried"),                NotNull] public long ScansRetried               { get; set; } // bigint
			[Column("rows_returned"),                NotNull] public long RowsReturned               { get; set; } // bigint
			[Column("rows_touched"),                 NotNull] public long RowsTouched                { get; set; } // bigint
			[Column("rows_expiring"),                NotNull] public long RowsExpiring               { get; set; } // bigint
			[Column("rows_expired"),                 NotNull] public long RowsExpired                { get; set; } // bigint
			[Column("rows_expired_removed"),         NotNull] public long RowsExpiredRemoved         { get; set; } // bigint
			[Column("row_insert_attempts"),          NotNull] public long RowInsertAttempts          { get; set; } // bigint
			[Column("row_update_attempts"),          NotNull] public long RowUpdateAttempts          { get; set; } // bigint
			[Column("row_delete_attempts"),          NotNull] public long RowDeleteAttempts          { get; set; } // bigint
			[Column("write_conflicts"),              NotNull] public long WriteConflicts             { get; set; } // bigint
			[Column("unique_constraint_violations"), NotNull] public long UniqueConstraintViolations { get; set; } // bigint
			[Column("drop_table_memory_attempts"),   NotNull] public long DropTableMemoryAttempts    { get; set; } // bigint
			[Column("drop_table_memory_failures"),   NotNull] public long DropTableMemoryFailures    { get; set; } // bigint
		}
	}

	public static partial class InformationSchema
	{
		public partial class DataContext
		{
			public ITable<CheckConstraints>       CheckConstraints       { get { return _dataContext.GetTable<CheckConstraints>(); } }
			public ITable<ColumnDomainUsage>      ColumnDomainUsage      { get { return _dataContext.GetTable<ColumnDomainUsage>(); } }
			public ITable<ColumnPrivileges>       ColumnPrivileges       { get { return _dataContext.GetTable<ColumnPrivileges>(); } }
			public ITable<Columns>                Columns                { get { return _dataContext.GetTable<Columns>(); } }
			public ITable<ConstraintColumnUsage>  ConstraintColumnUsage  { get { return _dataContext.GetTable<ConstraintColumnUsage>(); } }
			public ITable<ConstraintTableUsage>   ConstraintTableUsage   { get { return _dataContext.GetTable<ConstraintTableUsage>(); } }
			public ITable<DomainConstraints>      DomainConstraints      { get { return _dataContext.GetTable<DomainConstraints>(); } }
			public ITable<Domains>                Domains                { get { return _dataContext.GetTable<Domains>(); } }
			public ITable<KeyColumnUsage>         KeyColumnUsage         { get { return _dataContext.GetTable<KeyColumnUsage>(); } }
			public ITable<Parameters>             Parameters             { get { return _dataContext.GetTable<Parameters>(); } }
			public ITable<ReferentialConstraints> ReferentialConstraints { get { return _dataContext.GetTable<ReferentialConstraints>(); } }
			public ITable<RoutineColumns>         RoutineColumns         { get { return _dataContext.GetTable<RoutineColumns>(); } }
			public ITable<Routines>               Routines               { get { return _dataContext.GetTable<Routines>(); } }
			public ITable<Schemata>               Schemata               { get { return _dataContext.GetTable<Schemata>(); } }
			public ITable<Sequences>              Sequences              { get { return _dataContext.GetTable<Sequences>(); } }
			public ITable<TableConstraints>       TableConstraints       { get { return _dataContext.GetTable<TableConstraints>(); } }
			public ITable<TablePrivileges>        TablePrivileges        { get { return _dataContext.GetTable<TablePrivileges>(); } }
			public ITable<Tables>                 Tables                 { get { return _dataContext.GetTable<Tables>(); } }
			public ITable<ViewColumnUsage>        ViewColumnUsage        { get { return _dataContext.GetTable<ViewColumnUsage>(); } }
			public ITable<Views>                  Views                  { get { return _dataContext.GetTable<Views>(); } }
			public ITable<ViewTableUsage>         ViewTableUsage         { get { return _dataContext.GetTable<ViewTableUsage>(); } }

			private readonly IDataContext _dataContext;

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		[Table(Schema="INFORMATION_SCHEMA", Name="CHECK_CONSTRAINTS", IsView=true)]
		public partial class CheckConstraints
		{
			[Column("CONSTRAINT_CATALOG"),    Nullable] public string? ConstraintCatalog { get; set; } // nvarchar(128)
			[Column("CONSTRAINT_SCHEMA"),     Nullable] public string? ConstraintSchema  { get; set; } // nvarchar(128)
			[Column("CONSTRAINT_NAME"),    NotNull    ] public string  ConstraintName    { get; set; } = null!; // sysname
			[Column("CHECK_CLAUSE"),          Nullable] public string? CheckClause       { get; set; } // nvarchar(4000)
		}

		[Table(Schema="INFORMATION_SCHEMA", Name="COLUMN_DOMAIN_USAGE", IsView=true)]
		public partial class ColumnDomainUsage
		{
			[Column("DOMAIN_CATALOG"),    Nullable] public string? DomainCatalog { get; set; } // nvarchar(128)
			[Column("DOMAIN_SCHEMA"),     Nullable] public string? DomainSchema  { get; set; } // nvarchar(128)
			[Column("DOMAIN_NAME"),    NotNull    ] public string  DomainName    { get; set; } = null!; // sysname
			[Column("TABLE_CATALOG"),     Nullable] public string? TableCatalog  { get; set; } // nvarchar(128)
			[Column("TABLE_SCHEMA"),      Nullable] public string? TableSchema   { get; set; } // nvarchar(128)
			[Column("TABLE_NAME"),     NotNull    ] public string  TableName     { get; set; } = null!; // sysname
			[Column("COLUMN_NAME"),       Nullable] public string? ColumnName    { get; set; } // sysname
		}

		[Table(Schema="INFORMATION_SCHEMA", Name="COLUMN_PRIVILEGES", IsView=true)]
		public partial class ColumnPrivileges
		{
			[Column("GRANTOR"),           Nullable] public string? Grantor       { get; set; } // nvarchar(128)
			[Column("GRANTEE"),           Nullable] public string? Grantee       { get; set; } // nvarchar(128)
			[Column("TABLE_CATALOG"),     Nullable] public string? TableCatalog  { get; set; } // nvarchar(128)
			[Column("TABLE_SCHEMA"),      Nullable] public string? TableSchema   { get; set; } // nvarchar(128)
			[Column("TABLE_NAME"),     NotNull    ] public string  TableName     { get; set; } = null!; // sysname
			[Column("COLUMN_NAME"),       Nullable] public string? ColumnName    { get; set; } // sysname
			[Column("PRIVILEGE_TYPE"),    Nullable] public string? PrivilegeType { get; set; } // varchar(10)
			[Column("IS_GRANTABLE"),      Nullable] public string? IsGrantable   { get; set; } // varchar(3)
		}

		[Table(Schema="INFORMATION_SCHEMA", Name="COLUMNS", IsView=true)]
		public partial class Columns
		{
			[Column("TABLE_CATALOG"),               Nullable] public string? TableCatalog           { get; set; } // nvarchar(128)
			[Column("TABLE_SCHEMA"),                Nullable] public string? TableSchema            { get; set; } // nvarchar(128)
			[Column("TABLE_NAME"),               NotNull    ] public string  TableName              { get; set; } = null!; // sysname
			[Column("COLUMN_NAME"),                 Nullable] public string? ColumnName             { get; set; } // sysname
			[Column("ORDINAL_POSITION"),            Nullable] public int?    OrdinalPosition        { get; set; } // int
			[Column("COLUMN_DEFAULT"),              Nullable] public string? ColumnDefault          { get; set; } // nvarchar(4000)
			[Column("IS_NULLABLE"),                 Nullable] public string? IsNullable             { get; set; } // varchar(3)
			[Column("DATA_TYPE"),                   Nullable] public string? DataType               { get; set; } // nvarchar(128)
			[Column("CHARACTER_MAXIMUM_LENGTH"),    Nullable] public int?    CharacterMaximumLength { get; set; } // int
			[Column("CHARACTER_OCTET_LENGTH"),      Nullable] public int?    CharacterOctetLength   { get; set; } // int
			[Column("NUMERIC_PRECISION"),           Nullable] public byte?   NumericPrecision       { get; set; } // tinyint
			[Column("NUMERIC_PRECISION_RADIX"),     Nullable] public short?  NumericPrecisionRadix  { get; set; } // smallint
			[Column("NUMERIC_SCALE"),               Nullable] public int?    NumericScale           { get; set; } // int
			[Column("DATETIME_PRECISION"),          Nullable] public short?  DatetimePrecision      { get; set; } // smallint
			[Column("CHARACTER_SET_CATALOG"),       Nullable] public string? CharacterSetCatalog    { get; set; } // sysname
			[Column("CHARACTER_SET_SCHEMA"),        Nullable] public string? CharacterSetSchema     { get; set; } // sysname
			[Column("CHARACTER_SET_NAME"),          Nullable] public string? CharacterSetName       { get; set; } // sysname
			[Column("COLLATION_CATALOG"),           Nullable] public string? CollationCatalog       { get; set; } // sysname
			[Column("COLLATION_SCHEMA"),            Nullable] public string? CollationSchema        { get; set; } // sysname
			[Column("COLLATION_NAME"),              Nullable] public string? CollationName          { get; set; } // sysname
			[Column("DOMAIN_CATALOG"),              Nullable] public string? DomainCatalog          { get; set; } // sysname
			[Column("DOMAIN_SCHEMA"),               Nullable] public string? DomainSchema           { get; set; } // sysname
			[Column("DOMAIN_NAME"),                 Nullable] public string? DomainName             { get; set; } // sysname
		}

		[Table(Schema="INFORMATION_SCHEMA", Name="CONSTRAINT_COLUMN_USAGE", IsView=true)]
		public partial class ConstraintColumnUsage
		{
			[Column("TABLE_CATALOG"),         Nullable] public string? TableCatalog      { get; set; } // nvarchar(128)
			[Column("TABLE_SCHEMA"),          Nullable] public string? TableSchema       { get; set; } // nvarchar(128)
			[Column("TABLE_NAME"),         NotNull    ] public string  TableName         { get; set; } = null!; // sysname
			[Column("COLUMN_NAME"),           Nullable] public string? ColumnName        { get; set; } // nvarchar(128)
			[Column("CONSTRAINT_CATALOG"),    Nullable] public string? ConstraintCatalog { get; set; } // nvarchar(128)
			[Column("CONSTRAINT_SCHEMA"),     Nullable] public string? ConstraintSchema  { get; set; } // nvarchar(128)
			[Column("CONSTRAINT_NAME"),    NotNull    ] public string  ConstraintName    { get; set; } = null!; // sysname
		}

		[Table(Schema="INFORMATION_SCHEMA", Name="CONSTRAINT_TABLE_USAGE", IsView=true)]
		public partial class ConstraintTableUsage
		{
			[Column("TABLE_CATALOG"),         Nullable] public string? TableCatalog      { get; set; } // nvarchar(128)
			[Column("TABLE_SCHEMA"),          Nullable] public string? TableSchema       { get; set; } // nvarchar(128)
			[Column("TABLE_NAME"),         NotNull    ] public string  TableName         { get; set; } = null!; // sysname
			[Column("CONSTRAINT_CATALOG"),    Nullable] public string? ConstraintCatalog { get; set; } // nvarchar(128)
			[Column("CONSTRAINT_SCHEMA"),     Nullable] public string? ConstraintSchema  { get; set; } // nvarchar(128)
			[Column("CONSTRAINT_NAME"),    NotNull    ] public string  ConstraintName    { get; set; } = null!; // sysname
		}

		[Table(Schema="INFORMATION_SCHEMA", Name="DOMAIN_CONSTRAINTS", IsView=true)]
		public partial class DomainConstraints
		{
			[Column("CONSTRAINT_CATALOG"),    Nullable] public string? ConstraintCatalog { get; set; } // nvarchar(128)
			[Column("CONSTRAINT_SCHEMA"),     Nullable] public string? ConstraintSchema  { get; set; } // nvarchar(128)
			[Column("CONSTRAINT_NAME"),    NotNull    ] public string  ConstraintName    { get; set; } = null!; // sysname
			[Column("DOMAIN_CATALOG"),        Nullable] public string? DomainCatalog     { get; set; } // nvarchar(128)
			[Column("DOMAIN_SCHEMA"),         Nullable] public string? DomainSchema      { get; set; } // nvarchar(128)
			[Column("DOMAIN_NAME"),        NotNull    ] public string  DomainName        { get; set; } = null!; // sysname
			[Column("IS_DEFERRABLE"),      NotNull    ] public string  IsDeferrable      { get; set; } = null!; // varchar(2)
			[Column("INITIALLY_DEFERRED"), NotNull    ] public string  InitiallyDeferred { get; set; } = null!; // varchar(2)
		}

		[Table(Schema="INFORMATION_SCHEMA", Name="DOMAINS", IsView=true)]
		public partial class Domains
		{
			[Column("DOMAIN_CATALOG"),              Nullable] public string? DomainCatalog          { get; set; } // nvarchar(128)
			[Column("DOMAIN_SCHEMA"),               Nullable] public string? DomainSchema           { get; set; } // nvarchar(128)
			[Column("DOMAIN_NAME"),              NotNull    ] public string  DomainName             { get; set; } = null!; // sysname
			[Column("DATA_TYPE"),                   Nullable] public string? DataType               { get; set; } // nvarchar(128)
			[Column("CHARACTER_MAXIMUM_LENGTH"),    Nullable] public int?    CharacterMaximumLength { get; set; } // int
			[Column("CHARACTER_OCTET_LENGTH"),      Nullable] public int?    CharacterOctetLength   { get; set; } // int
			[Column("COLLATION_CATALOG"),           Nullable] public string? CollationCatalog       { get; set; } // sysname
			[Column("COLLATION_SCHEMA"),            Nullable] public string? CollationSchema        { get; set; } // sysname
			[Column("COLLATION_NAME"),              Nullable] public string? CollationName          { get; set; } // sysname
			[Column("CHARACTER_SET_CATALOG"),       Nullable] public string? CharacterSetCatalog    { get; set; } // sysname
			[Column("CHARACTER_SET_SCHEMA"),        Nullable] public string? CharacterSetSchema     { get; set; } // sysname
			[Column("CHARACTER_SET_NAME"),          Nullable] public string? CharacterSetName       { get; set; } // sysname
			[Column("NUMERIC_PRECISION"),           Nullable] public byte?   NumericPrecision       { get; set; } // tinyint
			[Column("NUMERIC_PRECISION_RADIX"),     Nullable] public short?  NumericPrecisionRadix  { get; set; } // smallint
			[Column("NUMERIC_SCALE"),               Nullable] public int?    NumericScale           { get; set; } // int
			[Column("DATETIME_PRECISION"),          Nullable] public short?  DatetimePrecision      { get; set; } // smallint
			[Column("DOMAIN_DEFAULT"),              Nullable] public string? DomainDefault          { get; set; } // nvarchar(4000)
		}

		[Table(Schema="INFORMATION_SCHEMA", Name="KEY_COLUMN_USAGE", IsView=true)]
		public partial class KeyColumnUsage
		{
			[Column("CONSTRAINT_CATALOG"),    Nullable] public string? ConstraintCatalog { get; set; } // nvarchar(128)
			[Column("CONSTRAINT_SCHEMA"),     Nullable] public string? ConstraintSchema  { get; set; } // nvarchar(128)
			[Column("CONSTRAINT_NAME"),    NotNull    ] public string  ConstraintName    { get; set; } = null!; // sysname
			[Column("TABLE_CATALOG"),         Nullable] public string? TableCatalog      { get; set; } // nvarchar(128)
			[Column("TABLE_SCHEMA"),          Nullable] public string? TableSchema       { get; set; } // nvarchar(128)
			[Column("TABLE_NAME"),         NotNull    ] public string  TableName         { get; set; } = null!; // sysname
			[Column("COLUMN_NAME"),           Nullable] public string? ColumnName        { get; set; } // nvarchar(128)
			[Column("ORDINAL_POSITION"),   NotNull    ] public int     OrdinalPosition   { get; set; } // int
		}

		[Table(Schema="INFORMATION_SCHEMA", Name="PARAMETERS", IsView=true)]
		public partial class Parameters
		{
			[Column("SPECIFIC_CATALOG"),             Nullable] public string? SpecificCatalog        { get; set; } // nvarchar(128)
			[Column("SPECIFIC_SCHEMA"),              Nullable] public string? SpecificSchema         { get; set; } // nvarchar(128)
			[Column("SPECIFIC_NAME"),             NotNull    ] public string  SpecificName           { get; set; } = null!; // sysname
			[Column("ORDINAL_POSITION"),          NotNull    ] public int     OrdinalPosition        { get; set; } // int
			[Column("PARAMETER_MODE"),               Nullable] public string? ParameterMode          { get; set; } // nvarchar(10)
			[Column("IS_RESULT"),                    Nullable] public string? IsResult               { get; set; } // nvarchar(10)
			[Column("AS_LOCATOR"),                   Nullable] public string? AsLocator              { get; set; } // nvarchar(10)
			[Column("PARAMETER_NAME"),               Nullable] public string? ParameterName          { get; set; } // sysname
			[Column("DATA_TYPE"),                 NotNull    ] public string  DataType               { get; set; } = null!; // nvarchar(128)
			[Column("CHARACTER_MAXIMUM_LENGTH"),     Nullable] public int?    CharacterMaximumLength { get; set; } // int
			[Column("CHARACTER_OCTET_LENGTH"),       Nullable] public int?    CharacterOctetLength   { get; set; } // int
			[Column("COLLATION_CATALOG"),            Nullable] public string? CollationCatalog       { get; set; } // sysname
			[Column("COLLATION_SCHEMA"),             Nullable] public string? CollationSchema        { get; set; } // sysname
			[Column("COLLATION_NAME"),               Nullable] public string? CollationName          { get; set; } // sysname
			[Column("CHARACTER_SET_CATALOG"),        Nullable] public string? CharacterSetCatalog    { get; set; } // sysname
			[Column("CHARACTER_SET_SCHEMA"),         Nullable] public string? CharacterSetSchema     { get; set; } // sysname
			[Column("CHARACTER_SET_NAME"),           Nullable] public string? CharacterSetName       { get; set; } // sysname
			[Column("NUMERIC_PRECISION"),            Nullable] public byte?   NumericPrecision       { get; set; } // tinyint
			[Column("NUMERIC_PRECISION_RADIX"),      Nullable] public short?  NumericPrecisionRadix  { get; set; } // smallint
			[Column("NUMERIC_SCALE"),                Nullable] public int?    NumericScale           { get; set; } // int
			[Column("DATETIME_PRECISION"),           Nullable] public short?  DatetimePrecision      { get; set; } // smallint
			[Column("INTERVAL_TYPE"),                Nullable] public string? IntervalType           { get; set; } // nvarchar(30)
			[Column("INTERVAL_PRECISION"),           Nullable] public short?  IntervalPrecision      { get; set; } // smallint
			[Column("USER_DEFINED_TYPE_CATALOG"),    Nullable] public string? UserDefinedTypeCatalog { get; set; } // sysname
			[Column("USER_DEFINED_TYPE_SCHEMA"),     Nullable] public string? UserDefinedTypeSchema  { get; set; } // sysname
			[Column("USER_DEFINED_TYPE_NAME"),       Nullable] public string? UserDefinedTypeName    { get; set; } // sysname
			[Column("SCOPE_CATALOG"),                Nullable] public string? ScopeCatalog           { get; set; } // sysname
			[Column("SCOPE_SCHEMA"),                 Nullable] public string? ScopeSchema            { get; set; } // sysname
			[Column("SCOPE_NAME"),                   Nullable] public string? ScopeName              { get; set; } // sysname
		}

		[Table(Schema="INFORMATION_SCHEMA", Name="REFERENTIAL_CONSTRAINTS", IsView=true)]
		public partial class ReferentialConstraints
		{
			[Column("CONSTRAINT_CATALOG"),           Nullable] public string? ConstraintCatalog       { get; set; } // nvarchar(128)
			[Column("CONSTRAINT_SCHEMA"),            Nullable] public string? ConstraintSchema        { get; set; } // nvarchar(128)
			[Column("CONSTRAINT_NAME"),           NotNull    ] public string  ConstraintName          { get; set; } = null!; // sysname
			[Column("UNIQUE_CONSTRAINT_CATALOG"),    Nullable] public string? UniqueConstraintCatalog { get; set; } // nvarchar(128)
			[Column("UNIQUE_CONSTRAINT_SCHEMA"),     Nullable] public string? UniqueConstraintSchema  { get; set; } // nvarchar(128)
			[Column("UNIQUE_CONSTRAINT_NAME"),       Nullable] public string? UniqueConstraintName    { get; set; } // sysname
			[Column("MATCH_OPTION"),                 Nullable] public string? MatchOption             { get; set; } // varchar(7)
			[Column("UPDATE_RULE"),                  Nullable] public string? UpdateRule              { get; set; } // varchar(11)
			[Column("DELETE_RULE"),                  Nullable] public string? DeleteRule              { get; set; } // varchar(11)
		}

		[Table(Schema="INFORMATION_SCHEMA", Name="ROUTINE_COLUMNS", IsView=true)]
		public partial class RoutineColumns
		{
			[Column("TABLE_CATALOG"),               Nullable] public string? TableCatalog           { get; set; } // nvarchar(128)
			[Column("TABLE_SCHEMA"),                Nullable] public string? TableSchema            { get; set; } // nvarchar(128)
			[Column("TABLE_NAME"),               NotNull    ] public string  TableName              { get; set; } = null!; // sysname
			[Column("COLUMN_NAME"),                 Nullable] public string? ColumnName             { get; set; } // sysname
			[Column("ORDINAL_POSITION"),         NotNull    ] public int     OrdinalPosition        { get; set; } // int
			[Column("COLUMN_DEFAULT"),              Nullable] public string? ColumnDefault          { get; set; } // nvarchar(4000)
			[Column("IS_NULLABLE"),                 Nullable] public string? IsNullable             { get; set; } // varchar(3)
			[Column("DATA_TYPE"),                   Nullable] public string? DataType               { get; set; } // nvarchar(128)
			[Column("CHARACTER_MAXIMUM_LENGTH"),    Nullable] public int?    CharacterMaximumLength { get; set; } // int
			[Column("CHARACTER_OCTET_LENGTH"),      Nullable] public int?    CharacterOctetLength   { get; set; } // int
			[Column("NUMERIC_PRECISION"),           Nullable] public byte?   NumericPrecision       { get; set; } // tinyint
			[Column("NUMERIC_PRECISION_RADIX"),     Nullable] public short?  NumericPrecisionRadix  { get; set; } // smallint
			[Column("NUMERIC_SCALE"),               Nullable] public int?    NumericScale           { get; set; } // int
			[Column("DATETIME_PRECISION"),          Nullable] public short?  DatetimePrecision      { get; set; } // smallint
			[Column("CHARACTER_SET_CATALOG"),       Nullable] public string? CharacterSetCatalog    { get; set; } // sysname
			[Column("CHARACTER_SET_SCHEMA"),        Nullable] public string? CharacterSetSchema     { get; set; } // sysname
			[Column("CHARACTER_SET_NAME"),          Nullable] public string? CharacterSetName       { get; set; } // sysname
			[Column("COLLATION_CATALOG"),           Nullable] public string? CollationCatalog       { get; set; } // sysname
			[Column("COLLATION_SCHEMA"),            Nullable] public string? CollationSchema        { get; set; } // sysname
			[Column("COLLATION_NAME"),              Nullable] public string? CollationName          { get; set; } // sysname
			[Column("DOMAIN_CATALOG"),              Nullable] public string? DomainCatalog          { get; set; } // sysname
			[Column("DOMAIN_SCHEMA"),               Nullable] public string? DomainSchema           { get; set; } // sysname
			[Column("DOMAIN_NAME"),                 Nullable] public string? DomainName             { get; set; } // sysname
		}

		[Table(Schema="INFORMATION_SCHEMA", Name="ROUTINES", IsView=true)]
		public partial class Routines
		{
			[Column("SPECIFIC_CATALOG"),            Nullable] public string?  SpecificCatalog        { get; set; } // nvarchar(128)
			[Column("SPECIFIC_SCHEMA"),             Nullable] public string?  SpecificSchema         { get; set; } // nvarchar(128)
			[Column("SPECIFIC_NAME"),            NotNull    ] public string   SpecificName           { get; set; } = null!; // sysname
			[Column("ROUTINE_CATALOG"),             Nullable] public string?  RoutineCatalog         { get; set; } // nvarchar(128)
			[Column("ROUTINE_SCHEMA"),              Nullable] public string?  RoutineSchema          { get; set; } // nvarchar(128)
			[Column("ROUTINE_NAME"),             NotNull    ] public string   RoutineName            { get; set; } = null!; // sysname
			[Column("ROUTINE_TYPE"),                Nullable] public string?  RoutineType            { get; set; } // nvarchar(20)
			[Column("MODULE_CATALOG"),              Nullable] public string?  ModuleCatalog          { get; set; } // sysname
			[Column("MODULE_SCHEMA"),               Nullable] public string?  ModuleSchema           { get; set; } // sysname
			[Column("MODULE_NAME"),                 Nullable] public string?  ModuleName             { get; set; } // sysname
			[Column("UDT_CATALOG"),                 Nullable] public string?  UdtCatalog             { get; set; } // sysname
			[Column("UDT_SCHEMA"),                  Nullable] public string?  UdtSchema              { get; set; } // sysname
			[Column("UDT_NAME"),                    Nullable] public string?  UdtName                { get; set; } // sysname
			[Column("DATA_TYPE"),                   Nullable] public string?  DataType               { get; set; } // sysname
			[Column("CHARACTER_MAXIMUM_LENGTH"),    Nullable] public int?     CharacterMaximumLength { get; set; } // int
			[Column("CHARACTER_OCTET_LENGTH"),      Nullable] public int?     CharacterOctetLength   { get; set; } // int
			[Column("COLLATION_CATALOG"),           Nullable] public string?  CollationCatalog       { get; set; } // sysname
			[Column("COLLATION_SCHEMA"),            Nullable] public string?  CollationSchema        { get; set; } // sysname
			[Column("COLLATION_NAME"),              Nullable] public string?  CollationName          { get; set; } // sysname
			[Column("CHARACTER_SET_CATALOG"),       Nullable] public string?  CharacterSetCatalog    { get; set; } // sysname
			[Column("CHARACTER_SET_SCHEMA"),        Nullable] public string?  CharacterSetSchema     { get; set; } // sysname
			[Column("CHARACTER_SET_NAME"),          Nullable] public string?  CharacterSetName       { get; set; } // sysname
			[Column("NUMERIC_PRECISION"),           Nullable] public byte?    NumericPrecision       { get; set; } // tinyint
			[Column("NUMERIC_PRECISION_RADIX"),     Nullable] public short?   NumericPrecisionRadix  { get; set; } // smallint
			[Column("NUMERIC_SCALE"),               Nullable] public int?     NumericScale           { get; set; } // int
			[Column("DATETIME_PRECISION"),          Nullable] public short?   DatetimePrecision      { get; set; } // smallint
			[Column("INTERVAL_TYPE"),               Nullable] public string?  IntervalType           { get; set; } // nvarchar(30)
			[Column("INTERVAL_PRECISION"),          Nullable] public short?   IntervalPrecision      { get; set; } // smallint
			[Column("TYPE_UDT_CATALOG"),            Nullable] public string?  TypeUdtCatalog         { get; set; } // sysname
			[Column("TYPE_UDT_SCHEMA"),             Nullable] public string?  TypeUdtSchema          { get; set; } // sysname
			[Column("TYPE_UDT_NAME"),               Nullable] public string?  TypeUdtName            { get; set; } // sysname
			[Column("SCOPE_CATALOG"),               Nullable] public string?  ScopeCatalog           { get; set; } // sysname
			[Column("SCOPE_SCHEMA"),                Nullable] public string?  ScopeSchema            { get; set; } // sysname
			[Column("SCOPE_NAME"),                  Nullable] public string?  ScopeName              { get; set; } // sysname
			[Column("MAXIMUM_CARDINALITY"),         Nullable] public long?    MaximumCardinality     { get; set; } // bigint
			[Column("DTD_IDENTIFIER"),              Nullable] public string?  DtdIdentifier          { get; set; } // sysname
			[Column("ROUTINE_BODY"),                Nullable] public string?  RoutineBody            { get; set; } // nvarchar(30)
			[Column("ROUTINE_DEFINITION"),          Nullable] public string?  RoutineDefinition      { get; set; } // nvarchar(4000)
			[Column("EXTERNAL_NAME"),               Nullable] public string?  ExternalName           { get; set; } // sysname
			[Column("EXTERNAL_LANGUAGE"),           Nullable] public string?  ExternalLanguage       { get; set; } // nvarchar(30)
			[Column("PARAMETER_STYLE"),             Nullable] public string?  ParameterStyle         { get; set; } // nvarchar(30)
			[Column("IS_DETERMINISTIC"),            Nullable] public string?  IsDeterministic        { get; set; } // nvarchar(10)
			[Column("SQL_DATA_ACCESS"),             Nullable] public string?  SqlDataAccess          { get; set; } // nvarchar(30)
			[Column("IS_NULL_CALL"),                Nullable] public string?  IsNullCall             { get; set; } // nvarchar(10)
			[Column("SQL_PATH"),                    Nullable] public string?  SqlPath                { get; set; } // sysname
			[Column("SCHEMA_LEVEL_ROUTINE"),        Nullable] public string?  SchemaLevelRoutine     { get; set; } // nvarchar(10)
			[Column("MAX_DYNAMIC_RESULT_SETS"),     Nullable] public short?   MaxDynamicResultSets   { get; set; } // smallint
			[Column("IS_USER_DEFINED_CAST"),        Nullable] public string?  IsUserDefinedCast      { get; set; } // nvarchar(10)
			[Column("IS_IMPLICITLY_INVOCABLE"),     Nullable] public string?  IsImplicitlyInvocable  { get; set; } // nvarchar(10)
			[Column("CREATED"),                  NotNull    ] public DateTime Created                { get; set; } // datetime
			[Column("LAST_ALTERED"),             NotNull    ] public DateTime LastAltered            { get; set; } // datetime
		}

		[Table(Schema="INFORMATION_SCHEMA", Name="SCHEMATA", IsView=true)]
		public partial class Schemata
		{
			[Column("CATALOG_NAME"),                     Nullable] public string? CatalogName                { get; set; } // nvarchar(128)
			[Column("SCHEMA_NAME"),                   NotNull    ] public string  SchemaName                 { get; set; } = null!; // sysname
			[Column("SCHEMA_OWNER"),                     Nullable] public string? SchemaOwner                { get; set; } // nvarchar(128)
			[Column("DEFAULT_CHARACTER_SET_CATALOG"),    Nullable] public string? DefaultCharacterSetCatalog { get; set; } // sysname
			[Column("DEFAULT_CHARACTER_SET_SCHEMA"),     Nullable] public string? DefaultCharacterSetSchema  { get; set; } // sysname
			[Column("DEFAULT_CHARACTER_SET_NAME"),       Nullable] public string? DefaultCharacterSetName    { get; set; } // sysname
		}

		[Table(Schema="INFORMATION_SCHEMA", Name="SEQUENCES", IsView=true)]
		public partial class Sequences
		{
			[Column("SEQUENCE_CATALOG"),              Nullable] public string? SequenceCatalog          { get; set; } // nvarchar(128)
			[Column("SEQUENCE_SCHEMA"),               Nullable] public string? SequenceSchema           { get; set; } // nvarchar(128)
			[Column("SEQUENCE_NAME"),              NotNull    ] public string  SequenceName             { get; set; } = null!; // sysname
			[Column("DATA_TYPE"),                  NotNull    ] public string  DataType                 { get; set; } = null!; // nvarchar(128)
			[Column("NUMERIC_PRECISION"),          NotNull    ] public byte    NumericPrecision         { get; set; } // tinyint
			[Column("NUMERIC_PRECISION_RADIX"),       Nullable] public short?  NumericPrecisionRadix    { get; set; } // smallint
			[Column("NUMERIC_SCALE"),                 Nullable] public int?    NumericScale             { get; set; } // int
			[Column("START_VALUE"),                NotNull    ] public object  StartValue               { get; set; } = null!; // sql_variant
			[Column("MINIMUM_VALUE"),              NotNull    ] public object  MinimumValue             { get; set; } = null!; // sql_variant
			[Column("MAXIMUM_VALUE"),              NotNull    ] public object  MaximumValue             { get; set; } = null!; // sql_variant
			[Column("INCREMENT"),                  NotNull    ] public object  Increment                { get; set; } = null!; // sql_variant
			[Column("CYCLE_OPTION"),                  Nullable] public bool?   CycleOption              { get; set; } // bit
			[Column("DECLARED_DATA_TYPE"),         NotNull    ] public string  DeclaredDataType         { get; set; } = null!; // sysname
			[Column("DECLARED_NUMERIC_PRECISION"), NotNull    ] public byte    DeclaredNumericPrecision { get; set; } // tinyint
			[Column("DECLARED_NUMERIC_SCALE"),     NotNull    ] public byte    DeclaredNumericScale     { get; set; } // tinyint
		}

		[Table(Schema="INFORMATION_SCHEMA", Name="TABLE_CONSTRAINTS", IsView=true)]
		public partial class TableConstraints
		{
			[Column("CONSTRAINT_CATALOG"),    Nullable] public string? ConstraintCatalog { get; set; } // nvarchar(128)
			[Column("CONSTRAINT_SCHEMA"),     Nullable] public string? ConstraintSchema  { get; set; } // nvarchar(128)
			[Column("CONSTRAINT_NAME"),    NotNull    ] public string  ConstraintName    { get; set; } = null!; // sysname
			[Column("TABLE_CATALOG"),         Nullable] public string? TableCatalog      { get; set; } // nvarchar(128)
			[Column("TABLE_SCHEMA"),          Nullable] public string? TableSchema       { get; set; } // nvarchar(128)
			[Column("TABLE_NAME"),            Nullable] public string? TableName         { get; set; } // sysname
			[Column("CONSTRAINT_TYPE"),       Nullable] public string? ConstraintType    { get; set; } // varchar(11)
			[Column("IS_DEFERRABLE"),      NotNull    ] public string  IsDeferrable      { get; set; } = null!; // varchar(2)
			[Column("INITIALLY_DEFERRED"), NotNull    ] public string  InitiallyDeferred { get; set; } = null!; // varchar(2)
		}

		[Table(Schema="INFORMATION_SCHEMA", Name="TABLE_PRIVILEGES", IsView=true)]
		public partial class TablePrivileges
		{
			[Column("GRANTOR"),           Nullable] public string? Grantor       { get; set; } // nvarchar(128)
			[Column("GRANTEE"),           Nullable] public string? Grantee       { get; set; } // nvarchar(128)
			[Column("TABLE_CATALOG"),     Nullable] public string? TableCatalog  { get; set; } // nvarchar(128)
			[Column("TABLE_SCHEMA"),      Nullable] public string? TableSchema   { get; set; } // nvarchar(128)
			[Column("TABLE_NAME"),     NotNull    ] public string  TableName     { get; set; } = null!; // sysname
			[Column("PRIVILEGE_TYPE"),    Nullable] public string? PrivilegeType { get; set; } // varchar(10)
			[Column("IS_GRANTABLE"),      Nullable] public string? IsGrantable   { get; set; } // varchar(3)
		}

		[Table(Schema="INFORMATION_SCHEMA", Name="TABLES", IsView=true)]
		public partial class Tables
		{
			[Column("TABLE_CATALOG"),    Nullable] public string? TableCatalog { get; set; } // nvarchar(128)
			[Column("TABLE_SCHEMA"),     Nullable] public string? TableSchema  { get; set; } // sysname
			[Column("TABLE_NAME"),    NotNull    ] public string  TableName    { get; set; } = null!; // sysname
			[Column("TABLE_TYPE"),       Nullable] public string? TableType    { get; set; } // varchar(10)
		}

		[Table(Schema="INFORMATION_SCHEMA", Name="VIEW_COLUMN_USAGE", IsView=true)]
		public partial class ViewColumnUsage
		{
			[Column("VIEW_CATALOG"),     Nullable] public string? ViewCatalog  { get; set; } // nvarchar(128)
			[Column("VIEW_SCHEMA"),      Nullable] public string? ViewSchema   { get; set; } // nvarchar(128)
			[Column("VIEW_NAME"),     NotNull    ] public string  ViewName     { get; set; } = null!; // sysname
			[Column("TABLE_CATALOG"),    Nullable] public string? TableCatalog { get; set; } // nvarchar(128)
			[Column("TABLE_SCHEMA"),     Nullable] public string? TableSchema  { get; set; } // nvarchar(128)
			[Column("TABLE_NAME"),    NotNull    ] public string  TableName    { get; set; } = null!; // sysname
			[Column("COLUMN_NAME"),      Nullable] public string? ColumnName   { get; set; } // sysname
		}

		[Table(Schema="INFORMATION_SCHEMA", Name="VIEWS", IsView=true)]
		public partial class Views
		{
			[Column("TABLE_CATALOG"),      Nullable] public string? TableCatalog   { get; set; } // nvarchar(128)
			[Column("TABLE_SCHEMA"),       Nullable] public string? TableSchema    { get; set; } // nvarchar(128)
			[Column("TABLE_NAME"),      NotNull    ] public string  TableName      { get; set; } = null!; // sysname
			[Column("VIEW_DEFINITION"),    Nullable] public string? ViewDefinition { get; set; } // nvarchar(4000)
			[Column("CHECK_OPTION"),       Nullable] public string? CheckOption    { get; set; } // varchar(7)
			[Column("IS_UPDATABLE"),    NotNull    ] public string  IsUpdatable    { get; set; } = null!; // varchar(2)
		}

		[Table(Schema="INFORMATION_SCHEMA", Name="VIEW_TABLE_USAGE", IsView=true)]
		public partial class ViewTableUsage
		{
			[Column("VIEW_CATALOG"),     Nullable] public string? ViewCatalog  { get; set; } // nvarchar(128)
			[Column("VIEW_SCHEMA"),      Nullable] public string? ViewSchema   { get; set; } // nvarchar(128)
			[Column("VIEW_NAME"),     NotNull    ] public string  ViewName     { get; set; } = null!; // sysname
			[Column("TABLE_CATALOG"),    Nullable] public string? TableCatalog { get; set; } // nvarchar(128)
			[Column("TABLE_SCHEMA"),     Nullable] public string? TableSchema  { get; set; } // nvarchar(128)
			[Column("TABLE_NAME"),    NotNull    ] public string  TableName    { get; set; } = null!; // sysname
		}
	}

	public static partial class SystemSchema
	{
		public partial class DataContext
		{
			/// <summary>
			/// Shows the union of all columns belonging to user-defined objects and system objects.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-all-columns-transact-sql?view=sql-server-ver15'>sys.all_columns</a>.
			/// </summary>
			public ITable<AllColumns>                                         AllColumns                                         { get { return _dataContext.GetTable<AllColumns>(); } }
			/// <summary>
			/// Shows the UNION of all schema-scoped user-defined objects and system objects.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-all-objects-transact-sql?view=sql-server-ver15'>sys.all_objects</a>.
			/// </summary>
			public ITable<AllObjects>                                         AllObjects                                         { get { return _dataContext.GetTable<AllObjects>(); } }
			/// <summary>
			/// Contains a row for each allocation unit in the database.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-allocation-units-transact-sql?view=sql-server-ver15'>sys.allocation_units</a>.
			/// </summary>
			public ITable<AllocationUnits>                                    AllocationUnits                                    { get { return _dataContext.GetTable<AllocationUnits>(); } }
			/// <summary>
			/// Shows the union of all parameters that belong to user-defined or system objects.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-all-parameters-transact-sql?view=sql-server-ver15'>sys.all_parameters</a>.
			/// </summary>
			public ITable<AllParameters>                                      AllParameters                                      { get { return _dataContext.GetTable<AllParameters>(); } }
			/// <summary>
			/// Returns the union of <b>sys.sql_modules</b> and <b>sys.system_sql_modules</b>.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-all-sql-modules-transact-sql?view=sql-server-ver15'>sys.all_sql_modules</a>.
			/// </summary>
			public ITable<AllSqlModules>                                      AllSqlModules                                      { get { return _dataContext.GetTable<AllSqlModules>(); } }
			/// <summary>
			/// Shows the UNION of all user-defined and system views.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-all-views-transact-sql?view=sql-server-ver15'>sys.all_views</a>.
			/// </summary>
			public ITable<AllViews>                                           AllViews                                           { get { return _dataContext.GetTable<AllViews>(); } }
			public ITable<Assemblies>                                         Assemblies                                         { get { return _dataContext.GetTable<Assemblies>(); } }
			public ITable<AssemblyFiles>                                      AssemblyFiles                                      { get { return _dataContext.GetTable<AssemblyFiles>(); } }
			/// <summary>
			/// Returns one row for each function, procedure or trigger that is defined by a common language runtime (CLR) assembly. This catalog view maps CLR stored procedures, CLR triggers, or CLR functions to their underlying implementation. Objects of type TA, AF, PC, FS, and FT have an associated assembly module. To find the association between the object and the assembly, you can join this catalog view to other catalog views. For example, when you create a CLR stored procedure, it is represented by one row in <b>sys.objects</b>, one row in <b>sys.procedures</b> (which inherits from <b>sys.objects</b>), and one row in <b>sys.assembly_modules</b>. The stored procedure itself is represented by the metadata in <b>sys.objects</b> and <b>sys.procedures</b>. References to the procedure&apos;s underlying CLR implementation are found in <b>sys.assembly_modules</b>.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-assembly-modules-transact-sql?view=sql-server-ver15'>sys.assembly_modules</a>.
			/// </summary>
			public ITable<AssemblyModules>                                    AssemblyModules                                    { get { return _dataContext.GetTable<AssemblyModules>(); } }
			public ITable<AssemblyReferences>                                 AssemblyReferences                                 { get { return _dataContext.GetTable<AssemblyReferences>(); } }
			/// <summary>
			/// Contains a row for each user-defined type that is defined by a CLR assembly. The following <b>sys.assembly_types</b> appear in the list of inherited columns (see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-types-transact-sql?view=sql-server-ver15'>sys.types (Transact-SQL)</a>) after <b>rule_object_id</b>.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-assembly-types-transact-sql?view=sql-server-ver15'>sys.assembly_types</a>.
			/// </summary>
			public ITable<AssemblyTypes>                                      AssemblyTypes                                      { get { return _dataContext.GetTable<AssemblyTypes>(); } }
			public ITable<AsymmetricKeys>                                     AsymmetricKeys                                     { get { return _dataContext.GetTable<AsymmetricKeys>(); } }
			public ITable<BackupDevices>                                      BackupDevices                                      { get { return _dataContext.GetTable<BackupDevices>(); } }
			public ITable<Certificates>                                       Certificates                                       { get { return _dataContext.GetTable<Certificates>(); } }
			/// <summary>
			/// Contains a row for each object that is a CHECK constraint, with <b>sys.objects.type</b> = &apos;C&apos;.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-check-constraints-transact-sql?view=sql-server-ver15'>sys.check_constraints</a>.
			/// </summary>
			public ITable<CheckConstraints>                                   CheckConstraints                                   { get { return _dataContext.GetTable<CheckConstraints>(); } }
			public ITable<ColumnEncryptionKeys>                               ColumnEncryptionKeys                               { get { return _dataContext.GetTable<ColumnEncryptionKeys>(); } }
			public ITable<ColumnEncryptionKeyValues>                          ColumnEncryptionKeyValues                          { get { return _dataContext.GetTable<ColumnEncryptionKeyValues>(); } }
			public ITable<ColumnMasterKeys>                                   ColumnMasterKeys                                   { get { return _dataContext.GetTable<ColumnMasterKeys>(); } }
			/// <summary>
			/// Returns a row for each column of an object that has columns, such as views or tables. The following is a list of object types that have columns:<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-columns-transact-sql?view=sql-server-ver15'>sys.columns</a>.
			/// </summary>
			public ITable<Columns>                                            Columns                                            { get { return _dataContext.GetTable<Columns>(); } }
			/// <summary>
			/// Contains a row for each dictionary used in xVelocity memory optimized columnstore indexes. Dictionaries are used to encode some, but not all data types, therefore not all columns in a columnstore index have dictionaries. A dictionary can exist as a primary dictionary (for all segments) and possibly for other secondary dictionaries used for a subset of the column&apos;s segments.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-column-store-dictionaries-transact-sql?view=sql-server-ver15'>sys.column_store_dictionaries</a>.
			/// </summary>
			public ITable<ColumnStoreDictionaries>                            ColumnStoreDictionaries                            { get { return _dataContext.GetTable<ColumnStoreDictionaries>(); } }
			/// <summary>
			/// Provides clustered columnstore index information on a per-segment basis to help the administrator make system management decisions. <b>sys.column_store_row_groups</b> has a column for the total number of rows physically stored (including those marked as deleted) and a column for the number of rows marked as deleted. Use <b>sys.column_store_row_groups</b> to determine which row groups have a high percentage of deleted rows and should be rebuilt.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-column-store-row-groups-transact-sql?view=sql-server-ver15'>sys.column_store_row_groups</a>.
			/// </summary>
			public ITable<ColumnStoreRowGroups>                               ColumnStoreRowGroups                               { get { return _dataContext.GetTable<ColumnStoreRowGroups>(); } }
			/// <summary>
			/// Returns one row for each column segment in a columnstore index. There is one column segment per column per rowgroup. For example, a table with 10 rowgroups and 34 columns returns 340 rows.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-column-store-segments-transact-sql?view=sql-server-ver15'>sys.column_store_segments</a>.
			/// </summary>
			public ITable<ColumnStoreSegments>                                ColumnStoreSegments                                { get { return _dataContext.GetTable<ColumnStoreSegments>(); } }
			/// <summary>
			/// Contains one row for each column that is of user-defined type.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-column-type-usages-transact-sql?view=sql-server-ver15'>sys.column_type_usages</a>.
			/// </summary>
			public ITable<ColumnTypeUsages>                                   ColumnTypeUsages                                   { get { return _dataContext.GetTable<ColumnTypeUsages>(); } }
			/// <summary>
			/// Contains a row for each column found in <b>sys.columns</b> that is a computed-column.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-computed-columns-transact-sql?view=sql-server-ver15'>sys.computed_columns</a>.
			/// </summary>
			public ITable<ComputedColumns>                                    ComputedColumns                                    { get { return _dataContext.GetTable<ComputedColumns>(); } }
			public ITable<Configurations>                                     Configurations                                     { get { return _dataContext.GetTable<Configurations>(); } }
			public ITable<ConversationEndpoints>                              ConversationEndpoints                              { get { return _dataContext.GetTable<ConversationEndpoints>(); } }
			public ITable<ConversationGroups>                                 ConversationGroups                                 { get { return _dataContext.GetTable<ConversationGroups>(); } }
			public ITable<ConversationPriorities>                             ConversationPriorities                             { get { return _dataContext.GetTable<ConversationPriorities>(); } }
			public ITable<Credentials>                                        Credentials                                        { get { return _dataContext.GetTable<Credentials>(); } }
			public ITable<CryptographicProviders>                             CryptographicProviders                             { get { return _dataContext.GetTable<CryptographicProviders>(); } }
			public ITable<CryptProperties>                                    CryptProperties                                    { get { return _dataContext.GetTable<CryptProperties>(); } }
			public ITable<DatabaseAuditSpecificationDetails>                  DatabaseAuditSpecificationDetails                  { get { return _dataContext.GetTable<DatabaseAuditSpecificationDetails>(); } }
			public ITable<DatabaseAuditSpecifications>                        DatabaseAuditSpecifications                        { get { return _dataContext.GetTable<DatabaseAuditSpecifications>(); } }
			public ITable<DatabaseAutomaticTuningMode>                        DatabaseAutomaticTuningMode                        { get { return _dataContext.GetTable<DatabaseAutomaticTuningMode>(); } }
			public ITable<DatabaseAutomaticTuningOptions>                     DatabaseAutomaticTuningOptions                     { get { return _dataContext.GetTable<DatabaseAutomaticTuningOptions>(); } }
			public ITable<DatabaseCredentials>                                DatabaseCredentials                                { get { return _dataContext.GetTable<DatabaseCredentials>(); } }
			public ITable<DatabaseFiles>                                      DatabaseFiles                                      { get { return _dataContext.GetTable<DatabaseFiles>(); } }
			public ITable<DatabaseFilestreamOptions>                          DatabaseFilestreamOptions                          { get { return _dataContext.GetTable<DatabaseFilestreamOptions>(); } }
			public ITable<DatabaseMirroring>                                  DatabaseMirroring                                  { get { return _dataContext.GetTable<DatabaseMirroring>(); } }
			public ITable<DatabaseMirroringEndpoints>                         DatabaseMirroringEndpoints                         { get { return _dataContext.GetTable<DatabaseMirroringEndpoints>(); } }
			public ITable<DatabaseMirroringWitnesses>                         DatabaseMirroringWitnesses                         { get { return _dataContext.GetTable<DatabaseMirroringWitnesses>(); } }
			public ITable<DatabasePermissions>                                DatabasePermissions                                { get { return _dataContext.GetTable<DatabasePermissions>(); } }
			public ITable<DatabasePrincipals>                                 DatabasePrincipals                                 { get { return _dataContext.GetTable<DatabasePrincipals>(); } }
			public ITable<DatabaseQueryStoreOptions>                          DatabaseQueryStoreOptions                          { get { return _dataContext.GetTable<DatabaseQueryStoreOptions>(); } }
			public ITable<DatabaseRecoveryStatus>                             DatabaseRecoveryStatus                             { get { return _dataContext.GetTable<DatabaseRecoveryStatus>(); } }
			public ITable<DatabaseRoleMembers>                                DatabaseRoleMembers                                { get { return _dataContext.GetTable<DatabaseRoleMembers>(); } }
			public ITable<Databases>                                          Databases                                          { get { return _dataContext.GetTable<Databases>(); } }
			public ITable<DatabaseScopedConfigurations>                       DatabaseScopedConfigurations                       { get { return _dataContext.GetTable<DatabaseScopedConfigurations>(); } }
			public ITable<DatabaseScopedCredentials>                          DatabaseScopedCredentials                          { get { return _dataContext.GetTable<DatabaseScopedCredentials>(); } }
			public ITable<DataSpaces>                                         DataSpaces                                         { get { return _dataContext.GetTable<DataSpaces>(); } }
			/// <summary>
			/// Contains a row for each object that is a default definition (created as part of a CREATE TABLE or ALTER TABLE statement instead of a CREATE DEFAULT statement), with <b>sys.objects.type</b> = D.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-default-constraints-transact-sql?view=sql-server-ver15'>sys.default_constraints</a>.
			/// </summary>
			public ITable<DefaultConstraints>                                 DefaultConstraints                                 { get { return _dataContext.GetTable<DefaultConstraints>(); } }
			public ITable<DestinationDataSpaces>                              DestinationDataSpaces                              { get { return _dataContext.GetTable<DestinationDataSpaces>(); } }
			public ITable<EdgeConstraintClauses>                              EdgeConstraintClauses                              { get { return _dataContext.GetTable<EdgeConstraintClauses>(); } }
			public ITable<EdgeConstraints>                                    EdgeConstraints                                    { get { return _dataContext.GetTable<EdgeConstraints>(); } }
			public ITable<Endpoints>                                          Endpoints                                          { get { return _dataContext.GetTable<Endpoints>(); } }
			public ITable<EndpointWebmethods>                                 EndpointWebmethods                                 { get { return _dataContext.GetTable<EndpointWebmethods>(); } }
			/// <summary>
			/// Returns a row for each event or event group on which an event notification can fire.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-event-notification-event-types-transact-sql?view=sql-server-ver15'>sys.event_notification_event_types</a>.
			/// </summary>
			public ITable<EventNotificationEventTypes>                        EventNotificationEventTypes                        { get { return _dataContext.GetTable<EventNotificationEventTypes>(); } }
			/// <summary>
			/// Returns a row for each object that is an event notification, with <b>sys.objects.type</b> = EN.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-event-notifications-transact-sql?view=sql-server-ver15'>sys.event_notifications</a>.
			/// </summary>
			public ITable<EventNotifications>                                 EventNotifications                                 { get { return _dataContext.GetTable<EventNotifications>(); } }
			/// <summary>
			/// Contains a row for each event for which a trigger or event notification fires. These events represent the event types that are specified when the trigger or event notification is created by using <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/create-trigger-transact-sql?view=sql-server-ver15'>CREATE TRIGGER</a> or <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/create-event-notification-transact-sql?view=sql-server-ver15'>CREATE EVENT NOTIFICATION</a>.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-events-transact-sql?view=sql-server-ver15'>sys.events</a>.
			/// </summary>
			public ITable<Events>                                             Events                                             { get { return _dataContext.GetTable<Events>(); } }
			/// <summary>
			/// Contains a row for each object that is an extended stored procedure, with <b>sys.objects.type</b> = X. Because extended stored procedures are installed into the <b>master</b> database, they are only visible from that database context. Selecting from the <b>sys.extended_procedures</b> view in any other database context will return an empty result set.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-extended-procedures-transact-sql?view=sql-server-ver15'>sys.extended_procedures</a>.
			/// </summary>
			public ITable<ExtendedProcedures>                                 ExtendedProcedures                                 { get { return _dataContext.GetTable<ExtendedProcedures>(); } }
			public ITable<ExtendedProperties>                                 ExtendedProperties                                 { get { return _dataContext.GetTable<ExtendedProperties>(); } }
			public ITable<ExternalDataSources>                                ExternalDataSources                                { get { return _dataContext.GetTable<ExternalDataSources>(); } }
			public ITable<ExternalFileFormats>                                ExternalFileFormats                                { get { return _dataContext.GetTable<ExternalFileFormats>(); } }
			/// <summary>
			/// This catalog view provides a list of the external language extension files in the database. <b>R</b> and <b>Python</b> are reserved names and no external language can be created with those specific names.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-external-language-files-transact-sql?view=sql-server-ver15'>sys.external_language_files</a>.
			/// </summary>
			public ITable<ExternalLanguageFiles>                              ExternalLanguageFiles                              { get { return _dataContext.GetTable<ExternalLanguageFiles>(); } }
			/// <summary>
			/// This catalog view provides a list of the external languages in the database. <b>R</b> and <b>Python</b> are reserved names and no external language can be created with those specific names.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-external-languages-transact-sql?view=sql-server-ver15'>sys.external_languages</a>.
			/// </summary>
			public ITable<ExternalLanguages>                                  ExternalLanguages                                  { get { return _dataContext.GetTable<ExternalLanguages>(); } }
			/// <summary>
			/// Supports the management of package libraries related to external runtimes such as R, Python, and Java.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-external-libraries-transact-sql?view=sql-server-ver15'>sys.external_libraries</a>.
			/// </summary>
			public ITable<ExternalLibraries>                                  ExternalLibraries                                  { get { return _dataContext.GetTable<ExternalLibraries>(); } }
			public ITable<ExternalLibrariesInstalled>                         ExternalLibrariesInstalled                         { get { return _dataContext.GetTable<ExternalLibrariesInstalled>(); } }
			/// <summary>
			/// Lists a row for each file that makes up an external library.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-external-library-files-transact-sql?view=sql-server-ver15'>sys.external_library_files</a>.
			/// </summary>
			public ITable<ExternalLibraryFiles>                               ExternalLibraryFiles                               { get { return _dataContext.GetTable<ExternalLibraryFiles>(); } }
			public ITable<ExternalLibrarySetupErrors>                         ExternalLibrarySetupErrors                         { get { return _dataContext.GetTable<ExternalLibrarySetupErrors>(); } }
			public ITable<ExternalTableColumns>                               ExternalTableColumns                               { get { return _dataContext.GetTable<ExternalTableColumns>(); } }
			public ITable<ExternalTables>                                     ExternalTables                                     { get { return _dataContext.GetTable<ExternalTables>(); } }
			public ITable<Filegroups>                                         Filegroups                                         { get { return _dataContext.GetTable<Filegroups>(); } }
			public ITable<Filetables>                                         Filetables                                         { get { return _dataContext.GetTable<Filetables>(); } }
			public ITable<FiletableSystemDefinedObjects>                      FiletableSystemDefinedObjects                      { get { return _dataContext.GetTable<FiletableSystemDefinedObjects>(); } }
			/// <summary>
			/// Contains a row for each column, or set of columns, that comprise a foreign key.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-foreign-key-columns-transact-sql?view=sql-server-ver15'>sys.foreign_key_columns</a>.
			/// </summary>
			public ITable<ForeignKeyColumns>                                  ForeignKeyColumns                                  { get { return _dataContext.GetTable<ForeignKeyColumns>(); } }
			/// <summary>
			/// Contains a row per object that is a FOREIGN KEY constraint, with <b>sys.object.type</b> = F.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-foreign-keys-transact-sql?view=sql-server-ver15'>sys.foreign_keys</a>.
			/// </summary>
			public ITable<ForeignKeys>                                        ForeignKeys                                        { get { return _dataContext.GetTable<ForeignKeys>(); } }
			public ITable<FulltextCatalogs>                                   FulltextCatalogs                                   { get { return _dataContext.GetTable<FulltextCatalogs>(); } }
			public ITable<FulltextDocumentTypes>                              FulltextDocumentTypes                              { get { return _dataContext.GetTable<FulltextDocumentTypes>(); } }
			public ITable<FulltextIndexCatalogUsages>                         FulltextIndexCatalogUsages                         { get { return _dataContext.GetTable<FulltextIndexCatalogUsages>(); } }
			public ITable<FulltextIndexColumns>                               FulltextIndexColumns                               { get { return _dataContext.GetTable<FulltextIndexColumns>(); } }
			public ITable<FulltextIndexes>                                    FulltextIndexes                                    { get { return _dataContext.GetTable<FulltextIndexes>(); } }
			public ITable<FulltextIndexFragments>                             FulltextIndexFragments                             { get { return _dataContext.GetTable<FulltextIndexFragments>(); } }
			public ITable<FulltextLanguages>                                  FulltextLanguages                                  { get { return _dataContext.GetTable<FulltextLanguages>(); } }
			public ITable<FulltextSemanticLanguages>                          FulltextSemanticLanguages                          { get { return _dataContext.GetTable<FulltextSemanticLanguages>(); } }
			public ITable<FulltextSemanticLanguageStatisticsDatabase>         FulltextSemanticLanguageStatisticsDatabase         { get { return _dataContext.GetTable<FulltextSemanticLanguageStatisticsDatabase>(); } }
			public ITable<FulltextStoplists>                                  FulltextStoplists                                  { get { return _dataContext.GetTable<FulltextStoplists>(); } }
			public ITable<FulltextStopwords>                                  FulltextStopwords                                  { get { return _dataContext.GetTable<FulltextStopwords>(); } }
			public ITable<FulltextSystemStopwords>                            FulltextSystemStopwords                            { get { return _dataContext.GetTable<FulltextSystemStopwords>(); } }
			/// <summary>
			/// Returns one row per column that is a part of an <b>ORDER</b> expression of a common language runtime (CLR) table-valued function.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-function-order-columns-transact-sql?view=sql-server-ver15'>sys.function_order_columns</a>.
			/// </summary>
			public ITable<FunctionOrderColumns>                               FunctionOrderColumns                               { get { return _dataContext.GetTable<FunctionOrderColumns>(); } }
			/// <summary>
			/// Shows the current hash indexes and the hash index properties. Hash indexes are supported only on <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../in-memory-oltp/overview-and-usage-scenarios?view=sql-server-ver15'>In-Memory OLTP (In-Memory Optimization)</a>.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-hash-indexes-transact-sql?view=sql-server-ver15'>sys.hash_indexes</a>.
			/// </summary>
			public ITable<HashIndexes>                                        HashIndexes                                        { get { return _dataContext.GetTable<HashIndexes>(); } }
			public ITable<HttpEndpoints>                                      HttpEndpoints                                      { get { return _dataContext.GetTable<HttpEndpoints>(); } }
			/// <summary>
			/// Contains a row for each column that is an identity column.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-identity-columns-transact-sql?view=sql-server-ver15'>sys.identity_columns</a>.
			/// </summary>
			public ITable<IdentityColumns>                                    IdentityColumns                                    { get { return _dataContext.GetTable<IdentityColumns>(); } }
			/// <summary>
			/// Contains one row per column that is part of a <b>sys.indexes</b> index or unordered table (heap).<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-index-columns-transact-sql?view=sql-server-ver15'>sys.index_columns</a>.
			/// </summary>
			public ITable<IndexColumns>                                       IndexColumns                                       { get { return _dataContext.GetTable<IndexColumns>(); } }
			/// <summary>
			/// Contains a row per index or heap of a tabular object, such as a table, view, or table-valued function.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-indexes-transact-sql?view=sql-server-ver15'>sys.indexes</a>.
			/// </summary>
			public ITable<Indexes>                                            Indexes                                            { get { return _dataContext.GetTable<Indexes>(); } }
			/// <summary>
			/// <b>sys.index_resumable_operations</b> is a system view that monitors and checks the current execution status for resumable Index rebuild or creation.<br/>
			/// <b>Applies to</b>: SQL Server (2017 and newer), and Azure SQL Database<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-index-resumable-operations?view=sql-server-ver15'>sys.index_resumable_operations</a>.
			/// </summary>
			public ITable<IndexResumableOperations>                           IndexResumableOperations                           { get { return _dataContext.GetTable<IndexResumableOperations>(); } }
			/// <summary>
			/// Returns one row for each rowset that tracks internal data for columnstore indexes on disk-based tables. These rowsets are internal to columnstore indexes and track deleted rows, rowgroup mappings, and delta store rowgroups. They track data for each for each table partition; every table has at least one partition. SQL Server re-creates the rowsets each time it rebuilds the columnstore index.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-internal-partitions-transact-sql?view=sql-server-ver15'>sys.internal_partitions</a>.
			/// </summary>
			public ITable<InternalPartitions>                                 InternalPartitions                                 { get { return _dataContext.GetTable<InternalPartitions>(); } }
			/// <summary>
			/// Returns one row for each object that is an internal table. Internal tables are automatically generated by SQL Server to support various features. For example, when you create a primary XML index, SQL Server automatically creates an internal table to persist the shredded XML document data. Internal tables appear in the <b>sys</b> schema of every database and have unique, system-generated names that indicate their function, for example, <b>xml_index_nodes_2021582240_32001</b> or <b>queue_messages_1977058079</b><br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-internal-tables-transact-sql?view=sql-server-ver15'>sys.internal_tables</a>.
			/// </summary>
			public ITable<InternalTables>                                     InternalTables                                     { get { return _dataContext.GetTable<InternalTables>(); } }
			/// <summary>
			/// Contains a row for each object that is a primary key or unique constraint. Includes <b>sys.objects.type</b> PK and UQ.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-key-constraints-transact-sql?view=sql-server-ver15'>sys.key_constraints</a>.
			/// </summary>
			public ITable<KeyConstraints>                                     KeyConstraints                                     { get { return _dataContext.GetTable<KeyConstraints>(); } }
			public ITable<KeyEncryptions>                                     KeyEncryptions                                     { get { return _dataContext.GetTable<KeyEncryptions>(); } }
			public ITable<LinkedLogins>                                       LinkedLogins                                       { get { return _dataContext.GetTable<LinkedLogins>(); } }
			public ITable<LoginToken>                                         LoginToken                                         { get { return _dataContext.GetTable<LoginToken>(); } }
			/// <summary>
			/// Use the <b>sys.masked_columns</b> view to query for table-columns that have a dynamic data masking function applied to them. This view inherits from the <b>sys.columns</b> view. It returns all columns in the <b>sys.columns</b> view, plus the <b>is_masked</b> and <b>masking_function</b> columns, indicating if the column is masked, and if so, what masking function is defined. This view only shows the columns on which there is a masking function applied.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-masked-columns-transact-sql?view=sql-server-ver15'>sys.masked_columns</a>.
			/// </summary>
			public ITable<MaskedColumns>                                      MaskedColumns                                      { get { return _dataContext.GetTable<MaskedColumns>(); } }
			public ITable<MasterFiles>                                        MasterFiles                                        { get { return _dataContext.GetTable<MasterFiles>(); } }
			public ITable<MasterKeyPasswords>                                 MasterKeyPasswords                                 { get { return _dataContext.GetTable<MasterKeyPasswords>(); } }
			/// <summary>
			/// Contains a row for each internal memory-optimized table used for storing user memory-optimized tables. Each user table corresponds to one or more internal tables. A single table is used for the core data storage. Additional internal tables are used to support features such as temporal, columnstore index and off-row (LOB) storage for memory-optimized tables.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-memory-optimized-tables-internal-attributes-transact-sql?view=sql-server-ver15'>sys.memory_optimized_tables_internal_attributes</a>.
			/// </summary>
			public ITable<MemoryOptimizedTablesInternalAttributes>            MemoryOptimizedTablesInternalAttributes            { get { return _dataContext.GetTable<MemoryOptimizedTablesInternalAttributes>(); } }
			public ITable<Messages>                                           Messages                                           { get { return _dataContext.GetTable<Messages>(); } }
			public ITable<MessageTypeXmlSchemaCollectionUsages>               MessageTypeXmlSchemaCollectionUsages               { get { return _dataContext.GetTable<MessageTypeXmlSchemaCollectionUsages>(); } }
			/// <summary>
			/// Returns a row for each module-to-assembly reference.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-module-assembly-usages-transact-sql?view=sql-server-ver15'>sys.module_assembly_usages</a>.
			/// </summary>
			public ITable<ModuleAssemblyUsages>                               ModuleAssemblyUsages                               { get { return _dataContext.GetTable<ModuleAssemblyUsages>(); } }
			/// <summary>
			/// Contains one row for each parameter of a numbered procedure. When you create a numbered stored procedure, the base procedure is number 1. All subsequent procedures have numbers 2, 3, and so forth. <b>sys.numbered_procedure_parameters</b> contains the parameter definitions for all subsequent procedures, numbered 2 and greater. This view does not show parameters for the base stored procedure (number = 1). The base stored procedure is similar to a nonnumbered stored procedure. Therefore, its parameters are represented in <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-parameters-transact-sql?view=sql-server-ver15'>sys.parameters (Transact-SQL)</a>.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-numbered-procedure-parameters-transact-sql?view=sql-server-ver15'>sys.numbered_procedure_parameters</a>.
			/// </summary>
			public ITable<NumberedProcedureParameters>                        NumberedProcedureParameters                        { get { return _dataContext.GetTable<NumberedProcedureParameters>(); } }
			/// <summary>
			/// Contains a row for each SQL Server stored procedure that was created as a numbered procedure. This does not show a row for the base (number = 1) stored procedure. Entries for the base stored procedures can be found in views such as <b>sys.objects</b> and <b>sys.procedures</b>.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-numbered-procedures-transact-sql?view=sql-server-ver15'>sys.numbered_procedures</a>.
			/// </summary>
			public ITable<NumberedProcedures>                                 NumberedProcedures                                 { get { return _dataContext.GetTable<NumberedProcedures>(); } }
			/// <summary>
			/// Contains a row for each user-defined, schema-scoped object that is created within a database, including natively compiled scalar user-defined function.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-objects-transact-sql?view=sql-server-ver15'>sys.objects</a>.
			/// </summary>
			public ITable<Objects>                                            Objects                                            { get { return _dataContext.GetTable<Objects>(); } }
			public ITable<Openkeys>                                           Openkeys                                           { get { return _dataContext.GetTable<Openkeys>(); } }
			/// <summary>
			/// Contains a row for each parameter of an object that accepts parameters. If the object is a scalar function, there is also a single row describing the return value. That row will have a <b>parameter_id</b> value of 0.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-parameters-transact-sql?view=sql-server-ver15'>sys.parameters</a>.
			/// </summary>
			public ITable<Parameters>                                         Parameters                                         { get { return _dataContext.GetTable<Parameters>(); } }
			/// <summary>
			/// Returns one row for each parameter that is of user-defined type.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-parameter-type-usages-transact-sql?view=sql-server-ver15'>sys.parameter_type_usages</a>.
			/// </summary>
			public ITable<ParameterTypeUsages>                                ParameterTypeUsages                                { get { return _dataContext.GetTable<ParameterTypeUsages>(); } }
			public ITable<PartitionFunctions>                                 PartitionFunctions                                 { get { return _dataContext.GetTable<PartitionFunctions>(); } }
			public ITable<PartitionParameters>                                PartitionParameters                                { get { return _dataContext.GetTable<PartitionParameters>(); } }
			public ITable<PartitionRangeValues>                               PartitionRangeValues                               { get { return _dataContext.GetTable<PartitionRangeValues>(); } }
			/// <summary>
			/// Contains a row for each partition of all the tables and most types of indexes in the database. Special index types such as Full-Text, Spatial, and XML are not included in this view. All tables and indexes in SQL Server contain at least one partition, whether or not they are explicitly partitioned.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-partitions-transact-sql?view=sql-server-ver15'>sys.partitions</a>.
			/// </summary>
			public ITable<Partitions>                                         Partitions                                         { get { return _dataContext.GetTable<Partitions>(); } }
			public ITable<PartitionSchemes>                                   PartitionSchemes                                   { get { return _dataContext.GetTable<PartitionSchemes>(); } }
			/// <summary>
			/// Returns a row for each table for which periods have been defined.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-periods-transact-sql?view=sql-server-ver15'>sys.periods</a>.
			/// </summary>
			public ITable<Periods>                                            Periods                                            { get { return _dataContext.GetTable<Periods>(); } }
			/// <summary>
			/// Contains a row for each plan guide in the database.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-plan-guides-transact-sql?view=sql-server-ver15'>sys.plan_guides</a>.
			/// </summary>
			public ITable<PlanGuides>                                         PlanGuides                                         { get { return _dataContext.GetTable<PlanGuides>(); } }
			/// <summary>
			/// Contains a row for each object that is a procedure of some kind, with <b>sys.objects.type</b> = P, X, RF, and PC.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-procedures-transact-sql?view=sql-server-ver15'>sys.procedures</a>.
			/// </summary>
			public ITable<Procedures>                                         Procedures                                         { get { return _dataContext.GetTable<Procedures>(); } }
			public ITable<QueryContextSettings>                               QueryContextSettings                               { get { return _dataContext.GetTable<QueryContextSettings>(); } }
			public ITable<QueryStorePlan>                                     QueryStorePlan                                     { get { return _dataContext.GetTable<QueryStorePlan>(); } }
			public ITable<QueryStoreQuery>                                    QueryStoreQuery                                    { get { return _dataContext.GetTable<QueryStoreQuery>(); } }
			public ITable<QueryStoreQueryText>                                QueryStoreQueryText                                { get { return _dataContext.GetTable<QueryStoreQueryText>(); } }
			public ITable<QueryStoreRuntimeStats>                             QueryStoreRuntimeStats                             { get { return _dataContext.GetTable<QueryStoreRuntimeStats>(); } }
			public ITable<QueryStoreRuntimeStatsInterval>                     QueryStoreRuntimeStatsInterval                     { get { return _dataContext.GetTable<QueryStoreRuntimeStatsInterval>(); } }
			public ITable<QueryStoreWaitStats>                                QueryStoreWaitStats                                { get { return _dataContext.GetTable<QueryStoreWaitStats>(); } }
			public ITable<RegisteredSearchProperties>                         RegisteredSearchProperties                         { get { return _dataContext.GetTable<RegisteredSearchProperties>(); } }
			public ITable<RegisteredSearchPropertyLists>                      RegisteredSearchPropertyLists                      { get { return _dataContext.GetTable<RegisteredSearchPropertyLists>(); } }
			public ITable<RemoteDataArchiveDatabases>                         RemoteDataArchiveDatabases                         { get { return _dataContext.GetTable<RemoteDataArchiveDatabases>(); } }
			public ITable<RemoteDataArchiveTables>                            RemoteDataArchiveTables                            { get { return _dataContext.GetTable<RemoteDataArchiveTables>(); } }
			public ITable<RemoteLogins>                                       RemoteLogins                                       { get { return _dataContext.GetTable<RemoteLogins>(); } }
			public ITable<RemoteServiceBindings>                              RemoteServiceBindings                              { get { return _dataContext.GetTable<RemoteServiceBindings>(); } }
			public ITable<ResourceGovernorConfiguration>                      ResourceGovernorConfiguration                      { get { return _dataContext.GetTable<ResourceGovernorConfiguration>(); } }
			public ITable<ResourceGovernorExternalResourcePoolAffinity>       ResourceGovernorExternalResourcePoolAffinity       { get { return _dataContext.GetTable<ResourceGovernorExternalResourcePoolAffinity>(); } }
			public ITable<ResourceGovernorExternalResourcePools>              ResourceGovernorExternalResourcePools              { get { return _dataContext.GetTable<ResourceGovernorExternalResourcePools>(); } }
			public ITable<ResourceGovernorResourcePoolAffinity>               ResourceGovernorResourcePoolAffinity               { get { return _dataContext.GetTable<ResourceGovernorResourcePoolAffinity>(); } }
			public ITable<ResourceGovernorResourcePools>                      ResourceGovernorResourcePools                      { get { return _dataContext.GetTable<ResourceGovernorResourcePools>(); } }
			public ITable<ResourceGovernorWorkloadGroups>                     ResourceGovernorWorkloadGroups                     { get { return _dataContext.GetTable<ResourceGovernorWorkloadGroups>(); } }
			public ITable<Routes>                                             Routes                                             { get { return _dataContext.GetTable<Routes>(); } }
			public ITable<Schemas>                                            Schemas                                            { get { return _dataContext.GetTable<Schemas>(); } }
			public ITable<SecurableClasses>                                   SecurableClasses                                   { get { return _dataContext.GetTable<SecurableClasses>(); } }
			public ITable<SecurityPolicies>                                   SecurityPolicies                                   { get { return _dataContext.GetTable<SecurityPolicies>(); } }
			public ITable<SecurityPredicates>                                 SecurityPredicates                                 { get { return _dataContext.GetTable<SecurityPredicates>(); } }
			public ITable<SelectiveXmlIndexNamespaces>                        SelectiveXmlIndexNamespaces                        { get { return _dataContext.GetTable<SelectiveXmlIndexNamespaces>(); } }
			public ITable<SensitivityClassifications>                         SensitivityClassifications                         { get { return _dataContext.GetTable<SensitivityClassifications>(); } }
			/// <summary>
			/// Contains a row for each sequence object in a database.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-sequences-transact-sql?view=sql-server-ver15'>sys.sequences</a>.
			/// </summary>
			public ITable<Sequences>                                          Sequences                                          { get { return _dataContext.GetTable<Sequences>(); } }
			/// <summary>
			/// Contains one row for each assembly module for the server-level triggers of type TA. This view maps assembly triggers to the underlying CLR implementation. You can join this relation to <b>sys.server_triggers</b>. The assembly must be loaded into the <b>master</b> database. The tuple (object_id) is the key for the relation.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-server-assembly-modules-transact-sql?view=sql-server-ver15'>sys.server_assembly_modules</a>.
			/// </summary>
			public ITable<ServerAssemblyModules>                              ServerAssemblyModules                              { get { return _dataContext.GetTable<ServerAssemblyModules>(); } }
			public ITable<ServerAudits>                                       ServerAudits                                       { get { return _dataContext.GetTable<ServerAudits>(); } }
			public ITable<ServerAuditSpecificationDetails>                    ServerAuditSpecificationDetails                    { get { return _dataContext.GetTable<ServerAuditSpecificationDetails>(); } }
			public ITable<ServerAuditSpecifications>                          ServerAuditSpecifications                          { get { return _dataContext.GetTable<ServerAuditSpecifications>(); } }
			/// <summary>
			/// Returns a row for each server-level event notification object.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-server-event-notifications-transact-sql?view=sql-server-ver15'>sys.server_event_notifications</a>.
			/// </summary>
			public ITable<ServerEventNotifications>                           ServerEventNotifications                           { get { return _dataContext.GetTable<ServerEventNotifications>(); } }
			/// <summary>
			/// Contains one row for each event for which a server-level event-notification or server-level DDL trigger fires. The columns <b>object_id</b> and <b>type</b> uniquely identify the server event.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-server-events-transact-sql?view=sql-server-ver15'>sys.server_events</a>.
			/// </summary>
			public ITable<ServerEvents>                                       ServerEvents                                       { get { return _dataContext.GetTable<ServerEvents>(); } }
			public ITable<ServerEventSessionActions>                          ServerEventSessionActions                          { get { return _dataContext.GetTable<ServerEventSessionActions>(); } }
			public ITable<ServerEventSessionEvents>                           ServerEventSessionEvents                           { get { return _dataContext.GetTable<ServerEventSessionEvents>(); } }
			public ITable<ServerEventSessionFields>                           ServerEventSessionFields                           { get { return _dataContext.GetTable<ServerEventSessionFields>(); } }
			public ITable<ServerEventSessions>                                ServerEventSessions                                { get { return _dataContext.GetTable<ServerEventSessions>(); } }
			public ITable<ServerEventSessionTargets>                          ServerEventSessionTargets                          { get { return _dataContext.GetTable<ServerEventSessionTargets>(); } }
			public ITable<ServerFileAudits>                                   ServerFileAudits                                   { get { return _dataContext.GetTable<ServerFileAudits>(); } }
			public ITable<ServerMemoryOptimizedHybridBufferPoolConfiguration> ServerMemoryOptimizedHybridBufferPoolConfiguration { get { return _dataContext.GetTable<ServerMemoryOptimizedHybridBufferPoolConfiguration>(); } }
			public ITable<ServerPermissions>                                  ServerPermissions                                  { get { return _dataContext.GetTable<ServerPermissions>(); } }
			public ITable<ServerPrincipalCredentials>                         ServerPrincipalCredentials                         { get { return _dataContext.GetTable<ServerPrincipalCredentials>(); } }
			public ITable<ServerPrincipals>                                   ServerPrincipals                                   { get { return _dataContext.GetTable<ServerPrincipals>(); } }
			public ITable<ServerRoleMembers>                                  ServerRoleMembers                                  { get { return _dataContext.GetTable<ServerRoleMembers>(); } }
			public ITable<Servers>                                            Servers                                            { get { return _dataContext.GetTable<Servers>(); } }
			/// <summary>
			/// Contains the set of SQL modules for server-level triggers of type TR. You can join this relation to sys.server_triggers. The tuple (object_id) is the key of the relation.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-server-sql-modules-transact-sql?view=sql-server-ver15'>sys.server_sql_modules</a>.
			/// </summary>
			public ITable<ServerSqlModules>                                   ServerSqlModules                                   { get { return _dataContext.GetTable<ServerSqlModules>(); } }
			/// <summary>
			/// Contains one row for each event for which a server-level (synchronous) trigger fires.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-server-trigger-events-transact-sql?view=sql-server-ver15'>sys.server_trigger_events</a>.
			/// </summary>
			public ITable<ServerTriggerEvents>                                ServerTriggerEvents                                { get { return _dataContext.GetTable<ServerTriggerEvents>(); } }
			/// <summary>
			/// Contains the set of all server-level DDL triggers with object_type of TR or TA. In the case of CLR triggers, the assembly must be loaded into the <b>master</b> database. All server-level DDL trigger names exist in a single, global scope.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-server-triggers-transact-sql?view=sql-server-ver15'>sys.server_triggers</a>.
			/// </summary>
			public ITable<ServerTriggers>                                     ServerTriggers                                     { get { return _dataContext.GetTable<ServerTriggers>(); } }
			public ITable<ServiceBrokerEndpoints>                             ServiceBrokerEndpoints                             { get { return _dataContext.GetTable<ServiceBrokerEndpoints>(); } }
			public ITable<ServiceContractMessageUsages>                       ServiceContractMessageUsages                       { get { return _dataContext.GetTable<ServiceContractMessageUsages>(); } }
			public ITable<ServiceContracts>                                   ServiceContracts                                   { get { return _dataContext.GetTable<ServiceContracts>(); } }
			public ITable<ServiceContractUsages>                              ServiceContractUsages                              { get { return _dataContext.GetTable<ServiceContractUsages>(); } }
			public ITable<ServiceMessageTypes>                                ServiceMessageTypes                                { get { return _dataContext.GetTable<ServiceMessageTypes>(); } }
			public ITable<ServiceQueues>                                      ServiceQueues                                      { get { return _dataContext.GetTable<ServiceQueues>(); } }
			public ITable<ServiceQueueUsages>                                 ServiceQueueUsages                                 { get { return _dataContext.GetTable<ServiceQueueUsages>(); } }
			public ITable<Services>                                           Services                                           { get { return _dataContext.GetTable<Services>(); } }
			public ITable<SoapEndpoints>                                      SoapEndpoints                                      { get { return _dataContext.GetTable<SoapEndpoints>(); } }
			public ITable<SpatialIndexes>                                     SpatialIndexes                                     { get { return _dataContext.GetTable<SpatialIndexes>(); } }
			public ITable<SpatialIndexTessellations>                          SpatialIndexTessellations                          { get { return _dataContext.GetTable<SpatialIndexTessellations>(); } }
			public ITable<SpatialReferenceSystems>                            SpatialReferenceSystems                            { get { return _dataContext.GetTable<SpatialReferenceSystems>(); } }
			/// <summary>
			/// Contains a row for each dependency on a referenced entity as referenced in the Transact-SQL expression or statements that define some other referencing object.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-sql-dependencies-transact-sql?view=sql-server-ver15'>sys.sql_dependencies</a>.
			/// </summary>
			public ITable<SqlDependencies>                                    SqlDependencies                                    { get { return _dataContext.GetTable<SqlDependencies>(); } }
			/// <summary>
			/// Contains one row for each by-name dependency on a user-defined entity in the current database. This includes dependences between natively compiled, scalar user-defined functions and other SQL Server modules. A dependency between two entities is created when one entity, called the <em>referenced entity</em>, appears by name in a persisted SQL expression of another entity, called the <em>referencing entity</em>. For example, when a table is referenced in the definition of a view, the view, as the referencing entity, depends on the table, the referenced entity. If the table is dropped, the view is unusable.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-sql-expression-dependencies-transact-sql?view=sql-server-ver15'>sys.sql_expression_dependencies</a>.
			/// </summary>
			public ITable<SqlExpressionDependencies>                          SqlExpressionDependencies                          { get { return _dataContext.GetTable<SqlExpressionDependencies>(); } }
			public ITable<SqlFeatureRestrictions>                             SqlFeatureRestrictions                             { get { return _dataContext.GetTable<SqlFeatureRestrictions>(); } }
			public ITable<SqlLogins>                                          SqlLogins                                          { get { return _dataContext.GetTable<SqlLogins>(); } }
			/// <summary>
			/// Returns a row for each object that is an SQL language-defined module in SQL Server, including natively compiled scalar user-defined function. Objects of type P, RF, V, TR, FN, IF, TF, and R have an associated SQL module. Stand-alone defaults, objects of type D, also have an SQL module definition in this view. For a description of these types, see the <i>type</i> column in the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-objects-transact-sql?view=sql-server-ver15'>sys.objects</a> catalog view.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-sql-modules-transact-sql?view=sql-server-ver15'>sys.sql_modules</a>.
			/// </summary>
			public ITable<SqlModules>                                         SqlModules                                         { get { return _dataContext.GetTable<SqlModules>(); } }
			/// <summary>
			/// Contains a row for each statistics object that exists for the tables, indexes, and indexed views in the database in SQL Server. Every index will have a corresponding statistics row with the same name and ID (<b>index_id</b> = <b>stats_id</b>), but not every statistics row has a corresponding index.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-stats-transact-sql?view=sql-server-ver15'>sys.stats</a>.
			/// </summary>
			public ITable<Stats>                                              Stats                                              { get { return _dataContext.GetTable<Stats>(); } }
			/// <summary>
			/// Contains a row for each column that is part of <b>sys.stats</b> statistics.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-stats-columns-transact-sql?view=sql-server-ver15'>sys.stats_columns</a>.
			/// </summary>
			public ITable<StatsColumns>                                       StatsColumns                                       { get { return _dataContext.GetTable<StatsColumns>(); } }
			public ITable<SymmetricKeys>                                      SymmetricKeys                                      { get { return _dataContext.GetTable<SymmetricKeys>(); } }
			/// <summary>
			/// Contains a row for each synonym object that is <b>sys.objects.type</b> = SN.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-synonyms-transact-sql?view=sql-server-ver15'>sys.synonyms</a>.
			/// </summary>
			public ITable<Synonyms>                                           Synonyms                                           { get { return _dataContext.GetTable<Synonyms>(); } }
			/// <summary>
			/// Contains a row for each column of system objects that have columns.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-system-columns-transact-sql?view=sql-server-ver15'>sys.system_columns</a>.
			/// </summary>
			public ITable<SystemColumns>                                      SystemColumns                                      { get { return _dataContext.GetTable<SystemColumns>(); } }
			public ITable<SystemComponentsSurfaceAreaConfiguration>           SystemComponentsSurfaceAreaConfiguration           { get { return _dataContext.GetTable<SystemComponentsSurfaceAreaConfiguration>(); } }
			public ITable<SystemInternalsAllocationUnits>                     SystemInternalsAllocationUnits                     { get { return _dataContext.GetTable<SystemInternalsAllocationUnits>(); } }
			public ITable<SystemInternalsPartitionColumns>                    SystemInternalsPartitionColumns                    { get { return _dataContext.GetTable<SystemInternalsPartitionColumns>(); } }
			public ITable<SystemInternalsPartitions>                          SystemInternalsPartitions                          { get { return _dataContext.GetTable<SystemInternalsPartitions>(); } }
			/// <summary>
			/// Contains one row for all schema-scoped system objects that are included with Microsoft SQL Server. All system objects are contained in the schemas named sys or INFORMATION_SCHEMA.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-system-objects-transact-sql?view=sql-server-ver15'>sys.system_objects</a>.
			/// </summary>
			public ITable<SystemObjects>                                      SystemObjects                                      { get { return _dataContext.GetTable<SystemObjects>(); } }
			/// <summary>
			/// Contains one row for each system object that has parameters.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-system-parameters-transact-sql?view=sql-server-ver15'>sys.system_parameters</a>.
			/// </summary>
			public ITable<SystemParameters>                                   SystemParameters                                   { get { return _dataContext.GetTable<SystemParameters>(); } }
			/// <summary>
			/// Returns one row per system object that contains an SQL language-defined module. System objects of type FN, IF, P, PC, TF, V have an associated SQL module. To identify the containing object, you can join this view to <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-system-objects-transact-sql?view=sql-server-ver15'>sys.system_objects</a>.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-system-sql-modules-transact-sql?view=sql-server-ver15'>sys.system_sql_modules</a>.
			/// </summary>
			public ITable<SystemSqlModules>                                   SystemSqlModules                                   { get { return _dataContext.GetTable<SystemSqlModules>(); } }
			/// <summary>
			/// Contains one row for each system view that is shipped with SQL Server. All system views are contained in the schemas named <b>sys</b> or <b>INFORMATION_SCHEMA</b>.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-system-views-transact-sql?view=sql-server-ver15'>sys.system_views</a>.
			/// </summary>
			public ITable<SystemViews>                                        SystemViews                                        { get { return _dataContext.GetTable<SystemViews>(); } }
			/// <summary>
			/// Returns a row for each user table in SQL Server.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-tables-transact-sql?view=sql-server-ver15'>sys.tables</a>.
			/// </summary>
			public ITable<Tables>                                             Tables                                             { get { return _dataContext.GetTable<Tables>(); } }
			/// <summary>
			/// Displays properties of user-defined table types in SQL Server. A table type is a type from which table variables or table-valued parameters could be declared. Each table type has a <b>type_table_object_id</b> that is a foreign key into the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-objects-transact-sql?view=sql-server-ver15'>sys.objects</a> catalog view. You can use this ID column to query various catalog views, in a way that is similar to an <b>object_id</b> column of a regular table, to discover the structure of the table type such as its columns and constraints.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-table-types-transact-sql?view=sql-server-ver15'>sys.table_types</a>.
			/// </summary>
			public ITable<TableTypes>                                         TableTypes                                         { get { return _dataContext.GetTable<TableTypes>(); } }
			public ITable<TcpEndpoints>                                       TcpEndpoints                                       { get { return _dataContext.GetTable<TcpEndpoints>(); } }
			public ITable<TimeZoneInfo>                                       TimeZoneInfo                                       { get { return _dataContext.GetTable<TimeZoneInfo>(); } }
			public ITable<TraceCategories>                                    TraceCategories                                    { get { return _dataContext.GetTable<TraceCategories>(); } }
			public ITable<TraceColumns>                                       TraceColumns                                       { get { return _dataContext.GetTable<TraceColumns>(); } }
			public ITable<TraceEventBindings>                                 TraceEventBindings                                 { get { return _dataContext.GetTable<TraceEventBindings>(); } }
			public ITable<TraceEvents>                                        TraceEvents                                        { get { return _dataContext.GetTable<TraceEvents>(); } }
			public ITable<Traces>                                             Traces                                             { get { return _dataContext.GetTable<Traces>(); } }
			public ITable<TraceSubclassValues>                                TraceSubclassValues                                { get { return _dataContext.GetTable<TraceSubclassValues>(); } }
			public ITable<TransmissionQueue>                                  TransmissionQueue                                  { get { return _dataContext.GetTable<TransmissionQueue>(); } }
			/// <summary>
			/// Contains a row per event for which a trigger fires.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-trigger-events-transact-sql?view=sql-server-ver15'>sys.trigger_events</a>.
			/// </summary>
			public ITable<TriggerEvents>                                      TriggerEvents                                      { get { return _dataContext.GetTable<TriggerEvents>(); } }
			/// <summary>
			/// Returns a row for each event or event group on which a trigger can fire.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-trigger-event-types-transact-sql?view=sql-server-ver15'>sys.trigger_event_types</a>.
			/// </summary>
			public ITable<TriggerEventTypes>                                  TriggerEventTypes                                  { get { return _dataContext.GetTable<TriggerEventTypes>(); } }
			/// <summary>
			/// Contains a row for each object that is a trigger, with a type of TR or TA. DML trigger names are schema-scoped and, therefore, are visible in <b>sys.objects</b>. DDL trigger names are scoped by the parent entity and are only visible in this view.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-triggers-transact-sql?view=sql-server-ver15'>sys.triggers</a>.
			/// </summary>
			public ITable<Triggers>                                           Triggers                                           { get { return _dataContext.GetTable<Triggers>(); } }
			public ITable<TrustedAssemblies>                                  TrustedAssemblies                                  { get { return _dataContext.GetTable<TrustedAssemblies>(); } }
			/// <summary>
			/// Contains one row per type to assembly reference.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-type-assembly-usages-transact-sql?view=sql-server-ver15'>sys.type_assembly_usages</a>.
			/// </summary>
			public ITable<TypeAssemblyUsages>                                 TypeAssemblyUsages                                 { get { return _dataContext.GetTable<TypeAssemblyUsages>(); } }
			/// <summary>
			/// Contains a row for each system and user-defined type.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-types-transact-sql?view=sql-server-ver15'>sys.types</a>.
			/// </summary>
			public ITable<Types>                                              Types                                              { get { return _dataContext.GetTable<Types>(); } }
			public ITable<UserToken>                                          UserToken                                          { get { return _dataContext.GetTable<UserToken>(); } }
			public ITable<ViaEndpoints>                                       ViaEndpoints                                       { get { return _dataContext.GetTable<ViaEndpoints>(); } }
			/// <summary>
			/// Contains a row for each view object, with <b>sys.objects.type</b> = V.<br/>
			/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-views-transact-sql?view=sql-server-ver15'>sys.views</a>.
			/// </summary>
			public ITable<Views>                                              Views                                              { get { return _dataContext.GetTable<Views>(); } }

			private readonly IDataContext _dataContext;

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		/// <summary>
		/// Shows the union of all columns belonging to user-defined objects and system objects.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-all-columns-transact-sql?view=sql-server-ver15'>sys.all_columns</a>.
		/// </summary>
		[Table(Schema="sys", Name="all_columns", IsView=true)]
		public partial class AllColumns
		{
			/// <summary>
			/// ID of the object to which this column belongs.
			/// </summary>
			[Column("object_id"),                           NotNull    ] public int     ObjectID                        { get; set; } // int
			/// <summary>
			/// Name of the column. Is unique within the object.
			/// </summary>
			[Column("name"),                                   Nullable] public string? Name                            { get; set; } // sysname
			/// <summary>
			/// ID of the column. Is unique within the object.<br/> Column IDs might not be sequential.
			/// </summary>
			[Column("column_id"),                           NotNull    ] public int     ColumnID                        { get; set; } // int
			/// <summary>
			/// ID of the system-type of the column.
			/// </summary>
			[Column("system_type_id"),                      NotNull    ] public byte    SystemTypeID                    { get; set; } // tinyint
			/// <summary>
			/// ID of the type of the column as defined by the user.<br/> To return the name of the type, join to the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-types-transact-sql?view=sql-server-ver15'>sys.types</a> catalog view on this column.
			/// </summary>
			[Column("user_type_id"),                        NotNull    ] public int     UserTypeID                      { get; set; } // int
			/// <summary>
			/// Maximum length (in bytes) of the column.<br/> -1 = Column data type is <b>varchar(max)</b>, <b>nvarchar(max)</b>, <b>varbinary(max)</b>, or <b>xml</b>.<br/> For <b>text</b> columns, the max_length value will be 16 or the value set by sp_tableoption &apos;text in row&apos;.
			/// </summary>
			[Column("max_length"),                          NotNull    ] public short   MaxLength                       { get; set; } // smallint
			/// <summary>
			/// Precision of the column if numeric-based; otherwise, 0.
			/// </summary>
			[Column("precision"),                           NotNull    ] public byte    Precision                       { get; set; } // tinyint
			/// <summary>
			/// Scale of the column if numeric-based; otherwise, 0.
			/// </summary>
			[Column("scale"),                               NotNull    ] public byte    Scale                           { get; set; } // tinyint
			/// <summary>
			/// Name of the collation of the column if character-based; otherwise, NULL.
			/// </summary>
			[Column("collation_name"),                         Nullable] public string? CollationName                   { get; set; } // sysname
			/// <summary>
			/// 1 = Column is nullable.
			/// </summary>
			[Column("is_nullable"),                            Nullable] public bool?   IsNullable                      { get; set; } // bit
			/// <summary>
			/// 1 = Column uses ANSI_PADDING ON behavior if character, binary, or variant.<br/> 0 = Column is not character, binary, or variant.
			/// </summary>
			[Column("is_ansi_padded"),                      NotNull    ] public bool    IsAnsiPadded                    { get; set; } // bit
			/// <summary>
			/// 1 = Column is a declared ROWGUIDCOL.
			/// </summary>
			[Column("is_rowguidcol"),                       NotNull    ] public bool    IsRowguidcol                    { get; set; } // bit
			/// <summary>
			/// 1 = Column has identity values
			/// </summary>
			[Column("is_identity"),                         NotNull    ] public bool    IsIdentity                      { get; set; } // bit
			/// <summary>
			/// 1 = Column is a computed column.
			/// </summary>
			[Column("is_computed"),                         NotNull    ] public bool    IsComputed                      { get; set; } // bit
			/// <summary>
			/// 1 = Column is declared to use filestream storage.
			/// </summary>
			[Column("is_filestream"),                       NotNull    ] public bool    IsFilestream                    { get; set; } // bit
			/// <summary>
			/// 1 = Column is replicated.
			/// </summary>
			[Column("is_replicated"),                          Nullable] public bool?   IsReplicated                    { get; set; } // bit
			/// <summary>
			/// 1 = Column has a non-SQL Server subscriber.
			/// </summary>
			[Column("is_non_sql_subscribed"),                  Nullable] public bool?   IsNonSqlSubscribed              { get; set; } // bit
			/// <summary>
			/// 1 = Column is merge-published.
			/// </summary>
			[Column("is_merge_published"),                     Nullable] public bool?   IsMergePublished                { get; set; } // bit
			/// <summary>
			/// 1 = Column is replicated by using SSIS.
			/// </summary>
			[Column("is_dts_replicated"),                      Nullable] public bool?   IsDtsReplicated                 { get; set; } // bit
			/// <summary>
			/// 1 = Content is a complete XML document.<br/> 0 = Content is a document fragment, or the column data type is not XML.
			/// </summary>
			[Column("is_xml_document"),                     NotNull    ] public bool    IsXmlDocument                   { get; set; } // bit
			/// <summary>
			/// Non-zero if the column&apos;s data type is <b>xml</b> and the XML is typed. The value will be the ID of the collection containing the column&apos;s validating XML schema namespace<br/> 0 = no XML schema collection.
			/// </summary>
			[Column("xml_collection_id"),                   NotNull    ] public int     XmlCollectionID                 { get; set; } // int
			/// <summary>
			/// ID of the default object, regardless of whether it is a stand-alone <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../system-stored-procedures/sp-bindefault-transact-sql?view=sql-server-ver15'>sys.sp_bindefault</a>, or an in-line, column-level DEFAULT constraint. The parent_object_id column of an inline column-level default object is a reference back to the table itself.<br/> 0 = No default.
			/// </summary>
			[Column("default_object_id"),                   NotNull    ] public int     DefaultObjectID                 { get; set; } // int
			/// <summary>
			/// ID of the stand-alone rule bound to the column by using sys.sp_bindrule.<br/> 0 = No stand-alone rule.<br/> For column-level CHECK constraints, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-check-constraints-transact-sql?view=sql-server-ver15'>sys.check_constraints (Transact-SQL)</a>.
			/// </summary>
			[Column("rule_object_id"),                      NotNull    ] public int     RuleObjectID                    { get; set; } // int
			/// <summary>
			/// 1 = Column is a sparse column. For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../tables/use-sparse-columns?view=sql-server-ver15'>Use Sparse Columns</a>.
			/// </summary>
			[Column("is_sparse"),                              Nullable] public bool?   IsSparse                        { get; set; } // bit
			/// <summary>
			/// 1 = Column is a column set. For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../tables/use-column-sets?view=sql-server-ver15'>Use Column Sets</a>.
			/// </summary>
			[Column("is_column_set"),                          Nullable] public bool?   IsColumnSet                     { get; set; } // bit
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database. 7, 8, 9, 10 only applies to SQL Database.<br/> Identifies when the column value is generated (will always be 0 for columns in system tables):<br/> 0 = NOT_APPLICABLE<br/> 1 = AS_ROW_START<br/> 2 = AS_ROW_END<br/>7 = AS_TRANSACTION_ID_START<br/>8 = AS_TRANSACTION_ID_END<br/>9 = AS_SEQUENCE_NUMBER_START<br/>10 = AS_SEQUENCE_NUMBER_END<br/> For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../tables/temporal-tables?view=sql-server-ver15'>Temporal Tables (Relational databases)</a>.
			/// </summary>
			[Column("generated_always_type"),                  Nullable] public byte?   GeneratedAlwaysType             { get; set; } // tinyint
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> Textual description of <i>generated_always_type</i>&apos;s value (always NOT_APPLICABLE for columns in system tables) <br/> NOT_APPLICABLE<br/> AS_ROW_START<br/> AS_ROW_END<br/><br/><b>Applies to</b>: SQL Database<br/><br/>AS_TRANSACTION_ID_START<br/>AS_TRANSACTION_ID_END<br/>AS_SEQUENCE_NUMBER_START<br/>AS_SEQUENCE_NUMBER_END
			/// </summary>
			[Column("generated_always_type_desc"),             Nullable] public string? GeneratedAlwaysTypeDesc         { get; set; } // nvarchar(60)
			[Column("encryption_type"),                        Nullable] public int?    EncryptionType                  { get; set; } // int
			[Column("encryption_type_desc"),                   Nullable] public string? EncryptionTypeDesc              { get; set; } // nvarchar(64)
			[Column("encryption_algorithm_name"),              Nullable] public string? EncryptionAlgorithmName         { get; set; } // sysname
			[Column("column_encryption_key_id"),               Nullable] public int?    ColumnEncryptionKeyID           { get; set; } // int
			[Column("column_encryption_key_database_name"),    Nullable] public string? ColumnEncryptionKeyDatabaseName { get; set; } // sysname
			[Column("is_hidden"),                              Nullable] public bool?   IsHidden                        { get; set; } // bit
			[Column("is_masked"),                           NotNull    ] public bool    IsMasked                        { get; set; } // bit
			[Column("graph_type"),                             Nullable] public int?    GraphType                       { get; set; } // int
			[Column("graph_type_desc"),                        Nullable] public string? GraphTypeDesc                   { get; set; } // nvarchar(60)

			#region Associations

			/// <summary>
			/// all_objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="all_objects", BackReferenceName="AllColumns")]
			public SystemSchema.AllObjects AllObject { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Shows the UNION of all schema-scoped user-defined objects and system objects.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-all-objects-transact-sql?view=sql-server-ver15'>sys.all_objects</a>.
		/// </summary>
		[Table(Schema="sys", Name="all_objects", IsView=true)]
		public partial class AllObjects
		{
			/// <summary>
			/// Object name.
			/// </summary>
			[Column("name"),                NotNull    ] public string   Name              { get; set; } = null!; // sysname
			/// <summary>
			/// Object identification number. Is unique within a database.
			/// </summary>
			[Column("object_id"),           NotNull    ] public int      ObjectID          { get; set; } // int
			/// <summary>
			/// ID of the individual owner if different from the schema owner. By default, schema-contained objects are owned by the schema owner. However, another owner can be specified by using the ALTER AUTHORIZATION statement to change ownership.<br/> Is NULL if there is no alternative individual owner.<br/> Is NULL if the object type is one of the following:<br/> C = CHECK constraint<br/> D = DEFAULT (constraint or stand-alone)<br/> F = FOREIGN KEY constraint<br/> PK = PRIMARY KEY constraint<br/> R = Rule (old-style, stand-alone)<br/> TA = Assembly (CLR) trigger<br/> TR = SQL trigger<br/> UQ = UNIQUE constraint
			/// </summary>
			[Column("principal_id"),           Nullable] public int?     PrincipalID       { get; set; } // int
			/// <summary>
			/// ID of the schema that contains the object.<br/> For all schema scoped system objects that are included with SQL Server, this value is always in (schema_id(&apos;sys&apos;), schema_id(&apos;INFORMATION_SCHEMA&apos;)).
			/// </summary>
			[Column("schema_id"),           NotNull    ] public int      SchemaID          { get; set; } // int
			/// <summary>
			/// ID of the object to which this object belongs.<br/> 0 = Not a child object.
			/// </summary>
			[Column("parent_object_id"),    NotNull    ] public int      ParentObjectID    { get; set; } // int
			/// <summary>
			/// Object type:<br/> AF = Aggregate function (CLR)<br/> C = CHECK constraint<br/> D = DEFAULT (constraint or stand-alone)<br/> F = FOREIGN KEY constraint<br/> FN = SQL scalar function<br/> FS = Assembly (CLR) scalar-function<br/> FT = Assembly (CLR) table-valued function<br/> IF = SQL inline table-valued function<br/> IT = Internal table<br/> P = SQL Stored Procedure<br/> PC = Assembly (CLR) stored-procedure<br/> PG = Plan guide<br/> PK = PRIMARY KEY constraint<br/> R = Rule (old-style, stand-alone)<br/> RF = Replication-filter-procedure<br/> S = System base table<br/> SN = Synonym<br/> SO = Sequence object<br/> SQ = Service queue<br/> TA = Assembly (CLR) DML trigger<br/> TF = SQL table-valued-function<br/> TR = SQL DML trigger<br/> TT = Table type<br/> U = Table (user-defined)<br/> UQ = UNIQUE constraint<br/> V = View<br/> X = Extended stored procedure
			/// </summary>
			[Column("type"),                   Nullable] public string?  Type              { get; set; } // char(2)
			/// <summary>
			/// Description of the object type. AGGREGATE_FUNCTION<br/> CHECK_CONSTRAINT<br/> DEFAULT_CONSTRAINT<br/> FOREIGN_KEY_CONSTRAINT<br/> SQL_SCALAR_FUNCTION<br/> CLR_SCALAR_FUNCTION<br/> CLR_TABLE_VALUED_FUNCTION<br/> SQL_INLINE_TABLE_VALUED_FUNCTION<br/> INTERNAL_TABLE<br/> SQL_STORED_PROCEDURE<br/> CLR_STORED_PROCEDURE<br/> PLAN_GUIDE<br/> PRIMARY_KEY_CONSTRAINT<br/> RULE<br/> REPLICATION_FILTER_PROCEDURE<br/> SYSTEM_TABLE<br/> SYNONYM<br/> SERVICE_QUEUE<br/> CLR_TRIGGER<br/> SQL_TABLE_VALUED_FUNCTION<br/> SQL_TRIGGER<br/> TABLE_TYPE<br/> USER_TABLE<br/> UNIQUE_CONSTRAINT<br/> VIEW<br/> EXTENDED_STORED_PROCEDURE
			/// </summary>
			[Column("type_desc"),              Nullable] public string?  TypeDesc          { get; set; } // nvarchar(60)
			/// <summary>
			/// Date the object was created.
			/// </summary>
			[Column("create_date"),         NotNull    ] public DateTime CreateDate        { get; set; } // datetime
			/// <summary>
			/// Date the object was last modified by using an ALTER statement. If the object is a table or a view, modify_date also changes when an index on the table or view is created or modified.
			/// </summary>
			[Column("modify_date"),         NotNull    ] public DateTime ModifyDate        { get; set; } // datetime
			/// <summary>
			/// Object created by an internal SQL Server component.
			/// </summary>
			[Column("is_ms_shipped"),          Nullable] public bool?    IsMsShipped       { get; set; } // bit
			/// <summary>
			/// Object is published.
			/// </summary>
			[Column("is_published"),           Nullable] public bool?    IsPublished       { get; set; } // bit
			/// <summary>
			/// Only the schema of the object is published.
			/// </summary>
			[Column("is_schema_published"),    Nullable] public bool?    IsSchemaPublished { get; set; } // bit

			#region Associations

			/// <summary>
			/// all_columns
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.AllColumns> AllColumns { get; set; } = null!;

			/// <summary>
			/// all_parameters
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.AllParameters> AllParameters { get; set; } = null!;

			/// <summary>
			/// all_sql_modules
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.AllSqlModules> AllSqlModules { get; set; } = null!;

			/// <summary>
			/// all_views
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToOne, IsBackReference=true)]
			public SystemSchema.AllViews? AllView { get; set; }

			#endregion
		}

		/// <summary>
		/// Contains a row for each allocation unit in the database.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-allocation-units-transact-sql?view=sql-server-ver15'>sys.allocation_units</a>.
		/// </summary>
		[Table(Schema="sys", Name="allocation_units", IsView=true)]
		public partial class AllocationUnits
		{
			/// <summary>
			/// ID of the allocation unit. Is unique within a database.
			/// </summary>
			[Column("allocation_unit_id"), NotNull    ] public long    AllocationUnitID { get; set; } // bigint
			/// <summary>
			/// Type of allocation unit:<br/> 0 = Dropped<br/> 1 = In-row data (all data types, except LOB data types)<br/> 2 = Large object (LOB) data (<b>text</b>, <b>ntext</b>, <b>image</b>, <b>xml</b>, large value types, and CLR user-defined types)<br/> 3 = Row-overflow data
			/// </summary>
			[Column("type"),               NotNull    ] public byte    Type             { get; set; } // tinyint
			/// <summary>
			/// Description of the allocation unit type:<br/> <b>DROPPED</b><br/> <b>IN_ROW_DATA</b><br/> <b>LOB_DATA</b><br/> <b>ROW_OVERFLOW_DATA</b>
			/// </summary>
			[Column("type_desc"),             Nullable] public string? TypeDesc         { get; set; } // nvarchar(60)
			/// <summary>
			/// ID of the storage container associated with the allocation unit.<br/> If type = 1 or 3 in a rowstore index container_id = sys.partitions.hobt_id.<br/> If type = 1 or 3 in a columnstore index, container_id = sys.column_store_row_groups.delta_store_hobt_id.<br/> If type is 2, then container_id = sys.partitions.partition_id.<br/> 0 = Allocation unit marked for deferred drop
			/// </summary>
			[Column("container_id"),       NotNull    ] public long    ContainerID      { get; set; } // bigint
			/// <summary>
			/// ID of the filegroup in which this allocation unit resides.
			/// </summary>
			[Column("data_space_id"),         Nullable] public int?    DataSpaceID      { get; set; } // int
			/// <summary>
			/// Total number of pages allocated or reserved by this allocation unit.
			/// </summary>
			[Column("total_pages"),        NotNull    ] public long    TotalPages       { get; set; } // bigint
			/// <summary>
			/// Number of total pages actually in use.
			/// </summary>
			[Column("used_pages"),         NotNull    ] public long    UsedPages        { get; set; } // bigint
			/// <summary>
			/// Number of used pages that have:<br/> In-row data<br/> LOB data<br/> Row-overflow data<br/> <br/> Note that the value returned excludes internal index pages and allocation-management pages.
			/// </summary>
			[Column("data_pages"),         NotNull    ] public long    DataPages        { get; set; } // bigint
		}

		/// <summary>
		/// Shows the union of all parameters that belong to user-defined or system objects.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-all-parameters-transact-sql?view=sql-server-ver15'>sys.all_parameters</a>.
		/// </summary>
		[Table(Schema="sys", Name="all_parameters", IsView=true)]
		public partial class AllParameters
		{
			/// <summary>
			/// ID of the object to which this parameter belongs.
			/// </summary>
			[Column("object_id"),                           NotNull    ] public int     ObjectID                        { get; set; } // int
			/// <summary>
			/// Name of parameter. Is unique within the object. If the object is a scalar function, the parameter name is an empty string in the row representing the return value.
			/// </summary>
			[Column("name"),                                   Nullable] public string? Name                            { get; set; } // sysname
			/// <summary>
			/// ID of parameter. Is unique within the object. If the object is a scalar function, <b>parameter_id</b> = 0 represents the return value.
			/// </summary>
			[Column("parameter_id"),                        NotNull    ] public int     ParameterID                     { get; set; } // int
			/// <summary>
			/// ID of the system type of the parameter.
			/// </summary>
			[Column("system_type_id"),                      NotNull    ] public byte    SystemTypeID                    { get; set; } // tinyint
			/// <summary>
			/// ID of the type of the parameter as defined by the user.<br/> To return the name of the type, join to the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-types-transact-sql?view=sql-server-ver15'>sys.types</a> catalog view on this column.
			/// </summary>
			[Column("user_type_id"),                        NotNull    ] public int     UserTypeID                      { get; set; } // int
			/// <summary>
			/// Maximum length of the parameter, in bytes.<br/> -1 = Column data type is <b>varchar(max)</b>, <b>nvarchar(max)</b>, <b>varbinary(max)</b>, or <b>xml</b>.
			/// </summary>
			[Column("max_length"),                          NotNull    ] public short   MaxLength                       { get; set; } // smallint
			/// <summary>
			/// Precision of the parameter if it is numeric-based; otherwise, 0.
			/// </summary>
			[Column("precision"),                           NotNull    ] public byte    Precision                       { get; set; } // tinyint
			/// <summary>
			/// Scale of the parameter if it is numeric-based; otherwise, 0.
			/// </summary>
			[Column("scale"),                               NotNull    ] public byte    Scale                           { get; set; } // tinyint
			/// <summary>
			/// 1 = Parameter is output (or return); otherwise, 0.
			/// </summary>
			[Column("is_output"),                           NotNull    ] public bool    IsOutput                        { get; set; } // bit
			/// <summary>
			/// 1 = Parameter is a cursor reference parameter.
			/// </summary>
			[Column("is_cursor_ref"),                       NotNull    ] public bool    IsCursorRef                     { get; set; } // bit
			/// <summary>
			/// 1 = Parameter has a default value.<br/> SQL Server only maintains default values for CLR objects in this catalog view; therefore, this column will always have a value of 0 for Transact-SQL objects. To view the default value of a parameter in a Transact-SQL object, query the <b>definition</b> column of the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-sql-modules-transact-sql?view=sql-server-ver15'>sys.sql_modules</a> catalog view, or use the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/functions/object-definition-transact-sql?view=sql-server-ver15'>OBJECT_DEFINITION</a> system function.
			/// </summary>
			[Column("has_default_value"),                   NotNull    ] public bool    HasDefaultValue                 { get; set; } // bit
			/// <summary>
			/// 1 = Content is a complete XML document.<br/> 0 = Content is a document fragment or the data type of the column is not <b>xml</b>.
			/// </summary>
			[Column("is_xml_document"),                     NotNull    ] public bool    IsXmlDocument                   { get; set; } // bit
			/// <summary>
			/// If <b>has_default_value</b> is 1, the value of this column is the value of the default for the parameter; otherwise <i>NULL</i>.
			/// </summary>
			[Column("default_value"),                          Nullable] public object? DefaultValue                    { get; set; } // sql_variant
			/// <summary>
			/// Is the ID of the XML schema collection used to validate the parameter.<br/> Nonzero if the data type of the parameter is <b>xml</b> and the XML is typed.<br/> 0 = There is no XML schema collection, or the parameter is not XML.
			/// </summary>
			[Column("xml_collection_id"),                   NotNull    ] public int     XmlCollectionID                 { get; set; } // int
			/// <summary>
			/// 1 =  Parameter is READONLY; otherwise, 0.
			/// </summary>
			[Column("is_readonly"),                         NotNull    ] public bool    IsReadonly                      { get; set; } // bit
			/// <summary>
			/// 1 = Parameter is nullable. (the default).<br/> 0 = Parameter is not nullable, for more efficient execution of natively-compiled stored procedures.
			/// </summary>
			[Column("is_nullable"),                            Nullable] public bool?   IsNullable                      { get; set; } // bit
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> Encryption type:<br/> 1 = Deterministic encryption<br/> 2 = Randomized encryption
			/// </summary>
			[Column("encryption_type"),                        Nullable] public int?    EncryptionType                  { get; set; } // int
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> Encryption type description:<br/> RANDOMIZED<br/> DETERMINISTIC
			/// </summary>
			[Column("encryption_type_desc"),                   Nullable] public string? EncryptionTypeDesc              { get; set; } // nvarchar(64)
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> Name of encryption algorithm.<br/> Only AEAD_AES_256_CBC_HMAC_SHA_512 is supported.
			/// </summary>
			[Column("encryption_algorithm_name"),              Nullable] public string? EncryptionAlgorithmName         { get; set; } // sysname
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> ID of the CEK.
			/// </summary>
			[Column("column_encryption_key_id"),               Nullable] public int?    ColumnEncryptionKeyID           { get; set; } // int
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> The name of the database where the column encryption key exists if different than the database of the column. Is <i>NULL</i> if the key exists in the same database as the column.
			/// </summary>
			[Column("column_encryption_key_database_name"),    Nullable] public string? ColumnEncryptionKeyDatabaseName { get; set; } // sysname

			#region Associations

			/// <summary>
			/// all_objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="all_objects", BackReferenceName="AllParameters")]
			public SystemSchema.AllObjects AllObject { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Returns the union of <b>sys.sql_modules</b> and <b>sys.system_sql_modules</b>.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-all-sql-modules-transact-sql?view=sql-server-ver15'>sys.all_sql_modules</a>.
		/// </summary>
		[Table(Schema="sys", Name="all_sql_modules", IsView=true)]
		public partial class AllSqlModules
		{
			/// <summary>
			/// ID of the object of the containing object. Is unique within a database.
			/// </summary>
			[Column("object_id"),               NotNull    ] public int     ObjectID              { get; set; } // int
			/// <summary>
			/// SQL text that defines this module.<br/> NULL = Encrypted
			/// </summary>
			[Column("definition"),                 Nullable] public string? Definition            { get; set; } // nvarchar(max)
			/// <summary>
			/// Module was created with SET ANSI_NULLS ON.
			/// </summary>
			[Column("uses_ansi_nulls"),            Nullable] public bool?   UsesAnsiNulls         { get; set; } // bit
			/// <summary>
			/// Module was created with SET QUOTED_IDENTIFIER ON.
			/// </summary>
			[Column("uses_quoted_identifier"),     Nullable] public bool?   UsesQuotedIdentifier  { get; set; } // bit
			/// <summary>
			/// Module was created with the SCHEMABINDING option.
			/// </summary>
			[Column("is_schema_bound"),            Nullable] public bool?   IsSchemaBound         { get; set; } // bit
			/// <summary>
			/// 1 = Schema-bound module definition depends on the default-collation of the database for correct evaluation; otherwise, 0. Such a dependency prevents changing the default collation of the database.
			/// </summary>
			[Column("uses_database_collation"),    Nullable] public bool?   UsesDatabaseCollation { get; set; } // bit
			/// <summary>
			/// Procedure was created using the WITH RECOMPILE option.
			/// </summary>
			[Column("is_recompiled"),              Nullable] public bool?   IsRecompiled          { get; set; } // bit
			/// <summary>
			/// Module was declared to produce a NULL output on any NULL input.
			/// </summary>
			[Column("null_on_null_input"),         Nullable] public bool?   NullOnNullInput       { get; set; } // bit
			/// <summary>
			/// ID of the EXECUTE AS database principal.<br/> NULL by default or if EXECUTE AS CALLER.<br/> ID of the specified principal if EXECUTE AS SELF or EXECUTE AS &lt;principal&gt;.<br/> -2 = EXECUTE AS OWNER.
			/// </summary>
			[Column("execute_as_principal_id"),    Nullable] public int?    ExecuteAsPrincipalID  { get; set; } // int
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2014 (12.x) and later.<br/> 0 = not natively compiled<br/> 1 = is natively compiled<br/> The default value is 0.
			/// </summary>
			[Column("uses_native_compilation"),    Nullable] public bool?   UsesNativeCompilation { get; set; } // bit
			[Column("inline_type"),                Nullable] public bool?   InlineType            { get; set; } // bit
			[Column("is_inlineable"),              Nullable] public bool?   IsInlineable          { get; set; } // bit

			#region Associations

			/// <summary>
			/// all_objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="all_objects", BackReferenceName="AllSqlModules")]
			public SystemSchema.AllObjects AllObject { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Shows the UNION of all user-defined and system views.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-all-views-transact-sql?view=sql-server-ver15'>sys.all_views</a>.
		/// </summary>
		[Table(Schema="sys", Name="all_views", IsView=true)]
		public partial class AllViews
		{
			[Column("name"),                        NotNull    ] public string   Name                     { get; set; } = null!; // sysname
			[Column("object_id"),                   NotNull    ] public int      ObjectID                 { get; set; } // int
			[Column("principal_id"),                   Nullable] public int?     PrincipalID              { get; set; } // int
			[Column("schema_id"),                   NotNull    ] public int      SchemaID                 { get; set; } // int
			[Column("parent_object_id"),            NotNull    ] public int      ParentObjectID           { get; set; } // int
			[Column("type"),                        NotNull    ] public string   Type                     { get; set; } = null!; // char(2)
			[Column("type_desc"),                      Nullable] public string?  TypeDesc                 { get; set; } // nvarchar(60)
			[Column("create_date"),                 NotNull    ] public DateTime CreateDate               { get; set; } // datetime
			[Column("modify_date"),                 NotNull    ] public DateTime ModifyDate               { get; set; } // datetime
			[Column("is_ms_shipped"),                  Nullable] public bool?    IsMsShipped              { get; set; } // bit
			[Column("is_published"),                   Nullable] public bool?    IsPublished              { get; set; } // bit
			[Column("is_schema_published"),            Nullable] public bool?    IsSchemaPublished        { get; set; } // bit
			/// <summary>
			/// 1 = View is replicated.
			/// </summary>
			[Column("is_replicated"),                  Nullable] public bool?    IsReplicated             { get; set; } // bit
			/// <summary>
			/// 1 = View has a replication filter.
			/// </summary>
			[Column("has_replication_filter"),         Nullable] public bool?    HasReplicationFilter     { get; set; } // bit
			/// <summary>
			/// 1 = VIEW_METADATA option specified for view. For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/create-view-transact-sql?view=sql-server-ver15'>CREATE VIEW (Transact-SQL)</a>.
			/// </summary>
			[Column("has_opaque_metadata"),            Nullable] public bool?    HasOpaqueMetadata        { get; set; } // bit
			/// <summary>
			/// 1 = Table contains persisted data that depends on an assembly whose definition changed during the last ALTER ASSEMBLY. Resets to 0 after the next successful DBCC CHECKDB or DBCC CHECKTABLE.
			/// </summary>
			[Column("has_unchecked_assembly_data"),    Nullable] public bool?    HasUncheckedAssemblyData { get; set; } // bit
			/// <summary>
			/// 1 = WITH CHECK OPTION was specified in the view definition.
			/// </summary>
			[Column("with_check_option"),              Nullable] public bool?    WithCheckOption          { get; set; } // bit
			/// <summary>
			/// 1 = View was created automatically by the system to store correlation information between datetime columns. Creation of this view was enabled by setting DATE_CORRELATION_OPTIMIZATION to <b>ON</b>.
			/// </summary>
			[Column("is_date_correlation_view"),       Nullable] public bool?    IsDateCorrelationView    { get; set; } // bit
			[Column("is_tracked_by_cdc"),              Nullable] public bool?    IsTrackedByCdc           { get; set; } // bit
			[Column("has_snapshot"),                   Nullable] public bool?    HasSnapshot              { get; set; } // bit

			#region Associations

			/// <summary>
			/// all_objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.OneToOne, KeyName="all_objects", BackReferenceName="AllView")]
			public SystemSchema.AllObjects AllObject { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="assemblies", IsView=true)]
		public partial class Assemblies
		{
			[Column("name"),                NotNull    ] public string   Name              { get; set; } = null!; // sysname
			[Column("principal_id"),           Nullable] public int?     PrincipalID       { get; set; } // int
			[Column("assembly_id"),         NotNull    ] public int      AssemblyID        { get; set; } // int
			[Column("clr_name"),               Nullable] public string?  ClrName           { get; set; } // nvarchar(4000)
			[Column("permission_set"),         Nullable] public byte?    PermissionSet     { get; set; } // tinyint
			[Column("permission_set_desc"),    Nullable] public string?  PermissionSetDesc { get; set; } // nvarchar(60)
			[Column("is_visible"),          NotNull    ] public bool     IsVisible         { get; set; } // bit
			[Column("create_date"),         NotNull    ] public DateTime CreateDate        { get; set; } // datetime
			[Column("modify_date"),         NotNull    ] public DateTime ModifyDate        { get; set; } // datetime
			[Column("is_user_defined"),        Nullable] public bool?    IsUserDefined     { get; set; } // bit
		}

		[Table(Schema="sys", Name="assembly_files", IsView=true)]
		public partial class AssemblyFiles
		{
			[Column("assembly_id"), NotNull    ] public int     AssemblyID { get; set; } // int
			[Column("name"),           Nullable] public string? Name       { get; set; } // nvarchar(260)
			[Column("file_id"),     NotNull    ] public int     FileID     { get; set; } // int
			[Column("content"),        Nullable] public byte[]? Content    { get; set; } // varbinary(-1)
		}

		/// <summary>
		/// Returns one row for each function, procedure or trigger that is defined by a common language runtime (CLR) assembly. This catalog view maps CLR stored procedures, CLR triggers, or CLR functions to their underlying implementation. Objects of type TA, AF, PC, FS, and FT have an associated assembly module. To find the association between the object and the assembly, you can join this catalog view to other catalog views. For example, when you create a CLR stored procedure, it is represented by one row in <b>sys.objects</b>, one row in <b>sys.procedures</b> (which inherits from <b>sys.objects</b>), and one row in <b>sys.assembly_modules</b>. The stored procedure itself is represented by the metadata in <b>sys.objects</b> and <b>sys.procedures</b>. References to the procedure&apos;s underlying CLR implementation are found in <b>sys.assembly_modules</b>.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-assembly-modules-transact-sql?view=sql-server-ver15'>sys.assembly_modules</a>.
		/// </summary>
		[Table(Schema="sys", Name="assembly_modules", IsView=true)]
		public partial class AssemblyModules
		{
			/// <summary>
			/// Object identification number of the SQL object. Is unique within a database.
			/// </summary>
			[Column("object_id"),               NotNull    ] public int     ObjectID             { get; set; } // int
			/// <summary>
			/// ID of the assembly from which this module was created.
			/// </summary>
			[Column("assembly_id"),             NotNull    ] public int     AssemblyID           { get; set; } // int
			/// <summary>
			/// Name of the class within the assembly that defines this module.
			/// </summary>
			[Column("assembly_class"),             Nullable] public string? AssemblyClass        { get; set; } // sysname
			/// <summary>
			/// Name of the method within the <b>assembly_class</b> that defines this module.<br/> NULL for aggregate functions (AF).
			/// </summary>
			[Column("assembly_method"),            Nullable] public string? AssemblyMethod       { get; set; } // sysname
			/// <summary>
			/// Module was declared to produce a NULL output for any NULL input.
			/// </summary>
			[Column("null_on_null_input"),         Nullable] public bool?   NullOnNullInput      { get; set; } // bit
			/// <summary>
			/// ID of the database principal under which the context execution occurs, as specified by the EXECUTE AS clause of the CLR function, stored procedure, or trigger.<br/> NULL = EXECUTE AS CALLER. This is the default.<br/> ID of the specified database principal = EXECUTE AS SELF, EXECUTE AS <em>user_name</em>, or EXECUTE AS <em>login_name</em>.<br/> -2 = EXECUTE AS OWNER.
			/// </summary>
			[Column("execute_as_principal_id"),    Nullable] public int?    ExecuteAsPrincipalID { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.OneToOne, KeyName="objects", BackReferenceName="AssemblyModule")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="assembly_references", IsView=true)]
		public partial class AssemblyReferences
		{
			[Column("assembly_id"),            NotNull] public int AssemblyID           { get; set; } // int
			[Column("referenced_assembly_id"), NotNull] public int ReferencedAssemblyID { get; set; } // int
		}

		/// <summary>
		/// Contains a row for each user-defined type that is defined by a CLR assembly. The following <b>sys.assembly_types</b> appear in the list of inherited columns (see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-types-transact-sql?view=sql-server-ver15'>sys.types (Transact-SQL)</a>) after <b>rule_object_id</b>.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-assembly-types-transact-sql?view=sql-server-ver15'>sys.assembly_types</a>.
		/// </summary>
		[Table(Schema="sys", Name="assembly_types", IsView=true)]
		public partial class AssemblyTypes
		{
			[Column("name"),                    NotNull    ] public string  Name                  { get; set; } = null!; // sysname
			[Column("system_type_id"),          NotNull    ] public byte    SystemTypeID          { get; set; } // tinyint
			[Column("user_type_id"),            NotNull    ] public int     UserTypeID            { get; set; } // int
			[Column("schema_id"),               NotNull    ] public int     SchemaID              { get; set; } // int
			[Column("principal_id"),               Nullable] public int?    PrincipalID           { get; set; } // int
			[Column("max_length"),              NotNull    ] public short   MaxLength             { get; set; } // smallint
			[Column("precision"),               NotNull    ] public byte    Precision             { get; set; } // tinyint
			[Column("scale"),                   NotNull    ] public byte    Scale                 { get; set; } // tinyint
			[Column("collation_name"),             Nullable] public string? CollationName         { get; set; } // sysname
			[Column("is_nullable"),                Nullable] public bool?   IsNullable            { get; set; } // bit
			[Column("is_user_defined"),         NotNull    ] public bool    IsUserDefined         { get; set; } // bit
			[Column("is_assembly_type"),        NotNull    ] public bool    IsAssemblyType        { get; set; } // bit
			[Column("default_object_id"),       NotNull    ] public int     DefaultObjectID       { get; set; } // int
			[Column("rule_object_id"),          NotNull    ] public int     RuleObjectID          { get; set; } // int
			/// <summary>
			/// ID of the assembly from which this type was created.
			/// </summary>
			[Column("assembly_id"),             NotNull    ] public int     AssemblyID            { get; set; } // int
			/// <summary>
			/// Name of the class within the assembly that defines this type.
			/// </summary>
			[Column("assembly_class"),             Nullable] public string? AssemblyClass         { get; set; } // sysname
			/// <summary>
			/// Sorting the bytes of this type is equivalent to sorting using comparison operators on the type.
			/// </summary>
			[Column("is_binary_ordered"),          Nullable] public bool?   IsBinaryOrdered       { get; set; } // bit
			/// <summary>
			/// Length of the type is always the same as max_length.
			/// </summary>
			[Column("is_fixed_length"),            Nullable] public bool?   IsFixedLength         { get; set; } // bit
			/// <summary>
			/// ProgID of the type as exposed to COM.
			/// </summary>
			[Column("prog_id"),                    Nullable] public string? ProgID                { get; set; } // nvarchar(40)
			/// <summary>
			/// Assembly qualified type name. The name is in a format suitable to be passed to Type.GetType().
			/// </summary>
			[Column("assembly_qualified_name"),    Nullable] public string? AssemblyQualifiedName { get; set; } // nvarchar(4000)
			[Column("is_table_type"),           NotNull    ] public bool    IsTableType           { get; set; } // bit
		}

		[Table(Schema="sys", Name="asymmetric_keys", IsView=true)]
		public partial class AsymmetricKeys
		{
			[Column("name"),                         NotNull    ] public string  Name                       { get; set; } = null!; // sysname
			[Column("principal_id"),                    Nullable] public int?    PrincipalID                { get; set; } // int
			[Column("asymmetric_key_id"),            NotNull    ] public int     AsymmetricKeyID            { get; set; } // int
			[Column("pvt_key_encryption_type"),      NotNull    ] public string  PvtKeyEncryptionType       { get; set; } = null!; // char(2)
			[Column("pvt_key_encryption_type_desc"),    Nullable] public string? PvtKeyEncryptionTypeDesc   { get; set; } // nvarchar(60)
			[Column("thumbprint"),                   NotNull    ] public byte[]  Thumbprint                 { get; set; } = null!; // varbinary(64)
			[Column("algorithm"),                    NotNull    ] public string  Algorithm                  { get; set; } = null!; // char(2)
			[Column("algorithm_desc"),                  Nullable] public string? AlgorithmDesc              { get; set; } // nvarchar(60)
			[Column("key_length"),                   NotNull    ] public int     KeyLength                  { get; set; } // int
			[Column("sid"),                             Nullable] public byte[]? Sid                        { get; set; } // varbinary(85)
			[Column("string_sid"),                      Nullable] public string? StringSid                  { get; set; } // nvarchar(128)
			[Column("public_key"),                   NotNull    ] public byte[]  PublicKey                  { get; set; } = null!; // varbinary(-1)
			[Column("attested_by"),                     Nullable] public string? AttestedBy                 { get; set; } // nvarchar(260)
			[Column("provider_type"),                   Nullable] public string? ProviderType               { get; set; } // nvarchar(60)
			[Column("cryptographic_provider_guid"),     Nullable] public Guid?   CryptographicProviderGuid  { get; set; } // uniqueidentifier
			[Column("cryptographic_provider_algid"),    Nullable] public object? CryptographicProviderAlgid { get; set; } // sql_variant
		}

		[Table(Schema="sys", Name="backup_devices", IsView=true)]
		public partial class BackupDevices
		{
			[Column("name"),          NotNull    ] public string  Name         { get; set; } = null!; // sysname
			[Column("type"),             Nullable] public byte?   Type         { get; set; } // tinyint
			[Column("type_desc"),        Nullable] public string? TypeDesc     { get; set; } // nvarchar(60)
			[Column("physical_name"),    Nullable] public string? PhysicalName { get; set; } // nvarchar(260)
		}

		[Table(Schema="sys", Name="certificates", IsView=true)]
		public partial class Certificates
		{
			[Column("name"),                         NotNull    ] public string    Name                     { get; set; } = null!; // sysname
			[Column("certificate_id"),               NotNull    ] public int       CertificateID            { get; set; } // int
			[Column("principal_id"),                    Nullable] public int?      PrincipalID              { get; set; } // int
			[Column("pvt_key_encryption_type"),      NotNull    ] public string    PvtKeyEncryptionType     { get; set; } = null!; // char(2)
			[Column("pvt_key_encryption_type_desc"),    Nullable] public string?   PvtKeyEncryptionTypeDesc { get; set; } // nvarchar(60)
			[Column("is_active_for_begin_dialog"),      Nullable] public bool?     IsActiveForBeginDialog   { get; set; } // bit
			[Column("issuer_name"),                     Nullable] public string?   IssuerName               { get; set; } // nvarchar(442)
			[Column("cert_serial_number"),              Nullable] public string?   CertSerialNumber         { get; set; } // nvarchar(64)
			[Column("sid"),                             Nullable] public byte[]?   Sid                      { get; set; } // varbinary(85)
			[Column("string_sid"),                      Nullable] public string?   StringSid                { get; set; } // nvarchar(128)
			[Column("subject"),                         Nullable] public string?   Subject                  { get; set; } // nvarchar(4000)
			[Column("expiry_date"),                     Nullable] public DateTime? ExpiryDate               { get; set; } // datetime
			[Column("start_date"),                      Nullable] public DateTime? StartDate                { get; set; } // datetime
			[Column("thumbprint"),                   NotNull    ] public byte[]    Thumbprint               { get; set; } = null!; // varbinary(64)
			[Column("attested_by"),                     Nullable] public string?   AttestedBy               { get; set; } // nvarchar(260)
			[Column("pvt_key_last_backup_date"),        Nullable] public DateTime? PvtKeyLastBackupDate     { get; set; } // datetime
			[Column("key_length"),                      Nullable] public int?      KeyLength                { get; set; } // int
		}

		/// <summary>
		/// Contains a row for each object that is a CHECK constraint, with <b>sys.objects.type</b> = &apos;C&apos;.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-check-constraints-transact-sql?view=sql-server-ver15'>sys.check_constraints</a>.
		/// </summary>
		[Table(Schema="sys", Name="check_constraints", IsView=true)]
		public partial class CheckConstraints
		{
			[Column("name"),                    NotNull    ] public string   Name                  { get; set; } = null!; // sysname
			[Column("object_id"),               NotNull    ] public int      ObjectID              { get; set; } // int
			[Column("principal_id"),               Nullable] public int?     PrincipalID           { get; set; } // int
			[Column("schema_id"),               NotNull    ] public int      SchemaID              { get; set; } // int
			[Column("parent_object_id"),        NotNull    ] public int      ParentObjectID        { get; set; } // int
			[Column("type"),                       Nullable] public string?  Type                  { get; set; } // char(2)
			[Column("type_desc"),                  Nullable] public string?  TypeDesc              { get; set; } // nvarchar(60)
			[Column("create_date"),             NotNull    ] public DateTime CreateDate            { get; set; } // datetime
			[Column("modify_date"),             NotNull    ] public DateTime ModifyDate            { get; set; } // datetime
			[Column("is_ms_shipped"),           NotNull    ] public bool     IsMsShipped           { get; set; } // bit
			[Column("is_published"),            NotNull    ] public bool     IsPublished           { get; set; } // bit
			[Column("is_schema_published"),     NotNull    ] public bool     IsSchemaPublished     { get; set; } // bit
			/// <summary>
			/// CHECK constraint is disabled.
			/// </summary>
			[Column("is_disabled"),             NotNull    ] public bool     IsDisabled            { get; set; } // bit
			/// <summary>
			/// CHECK constraint was created with the NOT FOR REPLICATION option.
			/// </summary>
			[Column("is_not_for_replication"),  NotNull    ] public bool     IsNotForReplication   { get; set; } // bit
			/// <summary>
			/// CHECK constraint has not been verified by the system for all rows.
			/// </summary>
			[Column("is_not_trusted"),          NotNull    ] public bool     IsNotTrusted          { get; set; } // bit
			/// <summary>
			/// 0 indicates a table-level CHECK constraint.<br/> Non-zero value indicates that this is a column-level CHECK constraint defined on the column with the specified ID value.
			/// </summary>
			[Column("parent_column_id"),        NotNull    ] public int      ParentColumnID        { get; set; } // int
			/// <summary>
			/// SQL expression that defines this CHECK constraint.
			/// </summary>
			[Column("definition"),                 Nullable] public string?  Definition            { get; set; } // nvarchar(max)
			/// <summary>
			/// 1 = The constraint definition depends on the default collation of the database for correct evaluation; otherwise, 0. Such a dependency prevents changing the database default collation.
			/// </summary>
			[Column("uses_database_collation"),    Nullable] public bool?    UsesDatabaseCollation { get; set; } // bit
			/// <summary>
			/// 1 = Name was generated by system.<br/> 0 = Name was supplied by the user.
			/// </summary>
			[Column("is_system_named"),         NotNull    ] public bool     IsSystemNamed         { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.OneToOne, KeyName="objects", BackReferenceName="CheckConstraint")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="column_encryption_keys", IsView=true)]
		public partial class ColumnEncryptionKeys
		{
			[Column("name"),                     NotNull] public string   Name                  { get; set; } = null!; // sysname
			[Column("column_encryption_key_id"), NotNull] public int      ColumnEncryptionKeyID { get; set; } // int
			[Column("create_date"),              NotNull] public DateTime CreateDate            { get; set; } // datetime
			[Column("modify_date"),              NotNull] public DateTime ModifyDate            { get; set; } // datetime
		}

		[Table(Schema="sys", Name="column_encryption_key_values", IsView=true)]
		public partial class ColumnEncryptionKeyValues
		{
			[Column("column_encryption_key_id"),  NotNull    ] public int     ColumnEncryptionKeyID   { get; set; } // int
			[Column("column_master_key_id"),      NotNull    ] public int     ColumnMasterKeyID       { get; set; } // int
			[Column("encrypted_value"),              Nullable] public byte[]? EncryptedValue          { get; set; } // varbinary(8000)
			[Column("encryption_algorithm_name"),    Nullable] public string? EncryptionAlgorithmName { get; set; } // sysname
		}

		[Table(Schema="sys", Name="column_master_keys", IsView=true)]
		public partial class ColumnMasterKeys
		{
			[Column("name"),                       NotNull    ] public string   Name                     { get; set; } = null!; // sysname
			[Column("column_master_key_id"),       NotNull    ] public int      ColumnMasterKeyID        { get; set; } // int
			[Column("create_date"),                NotNull    ] public DateTime CreateDate               { get; set; } // datetime
			[Column("modify_date"),                NotNull    ] public DateTime ModifyDate               { get; set; } // datetime
			[Column("key_store_provider_name"),       Nullable] public string?  KeyStoreProviderName     { get; set; } // sysname
			[Column("key_path"),                      Nullable] public string?  KeyPath                  { get; set; } // nvarchar(4000)
			[Column("allow_enclave_computations"), NotNull    ] public int      AllowEnclaveComputations { get; set; } // int
			[Column("signature"),                     Nullable] public byte[]?  Signature                { get; set; } // varbinary(8000)
		}

		/// <summary>
		/// Returns a row for each column of an object that has columns, such as views or tables. The following is a list of object types that have columns:<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-columns-transact-sql?view=sql-server-ver15'>sys.columns</a>.
		/// </summary>
		[Table(Schema="sys", Name="columns", IsView=true)]
		public partial class Columns
		{
			/// <summary>
			/// ID of the object to which this column belongs.
			/// </summary>
			[Column("object_id"),                           NotNull    ] public int     ObjectID                        { get; set; } // int
			/// <summary>
			/// Name of the column. Is unique within the object.
			/// </summary>
			[Column("name"),                                   Nullable] public string? Name                            { get; set; } // sysname
			/// <summary>
			/// ID of the column. Is unique within the object.<br/> Column IDs might not be sequential.
			/// </summary>
			[Column("column_id"),                           NotNull    ] public int     ColumnID                        { get; set; } // int
			/// <summary>
			/// ID of the system type of the column.
			/// </summary>
			[Column("system_type_id"),                      NotNull    ] public byte    SystemTypeID                    { get; set; } // tinyint
			/// <summary>
			/// ID of the type of the column as defined by the user.<br/> To return the name of the type, join to the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-types-transact-sql?view=sql-server-ver15'>sys.types</a> catalog view on this column.
			/// </summary>
			[Column("user_type_id"),                        NotNull    ] public int     UserTypeID                      { get; set; } // int
			/// <summary>
			/// Maximum length (in bytes) of the column.<br/> -1 = Column data type is <b>varchar(max)</b>, <b>nvarchar(max)</b>, <b>varbinary(max)</b>, or <b>xml</b>.<br/> For <b>text</b>, <b>ntext</b>, and <b>image</b> columns, the max_length value will be 16 (representing the 16-byte pointer only) or the value set by sp_tableoption &apos;text in row&apos;.
			/// </summary>
			[Column("max_length"),                          NotNull    ] public short   MaxLength                       { get; set; } // smallint
			/// <summary>
			/// Precision of the column if numeric-based; otherwise, 0.
			/// </summary>
			[Column("precision"),                           NotNull    ] public byte    Precision                       { get; set; } // tinyint
			/// <summary>
			/// Scale of column if numeric-based; otherwise, 0.
			/// </summary>
			[Column("scale"),                               NotNull    ] public byte    Scale                           { get; set; } // tinyint
			/// <summary>
			/// Name of the collation of the column if character-based; otherwise <i>NULL</i>.
			/// </summary>
			[Column("collation_name"),                         Nullable] public string? CollationName                   { get; set; } // sysname
			/// <summary>
			/// 1 = Column is nullable.
			/// </summary>
			[Column("is_nullable"),                            Nullable] public bool?   IsNullable                      { get; set; } // bit
			/// <summary>
			/// 1 = Column uses ANSI_PADDING ON behavior if character, binary, or variant.<br/> 0 = Column is not character, binary, or variant.
			/// </summary>
			[Column("is_ansi_padded"),                      NotNull    ] public bool    IsAnsiPadded                    { get; set; } // bit
			/// <summary>
			/// 1 = Column is a declared ROWGUIDCOL.
			/// </summary>
			[Column("is_rowguidcol"),                       NotNull    ] public bool    IsRowguidcol                    { get; set; } // bit
			/// <summary>
			/// 1 = Column has identity values
			/// </summary>
			[Column("is_identity"),                         NotNull    ] public bool    IsIdentity                      { get; set; } // bit
			/// <summary>
			/// 1 = Column is a computed column.
			/// </summary>
			[Column("is_computed"),                         NotNull    ] public bool    IsComputed                      { get; set; } // bit
			/// <summary>
			/// 1 = Column is a FILESTREAM column.
			/// </summary>
			[Column("is_filestream"),                       NotNull    ] public bool    IsFilestream                    { get; set; } // bit
			/// <summary>
			/// 1 = Column is replicated.
			/// </summary>
			[Column("is_replicated"),                          Nullable] public bool?   IsReplicated                    { get; set; } // bit
			/// <summary>
			/// 1 = Column has a non-SQL Server subscriber.
			/// </summary>
			[Column("is_non_sql_subscribed"),                  Nullable] public bool?   IsNonSqlSubscribed              { get; set; } // bit
			/// <summary>
			/// 1 = Column is merge-published.
			/// </summary>
			[Column("is_merge_published"),                     Nullable] public bool?   IsMergePublished                { get; set; } // bit
			/// <summary>
			/// 1 = Column is replicated by using SSIS.
			/// </summary>
			[Column("is_dts_replicated"),                      Nullable] public bool?   IsDtsReplicated                 { get; set; } // bit
			/// <summary>
			/// 1 = Content is a complete XML document.<br/> 0 = Content is a document fragment or the column data type is not <b>xml</b>.
			/// </summary>
			[Column("is_xml_document"),                     NotNull    ] public bool    IsXmlDocument                   { get; set; } // bit
			/// <summary>
			/// Nonzero if the data type of the column is <b>xml</b> and the XML is typed. The value will be the ID of the collection containing the validating XML schema namespace of the column.<br/> 0 = No XML schema collection.
			/// </summary>
			[Column("xml_collection_id"),                   NotNull    ] public int     XmlCollectionID                 { get; set; } // int
			/// <summary>
			/// ID of the default object, regardless of whether it is a stand-alone object <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../system-stored-procedures/sp-bindefault-transact-sql?view=sql-server-ver15'>sys.sp_bindefault</a>, or an inline, column-level DEFAULT constraint. The parent_object_id column of an inline column-level default object is a reference back to the table itself.<br/> 0 = No default.
			/// </summary>
			[Column("default_object_id"),                   NotNull    ] public int     DefaultObjectID                 { get; set; } // int
			/// <summary>
			/// ID of the stand-alone rule bound to the column by using sys.sp_bindrule.<br/> 0 = No stand-alone rule. For column-level CHECK constraints, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-check-constraints-transact-sql?view=sql-server-ver15'>sys.check_constraints (Transact-SQL)</a>.
			/// </summary>
			[Column("rule_object_id"),                      NotNull    ] public int     RuleObjectID                    { get; set; } // int
			/// <summary>
			/// 1 = Column is a sparse column. For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../tables/use-sparse-columns?view=sql-server-ver15'>Use Sparse Columns</a>.
			/// </summary>
			[Column("is_sparse"),                              Nullable] public bool?   IsSparse                        { get; set; } // bit
			/// <summary>
			/// 1 = Column is a column set. For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../tables/use-sparse-columns?view=sql-server-ver15'>Use Sparse Columns</a>.
			/// </summary>
			[Column("is_column_set"),                          Nullable] public bool?   IsColumnSet                     { get; set; } // bit
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database. 7, 8, 9, 10 only applies to SQL Database.<br/> Identifies when the column value is generated (will always be 0 for columns in system tables):<br/> 0 = NOT_APPLICABLE<br/> 1 = AS_ROW_START<br/> 2 = AS_ROW_END<br/>7 = AS_TRANSACTION_ID_START<br/>8 = AS_TRANSACTION_ID_END<br/>9 = AS_SEQUENCE_NUMBER_START<br/>10 = AS_SEQUENCE_NUMBER_END<br/> For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../tables/temporal-tables?view=sql-server-ver15'>Temporal Tables (Relational databases)</a>.
			/// </summary>
			[Column("generated_always_type"),                  Nullable] public byte?   GeneratedAlwaysType             { get; set; } // tinyint
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> Textual description of <i>generated_always_type</i>&apos;s value (always NOT_APPLICABLE for columns in system tables) <br/> NOT_APPLICABLE<br/> AS_ROW_START<br/> AS_ROW_END<br/><br/><b>Applies to</b>: SQL Database<br/><br/>AS_TRANSACTION_ID_START<br/>AS_TRANSACTION_ID_END<br/>AS_SEQUENCE_NUMBER_START<br/>AS_SEQUENCE_NUMBER_END
			/// </summary>
			[Column("generated_always_type_desc"),             Nullable] public string? GeneratedAlwaysTypeDesc         { get; set; } // nvarchar(60)
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> Encryption type:<br/> 1 = Deterministic encryption<br/> 2 = Randomized encryption
			/// </summary>
			[Column("encryption_type"),                        Nullable] public int?    EncryptionType                  { get; set; } // int
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> Encryption type description:<br/> RANDOMIZED<br/> DETERMINISTIC
			/// </summary>
			[Column("encryption_type_desc"),                   Nullable] public string? EncryptionTypeDesc              { get; set; } // nvarchar(64)
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> Name of encryption algorithm.<br/> Only AEAD_AES_256_CBC_HMAC_SHA_512 is supported.
			/// </summary>
			[Column("encryption_algorithm_name"),              Nullable] public string? EncryptionAlgorithmName         { get; set; } // sysname
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> ID of the CEK.
			/// </summary>
			[Column("column_encryption_key_id"),               Nullable] public int?    ColumnEncryptionKeyID           { get; set; } // int
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> The name of the database where the column encryption key exists if different than the database of the column. <i>NULL</i> if the key exists in the same database as the column.
			/// </summary>
			[Column("column_encryption_key_database_name"),    Nullable] public string? ColumnEncryptionKeyDatabaseName { get; set; } // sysname
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2019 (15.x) and later, SQL Database.<br/> Indicates if the column is hidden:<br/> 0 = regular, not-hidden, visible column<br/> 1 = hidden column
			/// </summary>
			[Column("is_hidden"),                              Nullable] public bool?   IsHidden                        { get; set; } // bit
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2019 (15.x) and later, SQL Database.<br/> Indicates if the column is masked by a dynamic data masking:<br/> 0 = regular, not-masked column<br/> 1 = column is masked
			/// </summary>
			[Column("is_masked"),                           NotNull    ] public bool    IsMasked                        { get; set; } // bit
			/// <summary>
			/// Internal column with a set of values. The values are between 1-8 for graph columns and <i>NULL</i> for others.
			/// </summary>
			[Column("graph_type"),                             Nullable] public int?    GraphType                       { get; set; } // int
			/// <summary>
			/// internal column with a set of values
			/// </summary>
			[Column("graph_type_desc"),                        Nullable] public string? GraphTypeDesc                   { get; set; } // nvarchar(60)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="Columns")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains a row for each dictionary used in xVelocity memory optimized columnstore indexes. Dictionaries are used to encode some, but not all data types, therefore not all columns in a columnstore index have dictionaries. A dictionary can exist as a primary dictionary (for all segments) and possibly for other secondary dictionaries used for a subset of the column&apos;s segments.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-column-store-dictionaries-transact-sql?view=sql-server-ver15'>sys.column_store_dictionaries</a>.
		/// </summary>
		[Table(Schema="sys", Name="column_store_dictionaries", IsView=true)]
		public partial class ColumnStoreDictionaries
		{
			/// <summary>
			/// Indicates the partition ID. Is unique within a database.
			/// </summary>
			[Column("partition_id"),  Nullable] public long? PartitionID  { get; set; } // bigint
			/// <summary>
			/// ID of the heap or B-tree index (HoBT) for the table that has this columnstore index.
			/// </summary>
			[Column("hobt_id"),       Nullable] public long? HobtID       { get; set; } // bigint
			/// <summary>
			/// ID of the columnstore column starting with 1. The first column has ID = 1, the second column has ID = 2, etc.
			/// </summary>
			[Column("column_id"),     Nullable] public int?  ColumnID     { get; set; } // int
			/// <summary>
			/// There can be two kinds of dictionaries, global and local, associated with a column segment. A dictionary_id of 0 represents the global dictionary that is shared across all column segments (one for each row group) for that column.
			/// </summary>
			[Column("dictionary_id"), Nullable] public int?  DictionaryID { get; set; } // int
			/// <summary>
			/// Version of the dictionary format.
			/// </summary>
			[Column("version"),       Nullable] public int?  Version      { get; set; } // int
			/// <summary>
			/// Dictionary type:<br/> 1 - Hash dictionary containing <b>int</b> values<br/> 2 - Not used<br/> 3 - Hash dictionary containing string values<br/> 4 - Hash dictionary containing <b>float</b> values<br/> For more information about dictionaries, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../indexes/columnstore-indexes-overview?view=sql-server-ver15'>Columnstore Indexes Guide</a>.
			/// </summary>
			[Column("type"),          Nullable] public int?  Type         { get; set; } // int
			/// <summary>
			/// The last data ID in the dictionary.
			/// </summary>
			[Column("last_id"),       Nullable] public int?  LastID       { get; set; } // int
			/// <summary>
			/// Number of entries in the dictionary.
			/// </summary>
			[Column("entry_count"),   Nullable] public long? EntryCount   { get; set; } // bigint
			/// <summary>
			/// Size of dictionary in bytes.
			/// </summary>
			[Column("on_disk_size"),  Nullable] public long? OnDiskSize   { get; set; } // bigint
		}

		/// <summary>
		/// Provides clustered columnstore index information on a per-segment basis to help the administrator make system management decisions. <b>sys.column_store_row_groups</b> has a column for the total number of rows physically stored (including those marked as deleted) and a column for the number of rows marked as deleted. Use <b>sys.column_store_row_groups</b> to determine which row groups have a high percentage of deleted rows and should be rebuilt.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-column-store-row-groups-transact-sql?view=sql-server-ver15'>sys.column_store_row_groups</a>.
		/// </summary>
		[Table(Schema="sys", Name="column_store_row_groups", IsView=true)]
		public partial class ColumnStoreRowGroups
		{
			/// <summary>
			/// The id of the table on which this index is defined.
			/// </summary>
			[Column("object_id"),              Nullable] public int?   ObjectID         { get; set; } // int
			/// <summary>
			/// ID of the index for the table that has this columnstore index.
			/// </summary>
			[Column("index_id"),               Nullable] public int?   IndexID          { get; set; } // int
			/// <summary>
			/// ID of the table partition that holds row group row_group_id. You can use partition_number to join this DMV to sys.partitions.
			/// </summary>
			[Column("partition_number"),       Nullable] public int?   PartitionNumber  { get; set; } // int
			/// <summary>
			/// The row group number associated with this row group. This is unique within the partition.<br/> -1 = tail of an in-memory table.
			/// </summary>
			[Column("row_group_id"),           Nullable] public int?   RowGroupID       { get; set; } // int
			/// <summary>
			/// The hobt_id for OPEN row group in the delta store.<br/> NULL if the row group is not in the delta store.<br/> NULL for the tail of an in-memory table.
			/// </summary>
			[Column("delta_store_hobt_id"),    Nullable] public long?  DeltaStoreHobtID { get; set; } // bigint
			/// <summary>
			/// ID number associated with the state_description.<br/> 0 = INVISIBLE<br/> 1 = OPEN<br/> 2 = CLOSED<br/> 3 = COMPRESSED <br/> 4 = TOMBSTONE
			/// </summary>
			[Column("state"),                  Nullable] public byte?  State            { get; set; } // tinyint
			/// <summary>
			/// Description of the persistent state of the row group:<br/> INVISIBLE -A hidden compressed segment in the process of being built from data in a delta store. Read actions will use the delta store until the invisible compressed segment is completed. Then the new segment is made visible, and the source delta store is removed.<br/> OPEN - A read/write row group that is accepting new records. An open row group is still in rowstore format and has not been compressed to columnstore format.<br/> CLOSED - A row group that has been filled, but not yet compressed by the tuple mover process.<br/> COMPRESSED - A row group that has filled and compressed.
			/// </summary>
			[Column("state_description"),   NotNull    ] public string StateDescription { get; set; } = null!; // nvarchar(60)
			/// <summary>
			/// Total rows physically stored in the row group. Some may have been deleted but they are still stored. The maximum number of rows in a row group is 1,048,576 (hexadecimal FFFFF).
			/// </summary>
			[Column("total_rows"),             Nullable] public long?  TotalRows        { get; set; } // bigint
			/// <summary>
			/// Total rows in the row group marked deleted. This is always 0 for DELTA row groups.
			/// </summary>
			[Column("deleted_rows"),           Nullable] public long?  DeletedRows      { get; set; } // bigint
			/// <summary>
			/// Size in bytes of all the data in this row group (not including metadata or shared dictionaries), for both DELTA and COLUMNSTORE rowgroups.
			/// </summary>
			[Column("size_in_bytes"),          Nullable] public long?  SizeInBytes      { get; set; } // bigint

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="ColumnStoreRowGroups")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Returns one row for each column segment in a columnstore index. There is one column segment per column per rowgroup. For example, a table with 10 rowgroups and 34 columns returns 340 rows.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-column-store-segments-transact-sql?view=sql-server-ver15'>sys.column_store_segments</a>.
		/// </summary>
		[Table(Schema="sys", Name="column_store_segments", IsView=true)]
		public partial class ColumnStoreSegments
		{
			/// <summary>
			/// Indicates the partition ID. Is unique within a database.
			/// </summary>
			[Column("partition_id"),            Nullable] public long?   PartitionID           { get; set; } // bigint
			/// <summary>
			/// ID of the heap or B-tree index (HoBT) for the table that has this columnstore index.
			/// </summary>
			[Column("hobt_id"),                 Nullable] public long?   HobtID                { get; set; } // bigint
			/// <summary>
			/// ID of the columnstore column.
			/// </summary>
			[Column("column_id"),               Nullable] public int?    ColumnID              { get; set; } // int
			/// <summary>
			/// ID of the rowgroup. For backward compatibility, the column name continues to be called segment_id even though this is the rowgroup ID. You can uniquely identify a segment using &lt;hobt_id, partition_id, column_id&gt;, &lt;segment_id&gt;.
			/// </summary>
			[Column("segment_id"),              Nullable] public int?    SegmentID             { get; set; } // int
			/// <summary>
			/// Version of the column segment format.
			/// </summary>
			[Column("version"),                 Nullable] public int?    Version               { get; set; } // int
			/// <summary>
			/// Type of encoding used for that segment:<br/> 1 = VALUE_BASED - non-string/binary with no dictionary (similar to 4 with some internal variations)<br/> 2 = VALUE_HASH_BASED - non-string/binary column with common values in dictionary<br/> 3 = STRING_HASH_BASED - string/binary column with common values in dictionary<br/> 4 = STORE_BY_VALUE_BASED - non-string/binary with no dictionary<br/> 5 = STRING_STORE_BY_VALUE_BASED - string/binary with no dictionary<br/> For more information, see the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-column-store-segments-transact-sql?view=sql-server-ver15#remarks'>Remarks</a> section.
			/// </summary>
			[Column("encoding_type"),           Nullable] public int?    EncodingType          { get; set; } // int
			/// <summary>
			/// Number of rows in the row group.
			/// </summary>
			[Column("row_count"),               Nullable] public int?    RowCount              { get; set; } // int
			/// <summary>
			/// 1 if the column segment has null values.
			/// </summary>
			[Column("has_nulls"),               Nullable] public int?    HasNulls              { get; set; } // int
			/// <summary>
			/// Base value ID if encoding type 1 is being used. If encoding type 1 is not being used, base_id is set to -1.
			/// </summary>
			[Column("base_id"),                 Nullable] public long?   BaseID                { get; set; } // bigint
			/// <summary>
			/// Magnitude if encoding type 1 is being used. If encoding type 1 is not being used, magnitude is set to -1.
			/// </summary>
			[Column("magnitude"),               Nullable] public double? Magnitude             { get; set; } // float
			/// <summary>
			/// A value of 0 represents the global dictionary. A value of -1 indicates that there is no global dictionary created for this column.
			/// </summary>
			[Column("primary_dictionary_id"),   Nullable] public int?    PrimaryDictionaryID   { get; set; } // int
			/// <summary>
			/// A non-zero value points to the local dictionary for this column in the current segment (i.e. the rowgroup). A value of -1 indicates that there is no local dictionary for this segment.
			/// </summary>
			[Column("secondary_dictionary_id"), Nullable] public int?    SecondaryDictionaryID { get; set; } // int
			/// <summary>
			/// Minimum data ID in the column segment.
			/// </summary>
			[Column("min_data_id"),             Nullable] public long?   MinDataID             { get; set; } // bigint
			/// <summary>
			/// Maximum data ID in the column segment.
			/// </summary>
			[Column("max_data_id"),             Nullable] public long?   MaxDataID             { get; set; } // bigint
			/// <summary>
			/// Value used to represent nulls.
			/// </summary>
			[Column("null_value"),              Nullable] public long?   NullValue             { get; set; } // bigint
			/// <summary>
			/// Size of segment in bytes.
			/// </summary>
			[Column("on_disk_size"),            Nullable] public long?   OnDiskSize            { get; set; } // bigint
		}

		/// <summary>
		/// Contains one row for each column that is of user-defined type.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-column-type-usages-transact-sql?view=sql-server-ver15'>sys.column_type_usages</a>.
		/// </summary>
		[Table(Schema="sys", Name="column_type_usages", IsView=true)]
		public partial class ColumnTypeUsages
		{
			/// <summary>
			/// ID of the object to which this column belongs.
			/// </summary>
			[Column("object_id"),    NotNull] public int ObjectID   { get; set; } // int
			/// <summary>
			/// ID of the column. Is unique within the object.
			/// </summary>
			[Column("column_id"),    NotNull] public int ColumnID   { get; set; } // int
			/// <summary>
			/// ID of the user-defined type.<br/> To return the name of the type, join to the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-types-transact-sql?view=sql-server-ver15'>sys.types</a> catalog view on this column.
			/// </summary>
			[Column("user_type_id"), NotNull] public int UserTypeID { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="ColumnTypeUsages")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains a row for each column found in <b>sys.columns</b> that is a computed-column.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-computed-columns-transact-sql?view=sql-server-ver15'>sys.computed_columns</a>.
		/// </summary>
		[Table(Schema="sys", Name="computed_columns", IsView=true)]
		public partial class ComputedColumns
		{
			[Column("object_id"),                           NotNull    ] public int     ObjectID                        { get; set; } // int
			[Column("name"),                                   Nullable] public string? Name                            { get; set; } // sysname
			[Column("column_id"),                           NotNull    ] public int     ColumnID                        { get; set; } // int
			[Column("system_type_id"),                      NotNull    ] public byte    SystemTypeID                    { get; set; } // tinyint
			[Column("user_type_id"),                        NotNull    ] public int     UserTypeID                      { get; set; } // int
			[Column("max_length"),                          NotNull    ] public short   MaxLength                       { get; set; } // smallint
			[Column("precision"),                           NotNull    ] public byte    Precision                       { get; set; } // tinyint
			[Column("scale"),                               NotNull    ] public byte    Scale                           { get; set; } // tinyint
			[Column("collation_name"),                         Nullable] public string? CollationName                   { get; set; } // sysname
			[Column("is_nullable"),                            Nullable] public bool?   IsNullable                      { get; set; } // bit
			[Column("is_ansi_padded"),                      NotNull    ] public bool    IsAnsiPadded                    { get; set; } // bit
			[Column("is_rowguidcol"),                       NotNull    ] public bool    IsRowguidcol                    { get; set; } // bit
			[Column("is_identity"),                         NotNull    ] public bool    IsIdentity                      { get; set; } // bit
			[Column("is_filestream"),                       NotNull    ] public bool    IsFilestream                    { get; set; } // bit
			[Column("is_replicated"),                          Nullable] public bool?   IsReplicated                    { get; set; } // bit
			[Column("is_non_sql_subscribed"),                  Nullable] public bool?   IsNonSqlSubscribed              { get; set; } // bit
			[Column("is_merge_published"),                     Nullable] public bool?   IsMergePublished                { get; set; } // bit
			[Column("is_dts_replicated"),                      Nullable] public bool?   IsDtsReplicated                 { get; set; } // bit
			[Column("is_xml_document"),                     NotNull    ] public bool    IsXmlDocument                   { get; set; } // bit
			[Column("xml_collection_id"),                   NotNull    ] public int     XmlCollectionID                 { get; set; } // int
			[Column("default_object_id"),                   NotNull    ] public int     DefaultObjectID                 { get; set; } // int
			[Column("rule_object_id"),                      NotNull    ] public int     RuleObjectID                    { get; set; } // int
			/// <summary>
			/// SQL text that defines this computed-column.
			/// </summary>
			[Column("definition"),                             Nullable] public string? Definition                      { get; set; } // nvarchar(max)
			/// <summary>
			/// 1 = The column definition depends on the default collation of the database for correct evaluation; otherwise, 0. Such a dependency prevents changing the database default collation.
			/// </summary>
			[Column("uses_database_collation"),             NotNull    ] public bool    UsesDatabaseCollation           { get; set; } // bit
			/// <summary>
			/// Computed column is persisted.
			/// </summary>
			[Column("is_persisted"),                        NotNull    ] public bool    IsPersisted                     { get; set; } // bit
			[Column("is_computed"),                         NotNull    ] public bool    IsComputed                      { get; set; } // bit
			[Column("is_sparse"),                           NotNull    ] public bool    IsSparse                        { get; set; } // bit
			[Column("is_column_set"),                       NotNull    ] public bool    IsColumnSet                     { get; set; } // bit
			[Column("generated_always_type"),                  Nullable] public byte?   GeneratedAlwaysType             { get; set; } // tinyint
			[Column("generated_always_type_desc"),             Nullable] public string? GeneratedAlwaysTypeDesc         { get; set; } // nvarchar(60)
			[Column("encryption_type"),                        Nullable] public int?    EncryptionType                  { get; set; } // int
			[Column("encryption_type_desc"),                   Nullable] public string? EncryptionTypeDesc              { get; set; } // nvarchar(64)
			[Column("encryption_algorithm_name"),              Nullable] public string? EncryptionAlgorithmName         { get; set; } // nvarchar(128)
			[Column("column_encryption_key_id"),               Nullable] public int?    ColumnEncryptionKeyID           { get; set; } // int
			[Column("column_encryption_key_database_name"),    Nullable] public string? ColumnEncryptionKeyDatabaseName { get; set; } // sysname
			[Column("is_hidden"),                           NotNull    ] public bool    IsHidden                        { get; set; } // bit
			[Column("is_masked"),                           NotNull    ] public bool    IsMasked                        { get; set; } // bit
			[Column("graph_type"),                             Nullable] public int?    GraphType                       { get; set; } // int
			[Column("graph_type_desc"),                        Nullable] public string? GraphTypeDesc                   { get; set; } // nvarchar(60)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="ComputedColumns")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="configurations", IsView=true)]
		public partial class Configurations
		{
			[Column("configuration_id"), NotNull    ] public int     ConfigurationID { get; set; } // int
			[Column("name"),             NotNull    ] public string  Name            { get; set; } = null!; // nvarchar(35)
			[Column("value"),               Nullable] public object? Value           { get; set; } // sql_variant
			[Column("minimum"),             Nullable] public object? Minimum         { get; set; } // sql_variant
			[Column("maximum"),             Nullable] public object? Maximum         { get; set; } // sql_variant
			[Column("value_in_use"),        Nullable] public object? ValueInUse      { get; set; } // sql_variant
			[Column("description"),      NotNull    ] public string  Description     { get; set; } = null!; // nvarchar(255)
			[Column("is_dynamic"),       NotNull    ] public bool    IsDynamic       { get; set; } // bit
			[Column("is_advanced"),      NotNull    ] public bool    IsAdvanced      { get; set; } // bit
		}

		[Table(Schema="sys", Name="conversation_endpoints", IsView=true)]
		public partial class ConversationEndpoints
		{
			[Column("conversation_handle"),             NotNull    ] public Guid     ConversationHandle           { get; set; } // uniqueidentifier
			[Column("conversation_id"),                 NotNull    ] public Guid     ConversationID               { get; set; } // uniqueidentifier
			[Column("is_initiator"),                    NotNull    ] public bool     IsInitiator                  { get; set; } // bit
			[Column("service_contract_id"),             NotNull    ] public int      ServiceContractID            { get; set; } // int
			[Column("conversation_group_id"),           NotNull    ] public Guid     ConversationGroupID          { get; set; } // uniqueidentifier
			[Column("service_id"),                      NotNull    ] public int      ServiceID                    { get; set; } // int
			[Column("lifetime"),                        NotNull    ] public DateTime Lifetime                     { get; set; } // datetime
			[Column("state"),                           NotNull    ] public string   State                        { get; set; } = null!; // char(2)
			[Column("state_desc"),                         Nullable] public string?  StateDesc                    { get; set; } // nvarchar(60)
			[Column("far_service"),                     NotNull    ] public string   FarService                   { get; set; } = null!; // nvarchar(256)
			[Column("far_broker_instance"),                Nullable] public string?  FarBrokerInstance            { get; set; } // nvarchar(128)
			[Column("principal_id"),                    NotNull    ] public int      PrincipalID                  { get; set; } // int
			[Column("far_principal_id"),                NotNull    ] public int      FarPrincipalID               { get; set; } // int
			[Column("outbound_session_key_identifier"), NotNull    ] public Guid     OutboundSessionKeyIdentifier { get; set; } // uniqueidentifier
			[Column("inbound_session_key_identifier"),  NotNull    ] public Guid     InboundSessionKeyIdentifier  { get; set; } // uniqueidentifier
			[Column("security_timestamp"),              NotNull    ] public DateTime SecurityTimestamp            { get; set; } // datetime
			[Column("dialog_timer"),                    NotNull    ] public DateTime DialogTimer                  { get; set; } // datetime
			[Column("send_sequence"),                   NotNull    ] public long     SendSequence                 { get; set; } // bigint
			[Column("last_send_tran_id"),               NotNull    ] public byte[]   LastSendTranID               { get; set; } = null!; // binary(6)
			[Column("end_dialog_sequence"),             NotNull    ] public long     EndDialogSequence            { get; set; } // bigint
			[Column("receive_sequence"),                NotNull    ] public long     ReceiveSequence              { get; set; } // bigint
			[Column("receive_sequence_frag"),           NotNull    ] public int      ReceiveSequenceFrag          { get; set; } // int
			[Column("system_sequence"),                 NotNull    ] public long     SystemSequence               { get; set; } // bigint
			[Column("first_out_of_order_sequence"),     NotNull    ] public long     FirstOutOfOrderSequence      { get; set; } // bigint
			[Column("last_out_of_order_sequence"),      NotNull    ] public long     LastOutOfOrderSequence       { get; set; } // bigint
			[Column("last_out_of_order_frag"),          NotNull    ] public int      LastOutOfOrderFrag           { get; set; } // int
			[Column("is_system"),                       NotNull    ] public bool     IsSystem                     { get; set; } // bit
			[Column("priority"),                        NotNull    ] public byte     Priority                     { get; set; } // tinyint
		}

		[Table(Schema="sys", Name="conversation_groups", IsView=true)]
		public partial class ConversationGroups
		{
			[Column("conversation_group_id"), NotNull    ] public Guid  ConversationGroupID { get; set; } // uniqueidentifier
			[Column("service_id"),            NotNull    ] public int   ServiceID           { get; set; } // int
			[Column("is_system"),                Nullable] public bool? IsSystem            { get; set; } // bit
		}

		[Table(Schema="sys", Name="conversation_priorities", IsView=true)]
		public partial class ConversationPriorities
		{
			[Column("priority_id"),         NotNull    ] public int     PriorityID        { get; set; } // int
			[Column("name"),                NotNull    ] public string  Name              { get; set; } = null!; // sysname
			[Column("service_contract_id"),    Nullable] public int?    ServiceContractID { get; set; } // int
			[Column("local_service_id"),       Nullable] public int?    LocalServiceID    { get; set; } // int
			[Column("remote_service_name"),    Nullable] public string? RemoteServiceName { get; set; } // nvarchar(256)
			[Column("priority"),            NotNull    ] public byte    Priority          { get; set; } // tinyint
		}

		[Table(Schema="sys", Name="credentials", IsView=true)]
		public partial class Credentials
		{
			[Column("credential_id"),       NotNull    ] public int      CredentialID       { get; set; } // int
			[Column("name"),                NotNull    ] public string   Name               { get; set; } = null!; // sysname
			[Column("credential_identity"),    Nullable] public string?  CredentialIdentity { get; set; } // nvarchar(4000)
			[Column("create_date"),         NotNull    ] public DateTime CreateDate         { get; set; } // datetime
			[Column("modify_date"),         NotNull    ] public DateTime ModifyDate         { get; set; } // datetime
			[Column("target_type"),            Nullable] public string?  TargetType         { get; set; } // nvarchar(60)
			[Column("target_id"),              Nullable] public int?     TargetID           { get; set; } // int
		}

		[Table(Schema="sys", Name="cryptographic_providers", IsView=true)]
		public partial class CryptographicProviders
		{
			[Column("provider_id"), NotNull    ] public int     ProviderID { get; set; } // int
			[Column("name"),        NotNull    ] public string  Name       { get; set; } = null!; // sysname
			[Column("guid"),           Nullable] public Guid?   Guid       { get; set; } // uniqueidentifier
			[Column("version"),        Nullable] public string? Version    { get; set; } // nvarchar(24)
			[Column("dll_path"),       Nullable] public string? DllPath    { get; set; } // nvarchar(520)
			[Column("is_enabled"),  NotNull    ] public bool    IsEnabled  { get; set; } // bit
		}

		[Table(Schema="sys", Name="crypt_properties", IsView=true)]
		public partial class CryptProperties
		{
			[Column("class"),           NotNull    ] public byte    @class        { get; set; } // tinyint
			[Column("class_desc"),         Nullable] public string? ClassDesc     { get; set; } // nvarchar(60)
			[Column("major_id"),        NotNull    ] public int     MajorID       { get; set; } // int
			[Column("thumbprint"),      NotNull    ] public byte[]  Thumbprint    { get; set; } = null!; // varbinary(32)
			[Column("crypt_type"),      NotNull    ] public string  CryptType     { get; set; } = null!; // char(4)
			[Column("crypt_type_desc"),    Nullable] public string? CryptTypeDesc { get; set; } // nvarchar(60)
			[Column("crypt_property"),  NotNull    ] public byte[]  CryptProperty { get; set; } = null!; // varbinary(-1)
		}

		[Table(Schema="sys", Name="database_audit_specification_details", IsView=true)]
		public partial class DatabaseAuditSpecificationDetails
		{
			[Column("database_specification_id"), NotNull    ] public int     DatabaseSpecificationID { get; set; } // int
			[Column("audit_action_id"),           NotNull    ] public string  AuditActionID           { get; set; } = null!; // char(4)
			[Column("audit_action_name"),            Nullable] public string? AuditActionName         { get; set; } // nvarchar(60)
			[Column("class"),                     NotNull    ] public byte    @class                  { get; set; } // tinyint
			[Column("class_desc"),                   Nullable] public string? ClassDesc               { get; set; } // nvarchar(60)
			[Column("major_id"),                  NotNull    ] public int     MajorID                 { get; set; } // int
			[Column("minor_id"),                  NotNull    ] public int     MinorID                 { get; set; } // int
			[Column("audited_principal_id"),      NotNull    ] public int     AuditedPrincipalID      { get; set; } // int
			[Column("audited_result"),               Nullable] public string? AuditedResult           { get; set; } // nvarchar(60)
			[Column("is_group"),                     Nullable] public bool?   IsGroup                 { get; set; } // bit
		}

		[Table(Schema="sys", Name="database_audit_specifications", IsView=true)]
		public partial class DatabaseAuditSpecifications
		{
			[Column("database_specification_id"), NotNull    ] public int      DatabaseSpecificationID { get; set; } // int
			[Column("name"),                      NotNull    ] public string   Name                    { get; set; } = null!; // sysname
			[Column("create_date"),               NotNull    ] public DateTime CreateDate              { get; set; } // datetime
			[Column("modify_date"),               NotNull    ] public DateTime ModifyDate              { get; set; } // datetime
			[Column("audit_guid"),                   Nullable] public Guid?    AuditGuid               { get; set; } // uniqueidentifier
			[Column("is_state_enabled"),             Nullable] public bool?    IsStateEnabled          { get; set; } // bit
		}

		[Table(Schema="sys", Name="database_automatic_tuning_mode", IsView=true)]
		public partial class DatabaseAutomaticTuningMode
		{
			[Column("desired_state"),      Nullable] public short?  DesiredState     { get; set; } // smallint
			[Column("desired_state_desc"), Nullable] public string? DesiredStateDesc { get; set; } // nvarchar(60)
			[Column("actual_state"),       Nullable] public short?  ActualState      { get; set; } // smallint
			[Column("actual_state_desc"),  Nullable] public string? ActualStateDesc  { get; set; } // nvarchar(60)
		}

		[Table(Schema="sys", Name="database_automatic_tuning_options", IsView=true)]
		public partial class DatabaseAutomaticTuningOptions
		{
			[Column("name"),               Nullable] public string? Name             { get; set; } // nvarchar(128)
			[Column("desired_state"),      Nullable] public short?  DesiredState     { get; set; } // smallint
			[Column("desired_state_desc"), Nullable] public string? DesiredStateDesc { get; set; } // nvarchar(60)
			[Column("actual_state"),       Nullable] public short?  ActualState      { get; set; } // smallint
			[Column("actual_state_desc"),  Nullable] public string? ActualStateDesc  { get; set; } // nvarchar(60)
			[Column("reason"),             Nullable] public short?  Reason           { get; set; } // smallint
			[Column("reason_desc"),        Nullable] public string? ReasonDesc       { get; set; } // nvarchar(60)
		}

		[Table(Schema="sys", Name="database_credentials", IsView=true)]
		public partial class DatabaseCredentials
		{
			[Column("name"),                NotNull    ] public string   Name               { get; set; } = null!; // sysname
			[Column("principal_id"),        NotNull    ] public int      PrincipalID        { get; set; } // int
			[Column("credential_id"),       NotNull    ] public int      CredentialID       { get; set; } // int
			[Column("credential_identity"),    Nullable] public string?  CredentialIdentity { get; set; } // nvarchar(4000)
			[Column("create_date"),         NotNull    ] public DateTime CreateDate         { get; set; } // datetime
			[Column("modify_date"),         NotNull    ] public DateTime ModifyDate         { get; set; } // datetime
			[Column("target_type"),            Nullable] public string?  TargetType         { get; set; } // nvarchar(60)
			[Column("target_id"),              Nullable] public int?     TargetID           { get; set; } // int
		}

		[Table(Schema="sys", Name="database_files", IsView=true)]
		public partial class DatabaseFiles
		{
			[Column("file_id"),                  NotNull    ] public int       FileID                { get; set; } // int
			[Column("file_guid"),                   Nullable] public Guid?     FileGuid              { get; set; } // uniqueidentifier
			[Column("type"),                     NotNull    ] public byte      Type                  { get; set; } // tinyint
			[Column("type_desc"),                   Nullable] public string?   TypeDesc              { get; set; } // nvarchar(60)
			[Column("data_space_id"),            NotNull    ] public int       DataSpaceID           { get; set; } // int
			[Column("name"),                     NotNull    ] public string    Name                  { get; set; } = null!; // sysname
			[Column("physical_name"),               Nullable] public string?   PhysicalName          { get; set; } // nvarchar(260)
			[Column("state"),                       Nullable] public byte?     State                 { get; set; } // tinyint
			[Column("state_desc"),                  Nullable] public string?   StateDesc             { get; set; } // nvarchar(60)
			[Column("size"),                     NotNull    ] public int       Size                  { get; set; } // int
			[Column("max_size"),                 NotNull    ] public int       MaxSize               { get; set; } // int
			[Column("growth"),                   NotNull    ] public int       Growth                { get; set; } // int
			[Column("is_media_read_only"),       NotNull    ] public bool      IsMediaReadOnly       { get; set; } // bit
			[Column("is_read_only"),             NotNull    ] public bool      IsReadOnly            { get; set; } // bit
			[Column("is_sparse"),                NotNull    ] public bool      IsSparse              { get; set; } // bit
			[Column("is_percent_growth"),        NotNull    ] public bool      IsPercentGrowth       { get; set; } // bit
			[Column("is_name_reserved"),         NotNull    ] public bool      IsNameReserved        { get; set; } // bit
			[Column("is_persistent_log_buffer"), NotNull    ] public bool      IsPersistentLogBuffer { get; set; } // bit
			[Column("create_lsn"),                  Nullable] public decimal?  CreateLsn             { get; set; } // numeric(25,0)
			[Column("drop_lsn"),                    Nullable] public decimal?  DropLsn               { get; set; } // numeric(25,0)
			[Column("read_only_lsn"),               Nullable] public decimal?  ReadOnlyLsn           { get; set; } // numeric(25,0)
			[Column("read_write_lsn"),              Nullable] public decimal?  ReadWriteLsn          { get; set; } // numeric(25,0)
			[Column("differential_base_lsn"),       Nullable] public decimal?  DifferentialBaseLsn   { get; set; } // numeric(25,0)
			[Column("differential_base_guid"),      Nullable] public Guid?     DifferentialBaseGuid  { get; set; } // uniqueidentifier
			[Column("differential_base_time"),      Nullable] public DateTime? DifferentialBaseTime  { get; set; } // datetime
			[Column("redo_start_lsn"),              Nullable] public decimal?  RedoStartLsn          { get; set; } // numeric(25,0)
			[Column("redo_start_fork_guid"),        Nullable] public Guid?     RedoStartForkGuid     { get; set; } // uniqueidentifier
			[Column("redo_target_lsn"),             Nullable] public decimal?  RedoTargetLsn         { get; set; } // numeric(25,0)
			[Column("redo_target_fork_guid"),       Nullable] public Guid?     RedoTargetForkGuid    { get; set; } // uniqueidentifier
			[Column("backup_lsn"),                  Nullable] public decimal?  BackupLsn             { get; set; } // numeric(25,0)
		}

		[Table(Schema="sys", Name="database_filestream_options", IsView=true)]
		public partial class DatabaseFilestreamOptions
		{
			[Column("database_id"),                NotNull    ] public int     DatabaseID              { get; set; } // int
			[Column("non_transacted_access"),      NotNull    ] public byte    NonTransactedAccess     { get; set; } // tinyint
			[Column("non_transacted_access_desc"), NotNull    ] public string  NonTransactedAccessDesc { get; set; } = null!; // nvarchar(60)
			[Column("directory_name"),                Nullable] public string? DirectoryName           { get; set; } // nvarchar(256)
		}

		[Table(Schema="sys", Name="database_mirroring", IsView=true)]
		public partial class DatabaseMirroring
		{
			[Column("database_id"),                  NotNull    ] public int      DatabaseID                 { get; set; } // int
			[Column("mirroring_guid"),                  Nullable] public Guid?    MirroringGuid              { get; set; } // uniqueidentifier
			[Column("mirroring_state"),                 Nullable] public byte?    MirroringState             { get; set; } // tinyint
			[Column("mirroring_state_desc"),            Nullable] public string?  MirroringStateDesc         { get; set; } // nvarchar(60)
			[Column("mirroring_role"),                  Nullable] public byte?    MirroringRole              { get; set; } // tinyint
			[Column("mirroring_role_desc"),             Nullable] public string?  MirroringRoleDesc          { get; set; } // nvarchar(60)
			[Column("mirroring_role_sequence"),         Nullable] public int?     MirroringRoleSequence      { get; set; } // int
			[Column("mirroring_safety_level"),          Nullable] public byte?    MirroringSafetyLevel       { get; set; } // tinyint
			[Column("mirroring_safety_level_desc"),     Nullable] public string?  MirroringSafetyLevelDesc   { get; set; } // nvarchar(60)
			[Column("mirroring_safety_sequence"),       Nullable] public int?     MirroringSafetySequence    { get; set; } // int
			[Column("mirroring_partner_name"),          Nullable] public string?  MirroringPartnerName       { get; set; } // nvarchar(128)
			[Column("mirroring_partner_instance"),      Nullable] public string?  MirroringPartnerInstance   { get; set; } // nvarchar(128)
			[Column("mirroring_witness_name"),          Nullable] public string?  MirroringWitnessName       { get; set; } // nvarchar(128)
			[Column("mirroring_witness_state"),         Nullable] public byte?    MirroringWitnessState      { get; set; } // tinyint
			[Column("mirroring_witness_state_desc"),    Nullable] public string?  MirroringWitnessStateDesc  { get; set; } // nvarchar(60)
			[Column("mirroring_failover_lsn"),          Nullable] public decimal? MirroringFailoverLsn       { get; set; } // numeric(25,0)
			[Column("mirroring_connection_timeout"),    Nullable] public int?     MirroringConnectionTimeout { get; set; } // int
			[Column("mirroring_redo_queue"),            Nullable] public int?     MirroringRedoQueue         { get; set; } // int
			[Column("mirroring_redo_queue_type"),       Nullable] public string?  MirroringRedoQueueType     { get; set; } // nvarchar(60)
			[Column("mirroring_end_of_log_lsn"),        Nullable] public decimal? MirroringEndOfLogLsn       { get; set; } // numeric(25,0)
			[Column("mirroring_replication_lsn"),       Nullable] public decimal? MirroringReplicationLsn    { get; set; } // numeric(25,0)
		}

		[Table(Schema="sys", Name="database_mirroring_endpoints", IsView=true)]
		public partial class DatabaseMirroringEndpoints
		{
			[Column("name"),                      NotNull    ] public string  Name                    { get; set; } = null!; // sysname
			[Column("endpoint_id"),               NotNull    ] public int     EndpointID              { get; set; } // int
			[Column("principal_id"),                 Nullable] public int?    PrincipalID             { get; set; } // int
			[Column("protocol"),                  NotNull    ] public byte    Protocol                { get; set; } // tinyint
			[Column("protocol_desc"),                Nullable] public string? ProtocolDesc            { get; set; } // nvarchar(60)
			[Column("type"),                      NotNull    ] public byte    Type                    { get; set; } // tinyint
			[Column("type_desc"),                    Nullable] public string? TypeDesc                { get; set; } // nvarchar(60)
			[Column("state"),                        Nullable] public byte?   State                   { get; set; } // tinyint
			[Column("state_desc"),                   Nullable] public string? StateDesc               { get; set; } // nvarchar(60)
			[Column("is_admin_endpoint"),         NotNull    ] public bool    IsAdminEndpoint         { get; set; } // bit
			[Column("role"),                         Nullable] public byte?   Role                    { get; set; } // tinyint
			[Column("role_desc"),                    Nullable] public string? RoleDesc                { get; set; } // nvarchar(60)
			[Column("is_encryption_enabled"),     NotNull    ] public bool    IsEncryptionEnabled     { get; set; } // bit
			[Column("connection_auth"),           NotNull    ] public byte    ConnectionAuth          { get; set; } // tinyint
			[Column("connection_auth_desc"),         Nullable] public string? ConnectionAuthDesc      { get; set; } // nvarchar(60)
			[Column("certificate_id"),            NotNull    ] public int     CertificateID           { get; set; } // int
			[Column("encryption_algorithm"),      NotNull    ] public byte    EncryptionAlgorithm     { get; set; } // tinyint
			[Column("encryption_algorithm_desc"),    Nullable] public string? EncryptionAlgorithmDesc { get; set; } // nvarchar(60)
		}

		[Table(Schema="sys", Name="database_mirroring_witnesses", IsView=true)]
		public partial class DatabaseMirroringWitnesses
		{
			[Column("database_name"),                NotNull    ] public string  DatabaseName              { get; set; } = null!; // sysname
			[Column("principal_server_name"),           Nullable] public string? PrincipalServerName       { get; set; } // sysname
			[Column("mirror_server_name"),              Nullable] public string? MirrorServerName          { get; set; } // sysname
			[Column("safety_level"),                 NotNull    ] public byte    SafetyLevel               { get; set; } // tinyint
			[Column("safety_level_desc"),               Nullable] public string? SafetyLevelDesc           { get; set; } // nvarchar(60)
			[Column("safety_sequence_number"),       NotNull    ] public int     SafetySequenceNumber      { get; set; } // int
			[Column("role_sequence_number"),         NotNull    ] public int     RoleSequenceNumber        { get; set; } // int
			[Column("mirroring_guid"),               NotNull    ] public Guid    MirroringGuid             { get; set; } // uniqueidentifier
			[Column("family_guid"),                  NotNull    ] public Guid    FamilyGuid                { get; set; } // uniqueidentifier
			[Column("is_suspended"),                    Nullable] public bool?   IsSuspended               { get; set; } // bit
			[Column("is_suspended_sequence_number"), NotNull    ] public int     IsSuspendedSequenceNumber { get; set; } // int
			[Column("partner_sync_state"),              Nullable] public byte?   PartnerSyncState          { get; set; } // tinyint
			[Column("partner_sync_state_desc"),         Nullable] public string? PartnerSyncStateDesc      { get; set; } // nvarchar(60)
		}

		[Table(Schema="sys", Name="database_permissions", IsView=true)]
		public partial class DatabasePermissions
		{
			[Column("class"),                NotNull    ] public byte    @class             { get; set; } // tinyint
			[Column("class_desc"),              Nullable] public string? ClassDesc          { get; set; } // nvarchar(60)
			[Column("major_id"),             NotNull    ] public int     MajorID            { get; set; } // int
			[Column("minor_id"),             NotNull    ] public int     MinorID            { get; set; } // int
			[Column("grantee_principal_id"), NotNull    ] public int     GranteePrincipalID { get; set; } // int
			[Column("grantor_principal_id"), NotNull    ] public int     GrantorPrincipalID { get; set; } // int
			[Column("type"),                 NotNull    ] public string  Type               { get; set; } = null!; // char(4)
			[Column("permission_name"),         Nullable] public string? PermissionName     { get; set; } // nvarchar(128)
			[Column("state"),                NotNull    ] public string  State              { get; set; } = null!; // char(1)
			[Column("state_desc"),              Nullable] public string? StateDesc          { get; set; } // nvarchar(60)
		}

		[Table(Schema="sys", Name="database_principals", IsView=true)]
		public partial class DatabasePrincipals
		{
			[Column("name"),                                NotNull    ] public string   Name                             { get; set; } = null!; // sysname
			[Column("principal_id"),                        NotNull    ] public int      PrincipalID                      { get; set; } // int
			[Column("type"),                                NotNull    ] public string   Type                             { get; set; } = null!; // char(1)
			[Column("type_desc"),                              Nullable] public string?  TypeDesc                         { get; set; } // nvarchar(60)
			[Column("default_schema_name"),                    Nullable] public string?  DefaultSchemaName                { get; set; } // sysname
			[Column("create_date"),                         NotNull    ] public DateTime CreateDate                       { get; set; } // datetime
			[Column("modify_date"),                         NotNull    ] public DateTime ModifyDate                       { get; set; } // datetime
			[Column("owning_principal_id"),                    Nullable] public int?     OwningPrincipalID                { get; set; } // int
			[Column("sid"),                                    Nullable] public byte[]?  Sid                              { get; set; } // varbinary(85)
			[Column("is_fixed_role"),                       NotNull    ] public bool     IsFixedRole                      { get; set; } // bit
			[Column("authentication_type"),                 NotNull    ] public int      AuthenticationType               { get; set; } // int
			[Column("authentication_type_desc"),               Nullable] public string?  AuthenticationTypeDesc           { get; set; } // nvarchar(60)
			[Column("default_language_name"),                  Nullable] public string?  DefaultLanguageName              { get; set; } // sysname
			[Column("default_language_lcid"),                  Nullable] public int?     DefaultLanguageLcid              { get; set; } // int
			[Column("allow_encrypted_value_modifications"), NotNull    ] public bool     AllowEncryptedValueModifications { get; set; } // bit
		}

		[Table(Schema="sys", Name="database_query_store_options", IsView=true)]
		public partial class DatabaseQueryStoreOptions
		{
			[Column("desired_state"),                              NotNull    ] public short   DesiredState                         { get; set; } // smallint
			[Column("desired_state_desc"),                            Nullable] public string? DesiredStateDesc                     { get; set; } // nvarchar(60)
			[Column("actual_state"),                               NotNull    ] public short   ActualState                          { get; set; } // smallint
			[Column("actual_state_desc"),                             Nullable] public string? ActualStateDesc                      { get; set; } // nvarchar(60)
			[Column("readonly_reason"),                               Nullable] public int?    ReadonlyReason                       { get; set; } // int
			[Column("current_storage_size_mb"),                       Nullable] public long?   CurrentStorageSizeMb                 { get; set; } // bigint
			[Column("flush_interval_seconds"),                        Nullable] public long?   FlushIntervalSeconds                 { get; set; } // bigint
			[Column("interval_length_minutes"),                       Nullable] public long?   IntervalLengthMinutes                { get; set; } // bigint
			[Column("max_storage_size_mb"),                           Nullable] public long?   MaxStorageSizeMb                     { get; set; } // bigint
			[Column("stale_query_threshold_days"),                    Nullable] public long?   StaleQueryThresholdDays              { get; set; } // bigint
			[Column("max_plans_per_query"),                           Nullable] public long?   MaxPlansPerQuery                     { get; set; } // bigint
			[Column("query_capture_mode"),                         NotNull    ] public short   QueryCaptureMode                     { get; set; } // smallint
			[Column("query_capture_mode_desc"),                       Nullable] public string? QueryCaptureModeDesc                 { get; set; } // nvarchar(60)
			[Column("capture_policy_execution_count"),                Nullable] public int?    CapturePolicyExecutionCount          { get; set; } // int
			[Column("capture_policy_total_compile_cpu_time_ms"),      Nullable] public long?   CapturePolicyTotalCompileCpuTimeMs   { get; set; } // bigint
			[Column("capture_policy_total_execution_cpu_time_ms"),    Nullable] public long?   CapturePolicyTotalExecutionCpuTimeMs { get; set; } // bigint
			[Column("capture_policy_stale_threshold_hours"),          Nullable] public int?    CapturePolicyStaleThresholdHours     { get; set; } // int
			[Column("size_based_cleanup_mode"),                    NotNull    ] public short   SizeBasedCleanupMode                 { get; set; } // smallint
			[Column("size_based_cleanup_mode_desc"),                  Nullable] public string? SizeBasedCleanupModeDesc             { get; set; } // nvarchar(60)
			[Column("wait_stats_capture_mode"),                    NotNull    ] public short   WaitStatsCaptureMode                 { get; set; } // smallint
			[Column("wait_stats_capture_mode_desc"),                  Nullable] public string? WaitStatsCaptureModeDesc             { get; set; } // nvarchar(60)
			[Column("actual_state_additional_info"),                  Nullable] public string? ActualStateAdditionalInfo            { get; set; } // nvarchar(4000)
		}

		[Table(Schema="sys", Name="database_recovery_status", IsView=true)]
		public partial class DatabaseRecoveryStatus
		{
			[Column("database_id"),              NotNull    ] public int      DatabaseID            { get; set; } // int
			[Column("database_guid"),               Nullable] public Guid?    DatabaseGuid          { get; set; } // uniqueidentifier
			[Column("family_guid"),                 Nullable] public Guid?    FamilyGuid            { get; set; } // uniqueidentifier
			[Column("last_log_backup_lsn"),         Nullable] public decimal? LastLogBackupLsn      { get; set; } // numeric(25,0)
			[Column("recovery_fork_guid"),          Nullable] public Guid?    RecoveryForkGuid      { get; set; } // uniqueidentifier
			[Column("first_recovery_fork_guid"),    Nullable] public Guid?    FirstRecoveryForkGuid { get; set; } // uniqueidentifier
			[Column("fork_point_lsn"),              Nullable] public decimal? ForkPointLsn          { get; set; } // numeric(25,0)
		}

		[Table(Schema="sys", Name="database_role_members", IsView=true)]
		public partial class DatabaseRoleMembers
		{
			[Column("role_principal_id"),   NotNull] public int RolePrincipalID   { get; set; } // int
			[Column("member_principal_id"), NotNull] public int MemberPrincipalID { get; set; } // int
		}

		[Table(Schema="sys", Name="databases", IsView=true)]
		public partial class Databases
		{
			[Column("name"),                                          Nullable] public string?  Name                                 { get; set; } // sysname
			[Column("database_id"),                                NotNull    ] public int      DatabaseID                           { get; set; } // int
			[Column("source_database_id"),                            Nullable] public int?     SourceDatabaseID                     { get; set; } // int
			[Column("owner_sid"),                                     Nullable] public byte[]?  OwnerSid                             { get; set; } // varbinary(85)
			[Column("create_date"),                                NotNull    ] public DateTime CreateDate                           { get; set; } // datetime
			[Column("compatibility_level"),                        NotNull    ] public byte     CompatibilityLevel                   { get; set; } // tinyint
			[Column("collation_name"),                                Nullable] public string?  CollationName                        { get; set; } // sysname
			[Column("user_access"),                                   Nullable] public byte?    UserAccess                           { get; set; } // tinyint
			[Column("user_access_desc"),                              Nullable] public string?  UserAccessDesc                       { get; set; } // nvarchar(60)
			[Column("is_read_only"),                                  Nullable] public bool?    IsReadOnly                           { get; set; } // bit
			[Column("is_auto_close_on"),                           NotNull    ] public bool     IsAutoCloseOn                        { get; set; } // bit
			[Column("is_auto_shrink_on"),                             Nullable] public bool?    IsAutoShrinkOn                       { get; set; } // bit
			[Column("state"),                                         Nullable] public byte?    State                                { get; set; } // tinyint
			[Column("state_desc"),                                    Nullable] public string?  StateDesc                            { get; set; } // nvarchar(60)
			[Column("is_in_standby"),                                 Nullable] public bool?    IsInStandby                          { get; set; } // bit
			[Column("is_cleanly_shutdown"),                           Nullable] public bool?    IsCleanlyShutdown                    { get; set; } // bit
			[Column("is_supplemental_logging_enabled"),               Nullable] public bool?    IsSupplementalLoggingEnabled         { get; set; } // bit
			[Column("snapshot_isolation_state"),                      Nullable] public byte?    SnapshotIsolationState               { get; set; } // tinyint
			[Column("snapshot_isolation_state_desc"),                 Nullable] public string?  SnapshotIsolationStateDesc           { get; set; } // nvarchar(60)
			[Column("is_read_committed_snapshot_on"),                 Nullable] public bool?    IsReadCommittedSnapshotOn            { get; set; } // bit
			[Column("recovery_model"),                                Nullable] public byte?    RecoveryModel                        { get; set; } // tinyint
			[Column("recovery_model_desc"),                           Nullable] public string?  RecoveryModelDesc                    { get; set; } // nvarchar(60)
			[Column("page_verify_option"),                            Nullable] public byte?    PageVerifyOption                     { get; set; } // tinyint
			[Column("page_verify_option_desc"),                       Nullable] public string?  PageVerifyOptionDesc                 { get; set; } // nvarchar(60)
			[Column("is_auto_create_stats_on"),                       Nullable] public bool?    IsAutoCreateStatsOn                  { get; set; } // bit
			[Column("is_auto_create_stats_incremental_on"),           Nullable] public bool?    IsAutoCreateStatsIncrementalOn       { get; set; } // bit
			[Column("is_auto_update_stats_on"),                       Nullable] public bool?    IsAutoUpdateStatsOn                  { get; set; } // bit
			[Column("is_auto_update_stats_async_on"),                 Nullable] public bool?    IsAutoUpdateStatsAsyncOn             { get; set; } // bit
			[Column("is_ansi_null_default_on"),                       Nullable] public bool?    IsAnsiNullDefaultOn                  { get; set; } // bit
			[Column("is_ansi_nulls_on"),                              Nullable] public bool?    IsAnsiNullsOn                        { get; set; } // bit
			[Column("is_ansi_padding_on"),                            Nullable] public bool?    IsAnsiPaddingOn                      { get; set; } // bit
			[Column("is_ansi_warnings_on"),                           Nullable] public bool?    IsAnsiWarningsOn                     { get; set; } // bit
			[Column("is_arithabort_on"),                              Nullable] public bool?    IsArithabortOn                       { get; set; } // bit
			[Column("is_concat_null_yields_null_on"),                 Nullable] public bool?    IsConcatNullYieldsNullOn             { get; set; } // bit
			[Column("is_numeric_roundabort_on"),                      Nullable] public bool?    IsNumericRoundabortOn                { get; set; } // bit
			[Column("is_quoted_identifier_on"),                       Nullable] public bool?    IsQuotedIdentifierOn                 { get; set; } // bit
			[Column("is_recursive_triggers_on"),                      Nullable] public bool?    IsRecursiveTriggersOn                { get; set; } // bit
			[Column("is_cursor_close_on_commit_on"),                  Nullable] public bool?    IsCursorCloseOnCommitOn              { get; set; } // bit
			[Column("is_local_cursor_default"),                       Nullable] public bool?    IsLocalCursorDefault                 { get; set; } // bit
			[Column("is_fulltext_enabled"),                           Nullable] public bool?    IsFulltextEnabled                    { get; set; } // bit
			[Column("is_trustworthy_on"),                             Nullable] public bool?    IsTrustworthyOn                      { get; set; } // bit
			[Column("is_db_chaining_on"),                             Nullable] public bool?    IsDbChainingOn                       { get; set; } // bit
			[Column("is_parameterization_forced"),                    Nullable] public bool?    IsParameterizationForced             { get; set; } // bit
			[Column("is_master_key_encrypted_by_server"),          NotNull    ] public bool     IsMasterKeyEncryptedByServer         { get; set; } // bit
			[Column("is_query_store_on"),                             Nullable] public bool?    IsQueryStoreOn                       { get; set; } // bit
			[Column("is_published"),                               NotNull    ] public bool     IsPublished                          { get; set; } // bit
			[Column("is_subscribed"),                              NotNull    ] public bool     IsSubscribed                         { get; set; } // bit
			[Column("is_merge_published"),                         NotNull    ] public bool     IsMergePublished                     { get; set; } // bit
			[Column("is_distributor"),                             NotNull    ] public bool     IsDistributor                        { get; set; } // bit
			[Column("is_sync_with_backup"),                        NotNull    ] public bool     IsSyncWithBackup                     { get; set; } // bit
			[Column("service_broker_guid"),                        NotNull    ] public Guid     ServiceBrokerGuid                    { get; set; } // uniqueidentifier
			[Column("is_broker_enabled"),                          NotNull    ] public bool     IsBrokerEnabled                      { get; set; } // bit
			[Column("log_reuse_wait"),                                Nullable] public byte?    LogReuseWait                         { get; set; } // tinyint
			[Column("log_reuse_wait_desc"),                           Nullable] public string?  LogReuseWaitDesc                     { get; set; } // nvarchar(60)
			[Column("is_date_correlation_on"),                     NotNull    ] public bool     IsDateCorrelationOn                  { get; set; } // bit
			[Column("is_cdc_enabled"),                             NotNull    ] public bool     IsCdcEnabled                         { get; set; } // bit
			[Column("is_encrypted"),                                  Nullable] public bool?    IsEncrypted                          { get; set; } // bit
			[Column("is_honor_broker_priority_on"),                   Nullable] public bool?    IsHonorBrokerPriorityOn              { get; set; } // bit
			[Column("replica_id"),                                    Nullable] public Guid?    ReplicaID                            { get; set; } // uniqueidentifier
			[Column("group_database_id"),                             Nullable] public Guid?    GroupDatabaseID                      { get; set; } // uniqueidentifier
			[Column("resource_pool_id"),                              Nullable] public int?     ResourcePoolID                       { get; set; } // int
			[Column("default_language_lcid"),                         Nullable] public short?   DefaultLanguageLcid                  { get; set; } // smallint
			[Column("default_language_name"),                         Nullable] public string?  DefaultLanguageName                  { get; set; } // nvarchar(128)
			[Column("default_fulltext_language_lcid"),                Nullable] public int?     DefaultFulltextLanguageLcid          { get; set; } // int
			[Column("default_fulltext_language_name"),                Nullable] public string?  DefaultFulltextLanguageName          { get; set; } // nvarchar(128)
			[Column("is_nested_triggers_on"),                         Nullable] public bool?    IsNestedTriggersOn                   { get; set; } // bit
			[Column("is_transform_noise_words_on"),                   Nullable] public bool?    IsTransformNoiseWordsOn              { get; set; } // bit
			[Column("two_digit_year_cutoff"),                         Nullable] public short?   TwoDigitYearCutoff                   { get; set; } // smallint
			[Column("containment"),                                   Nullable] public byte?    Containment                          { get; set; } // tinyint
			[Column("containment_desc"),                              Nullable] public string?  ContainmentDesc                      { get; set; } // nvarchar(60)
			[Column("target_recovery_time_in_seconds"),               Nullable] public int?     TargetRecoveryTimeInSeconds          { get; set; } // int
			[Column("delayed_durability"),                            Nullable] public int?     DelayedDurability                    { get; set; } // int
			[Column("delayed_durability_desc"),                       Nullable] public string?  DelayedDurabilityDesc                { get; set; } // nvarchar(60)
			[Column("is_memory_optimized_elevate_to_snapshot_on"),    Nullable] public bool?    IsMemoryOptimizedElevateToSnapshotOn { get; set; } // bit
			[Column("is_federation_member"),                          Nullable] public bool?    IsFederationMember                   { get; set; } // bit
			[Column("is_remote_data_archive_enabled"),                Nullable] public bool?    IsRemoteDataArchiveEnabled           { get; set; } // bit
			[Column("is_mixed_page_allocation_on"),                   Nullable] public bool?    IsMixedPageAllocationOn              { get; set; } // bit
			[Column("is_temporal_history_retention_enabled"),         Nullable] public bool?    IsTemporalHistoryRetentionEnabled    { get; set; } // bit
			[Column("catalog_collation_type"),                     NotNull    ] public int      CatalogCollationType                 { get; set; } // int
			[Column("catalog_collation_type_desc"),                   Nullable] public string?  CatalogCollationTypeDesc             { get; set; } // nvarchar(60)
			[Column("physical_database_name"),                        Nullable] public string?  PhysicalDatabaseName                 { get; set; } // nvarchar(128)
			[Column("is_result_set_caching_on"),                      Nullable] public bool?    IsResultSetCachingOn                 { get; set; } // bit
			[Column("is_accelerated_database_recovery_on"),           Nullable] public bool?    IsAcceleratedDatabaseRecoveryOn      { get; set; } // bit
			[Column("is_tempdb_spill_to_remote_store"),               Nullable] public bool?    IsTempdbSpillToRemoteStore           { get; set; } // bit
			[Column("is_stale_page_detection_on"),                    Nullable] public bool?    IsStalePageDetectionOn               { get; set; } // bit
			[Column("is_memory_optimized_enabled"),                   Nullable] public bool?    IsMemoryOptimizedEnabled             { get; set; } // bit
		}

		[Table(Schema="sys", Name="database_scoped_configurations", IsView=true)]
		public partial class DatabaseScopedConfigurations
		{
			[Column("configuration_id"),    Nullable] public int?    ConfigurationID   { get; set; } // int
			[Column("name"),                Nullable] public string? Name              { get; set; } // nvarchar(60)
			[Column("value"),               Nullable] public object? Value             { get; set; } // sql_variant
			[Column("value_for_secondary"), Nullable] public object? ValueForSecondary { get; set; } // sql_variant
			[Column("is_value_default"),    Nullable] public bool?   IsValueDefault    { get; set; } // bit
		}

		[Table(Schema="sys", Name="database_scoped_credentials", IsView=true)]
		public partial class DatabaseScopedCredentials
		{
			[Column("name"),                NotNull    ] public string   Name               { get; set; } = null!; // sysname
			[Column("principal_id"),        NotNull    ] public int      PrincipalID        { get; set; } // int
			[Column("credential_id"),       NotNull    ] public int      CredentialID       { get; set; } // int
			[Column("credential_identity"),    Nullable] public string?  CredentialIdentity { get; set; } // nvarchar(4000)
			[Column("create_date"),         NotNull    ] public DateTime CreateDate         { get; set; } // datetime
			[Column("modify_date"),         NotNull    ] public DateTime ModifyDate         { get; set; } // datetime
			[Column("target_type"),            Nullable] public string?  TargetType         { get; set; } // nvarchar(60)
			[Column("target_id"),              Nullable] public int?     TargetID           { get; set; } // int
		}

		[Table(Schema="sys", Name="data_spaces", IsView=true)]
		public partial class DataSpaces
		{
			[Column("name"),          NotNull    ] public string  Name        { get; set; } = null!; // sysname
			[Column("data_space_id"), NotNull    ] public int     DataSpaceID { get; set; } // int
			[Column("type"),          NotNull    ] public string  Type        { get; set; } = null!; // char(2)
			[Column("type_desc"),        Nullable] public string? TypeDesc    { get; set; } // nvarchar(60)
			[Column("is_default"),    NotNull    ] public bool    IsDefault   { get; set; } // bit
			[Column("is_system"),        Nullable] public bool?   IsSystem    { get; set; } // bit
		}

		/// <summary>
		/// Contains a row for each object that is a default definition (created as part of a CREATE TABLE or ALTER TABLE statement instead of a CREATE DEFAULT statement), with <b>sys.objects.type</b> = D.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-default-constraints-transact-sql?view=sql-server-ver15'>sys.default_constraints</a>.
		/// </summary>
		[Table(Schema="sys", Name="default_constraints", IsView=true)]
		public partial class DefaultConstraints
		{
			[Column("name"),                NotNull    ] public string   Name              { get; set; } = null!; // sysname
			[Column("object_id"),           NotNull    ] public int      ObjectID          { get; set; } // int
			[Column("principal_id"),           Nullable] public int?     PrincipalID       { get; set; } // int
			[Column("schema_id"),           NotNull    ] public int      SchemaID          { get; set; } // int
			[Column("parent_object_id"),    NotNull    ] public int      ParentObjectID    { get; set; } // int
			[Column("type"),                   Nullable] public string?  Type              { get; set; } // char(2)
			[Column("type_desc"),              Nullable] public string?  TypeDesc          { get; set; } // nvarchar(60)
			[Column("create_date"),         NotNull    ] public DateTime CreateDate        { get; set; } // datetime
			[Column("modify_date"),         NotNull    ] public DateTime ModifyDate        { get; set; } // datetime
			[Column("is_ms_shipped"),       NotNull    ] public bool     IsMsShipped       { get; set; } // bit
			[Column("is_published"),        NotNull    ] public bool     IsPublished       { get; set; } // bit
			[Column("is_schema_published"), NotNull    ] public bool     IsSchemaPublished { get; set; } // bit
			/// <summary>
			/// ID of the column in <b>parent_object_id</b> to which this default belongs.
			/// </summary>
			[Column("parent_column_id"),    NotNull    ] public int      ParentColumnID    { get; set; } // int
			/// <summary>
			/// SQL expression that defines this default.
			/// </summary>
			[Column("definition"),             Nullable] public string?  Definition        { get; set; } // nvarchar(max)
			/// <summary>
			/// 1 = Name was generated by system.<br/> 0 = Name was supplied by the user.
			/// </summary>
			[Column("is_system_named"),     NotNull    ] public bool     IsSystemNamed     { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.OneToOne, KeyName="objects", BackReferenceName="DefaultConstraint")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="destination_data_spaces", IsView=true)]
		public partial class DestinationDataSpaces
		{
			[Column("partition_scheme_id"), NotNull] public int PartitionSchemeID { get; set; } // int
			[Column("destination_id"),      NotNull] public int DestinationID     { get; set; } // int
			[Column("data_space_id"),       NotNull] public int DataSpaceID       { get; set; } // int
		}

		[Table(Schema="sys", Name="edge_constraint_clauses", IsView=true)]
		public partial class EdgeConstraintClauses
		{
			[Column("object_id"),      NotNull] public int ObjectID     { get; set; } // int
			[Column("clause_number"),  NotNull] public int ClauseNumber { get; set; } // int
			[Column("from_object_id"), NotNull] public int FromObjectID { get; set; } // int
			[Column("to_object_id"),   NotNull] public int ToObjectID   { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="EdgeConstraintClauses")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="edge_constraints", IsView=true)]
		public partial class EdgeConstraints
		{
			[Column("name"),                           NotNull    ] public string   Name                        { get; set; } = null!; // sysname
			[Column("object_id"),                      NotNull    ] public int      ObjectID                    { get; set; } // int
			[Column("principal_id"),                      Nullable] public int?     PrincipalID                 { get; set; } // int
			[Column("schema_id"),                      NotNull    ] public int      SchemaID                    { get; set; } // int
			[Column("parent_object_id"),               NotNull    ] public int      ParentObjectID              { get; set; } // int
			[Column("type"),                              Nullable] public string?  Type                        { get; set; } // char(2)
			[Column("type_desc"),                         Nullable] public string?  TypeDesc                    { get; set; } // nvarchar(60)
			[Column("create_date"),                    NotNull    ] public DateTime CreateDate                  { get; set; } // datetime
			[Column("modify_date"),                    NotNull    ] public DateTime ModifyDate                  { get; set; } // datetime
			[Column("is_ms_shipped"),                  NotNull    ] public bool     IsMsShipped                 { get; set; } // bit
			[Column("is_published"),                   NotNull    ] public bool     IsPublished                 { get; set; } // bit
			[Column("is_schema_published"),            NotNull    ] public bool     IsSchemaPublished           { get; set; } // bit
			[Column("is_disabled"),                    NotNull    ] public bool     IsDisabled                  { get; set; } // bit
			[Column("is_not_trusted"),                 NotNull    ] public bool     IsNotTrusted                { get; set; } // bit
			[Column("is_system_named"),                NotNull    ] public bool     IsSystemNamed               { get; set; } // bit
			[Column("delete_referential_action"),         Nullable] public byte?    DeleteReferentialAction     { get; set; } // tinyint
			[Column("delete_referential_action_desc"),    Nullable] public string?  DeleteReferentialActionDesc { get; set; } // nvarchar(60)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="EdgeConstraints")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="endpoints", IsView=true)]
		public partial class Endpoints
		{
			[Column("name"),              NotNull    ] public string  Name            { get; set; } = null!; // sysname
			[Column("endpoint_id"),       NotNull    ] public int     EndpointID      { get; set; } // int
			[Column("principal_id"),         Nullable] public int?    PrincipalID     { get; set; } // int
			[Column("protocol"),          NotNull    ] public byte    Protocol        { get; set; } // tinyint
			[Column("protocol_desc"),        Nullable] public string? ProtocolDesc    { get; set; } // nvarchar(60)
			[Column("type"),              NotNull    ] public byte    Type            { get; set; } // tinyint
			[Column("type_desc"),            Nullable] public string? TypeDesc        { get; set; } // nvarchar(60)
			[Column("state"),                Nullable] public byte?   State           { get; set; } // tinyint
			[Column("state_desc"),           Nullable] public string? StateDesc       { get; set; } // nvarchar(60)
			[Column("is_admin_endpoint"), NotNull    ] public bool    IsAdminEndpoint { get; set; } // bit
		}

		[Table(Schema="sys", Name="endpoint_webmethods", IsView=true)]
		public partial class EndpointWebmethods
		{
			[Column("endpoint_id"),        NotNull    ] public int     EndpointID       { get; set; } // int
			[Column("namespace"),             Nullable] public string? @namespace       { get; set; } // nvarchar(384)
			[Column("method_alias"),       NotNull    ] public string  MethodAlias      { get; set; } = null!; // nvarchar(64)
			[Column("object_name"),           Nullable] public string? ObjectName       { get; set; } // nvarchar(776)
			[Column("result_schema"),         Nullable] public byte?   ResultSchema     { get; set; } // tinyint
			[Column("result_schema_desc"),    Nullable] public string? ResultSchemaDesc { get; set; } // nvarchar(60)
			[Column("result_format"),         Nullable] public byte?   ResultFormat     { get; set; } // tinyint
			[Column("result_format_desc"),    Nullable] public string? ResultFormatDesc { get; set; } // nvarchar(60)
		}

		/// <summary>
		/// Returns a row for each event or event group on which an event notification can fire.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-event-notification-event-types-transact-sql?view=sql-server-ver15'>sys.event_notification_event_types</a>.
		/// </summary>
		[Table(Schema="sys", Name="event_notification_event_types", IsView=true)]
		public partial class EventNotificationEventTypes
		{
			/// <summary>
			/// Type of event or event group that causes an event notification to fire.
			/// </summary>
			[Column("type"),        NotNull    ] public int     Type       { get; set; } // int
			/// <summary>
			/// Name of an event or event group. This can be specified in the FOR clause of a <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/create-event-notification-transact-sql?view=sql-server-ver15'>CREATE EVENT NOTIFICATION</a> statement.
			/// </summary>
			[Column("type_name"),      Nullable] public string? TypeName   { get; set; } // nvarchar(128)
			/// <summary>
			/// Type of event group that is the parent of the event or event group.
			/// </summary>
			[Column("parent_type"),    Nullable] public int?    ParentType { get; set; } // int
		}

		/// <summary>
		/// Returns a row for each object that is an event notification, with <b>sys.objects.type</b> = EN.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-event-notifications-transact-sql?view=sql-server-ver15'>sys.event_notifications</a>.
		/// </summary>
		[Table(Schema="sys", Name="event_notifications", IsView=true)]
		public partial class EventNotifications
		{
			/// <summary>
			/// Event notification name.
			/// </summary>
			[Column("name"),              NotNull    ] public string   Name            { get; set; } = null!; // sysname
			/// <summary>
			/// Object identification number. Is unique within a database.
			/// </summary>
			[Column("object_id"),         NotNull    ] public int      ObjectID        { get; set; } // int
			/// <summary>
			/// Class of parent.<br/> 0 = Database<br/> 1 = Object or Column
			/// </summary>
			[Column("parent_class"),      NotNull    ] public byte     ParentClass     { get; set; } // tinyint
			/// <summary>
			/// DATABASE<br/> OBJECT_OR_COLUMN
			/// </summary>
			[Column("parent_class_desc"),    Nullable] public string?  ParentClassDesc { get; set; } // nvarchar(60)
			/// <summary>
			/// Non-zero ID of the parent object.<br/> 0 = The parent class is the database.
			/// </summary>
			[Column("parent_id"),         NotNull    ] public int      ParentID        { get; set; } // int
			/// <summary>
			/// Date created.
			/// </summary>
			[Column("create_date"),       NotNull    ] public DateTime CreateDate      { get; set; } // datetime
			/// <summary>
			/// Always equals <b>create_date</b>.
			/// </summary>
			[Column("modify_date"),       NotNull    ] public DateTime ModifyDate      { get; set; } // datetime
			/// <summary>
			/// Name of the target service to which the notification is sent.
			/// </summary>
			[Column("service_name"),         Nullable] public string?  ServiceName     { get; set; } // nvarchar(256)
			/// <summary>
			/// Broker instance to which the notification is sent.
			/// </summary>
			[Column("broker_instance"),      Nullable] public string?  BrokerInstance  { get; set; } // nvarchar(128)
			/// <summary>
			/// SID of the login who created the event notification.<br/> Is NULL if the FAN_IN option is not specified.
			/// </summary>
			[Column("creator_sid"),          Nullable] public byte[]?  CreatorSid      { get; set; } // varbinary(85)
			/// <summary>
			/// ID of the database principal that owns this event notification.
			/// </summary>
			[Column("principal_id"),         Nullable] public int?     PrincipalID     { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="EventNotifications")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains a row for each event for which a trigger or event notification fires. These events represent the event types that are specified when the trigger or event notification is created by using <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/create-trigger-transact-sql?view=sql-server-ver15'>CREATE TRIGGER</a> or <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/create-event-notification-transact-sql?view=sql-server-ver15'>CREATE EVENT NOTIFICATION</a>.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-events-transact-sql?view=sql-server-ver15'>sys.events</a>.
		/// </summary>
		[Table(Schema="sys", Name="events", IsView=true)]
		public partial class Events
		{
			/// <summary>
			/// ID of the trigger or event notification. This value, together with <b>type</b>, uniquely identifies the row.
			/// </summary>
			[Column("object_id"),             NotNull    ] public int     ObjectID           { get; set; } // int
			/// <summary>
			/// Event that causes the trigger to fire.
			/// </summary>
			[Column("type"),                  NotNull    ] public int     Type               { get; set; } // int
			/// <summary>
			/// Description of the event that causes the trigger to fire.
			/// </summary>
			[Column("type_desc"),             NotNull    ] public string  TypeDesc           { get; set; } = null!; // nvarchar(60)
			/// <summary>
			/// 1 = Trigger event.<br/> 0 = Notification event.
			/// </summary>
			[Column("is_trigger_event"),         Nullable] public bool?   IsTriggerEvent     { get; set; } // bit
			/// <summary>
			/// Event group on which the trigger or event notification is created, or null if not created on an event group.
			/// </summary>
			[Column("event_group_type"),         Nullable] public int?    EventGroupType     { get; set; } // int
			/// <summary>
			/// Description of the event group on which the trigger or event notification is created, or null if not created on an event group.
			/// </summary>
			[Column("event_group_type_desc"),    Nullable] public string? EventGroupTypeDesc { get; set; } // nvarchar(60)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="Events")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains a row for each object that is an extended stored procedure, with <b>sys.objects.type</b> = X. Because extended stored procedures are installed into the <b>master</b> database, they are only visible from that database context. Selecting from the <b>sys.extended_procedures</b> view in any other database context will return an empty result set.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-extended-procedures-transact-sql?view=sql-server-ver15'>sys.extended_procedures</a>.
		/// </summary>
		[Table(Schema="sys", Name="extended_procedures", IsView=true)]
		public partial class ExtendedProcedures
		{
			[Column("name"),                NotNull    ] public string   Name              { get; set; } = null!; // sysname
			[Column("object_id"),           NotNull    ] public int      ObjectID          { get; set; } // int
			[Column("principal_id"),           Nullable] public int?     PrincipalID       { get; set; } // int
			[Column("schema_id"),           NotNull    ] public int      SchemaID          { get; set; } // int
			[Column("parent_object_id"),    NotNull    ] public int      ParentObjectID    { get; set; } // int
			[Column("type"),                   Nullable] public string?  Type              { get; set; } // char(2)
			[Column("type_desc"),              Nullable] public string?  TypeDesc          { get; set; } // nvarchar(60)
			[Column("create_date"),         NotNull    ] public DateTime CreateDate        { get; set; } // datetime
			[Column("modify_date"),         NotNull    ] public DateTime ModifyDate        { get; set; } // datetime
			[Column("is_ms_shipped"),       NotNull    ] public bool     IsMsShipped       { get; set; } // bit
			[Column("is_published"),        NotNull    ] public bool     IsPublished       { get; set; } // bit
			[Column("is_schema_published"), NotNull    ] public bool     IsSchemaPublished { get; set; } // bit
			/// <summary>
			/// Name, including path, of the DLL for this extended stored procedure.
			/// </summary>
			[Column("dll_name"),               Nullable] public string?  DllName           { get; set; } // nvarchar(260)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="ExtendedProcedures")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="extended_properties", IsView=true)]
		public partial class ExtendedProperties
		{
			[Column("class"),      NotNull    ] public byte    @class    { get; set; } // tinyint
			[Column("class_desc"),    Nullable] public string? ClassDesc { get; set; } // nvarchar(60)
			[Column("major_id"),   NotNull    ] public int     MajorID   { get; set; } // int
			[Column("minor_id"),   NotNull    ] public int     MinorID   { get; set; } // int
			[Column("name"),       NotNull    ] public string  Name      { get; set; } = null!; // sysname
			[Column("value"),         Nullable] public object? Value     { get; set; } // sql_variant
		}

		[Table(Schema="sys", Name="external_data_sources", IsView=true)]
		public partial class ExternalDataSources
		{
			[Column("data_source_id"),            NotNull    ] public int     DataSourceID            { get; set; } // int
			[Column("name"),                      NotNull    ] public string  Name                    { get; set; } = null!; // nvarchar(128)
			[Column("location"),                  NotNull    ] public string  Location                { get; set; } = null!; // nvarchar(4000)
			[Column("type_desc"),                    Nullable] public string? TypeDesc                { get; set; } // nvarchar(255)
			[Column("type"),                      NotNull    ] public byte    Type                    { get; set; } // tinyint
			[Column("resource_manager_location"),    Nullable] public string? ResourceManagerLocation { get; set; } // nvarchar(4000)
			[Column("credential_id"),             NotNull    ] public int     CredentialID            { get; set; } // int
			[Column("database_name"),                Nullable] public string? DatabaseName            { get; set; } // nvarchar(128)
			[Column("shard_map_name"),               Nullable] public string? ShardMapName            { get; set; } // nvarchar(128)
			[Column("connection_options"),           Nullable] public string? ConnectionOptions       { get; set; } // nvarchar(4000)
			[Column("pushdown"),                  NotNull    ] public string  Pushdown                { get; set; } = null!; // nvarchar(256)
		}

		[Table(Schema="sys", Name="external_file_formats", IsView=true)]
		public partial class ExternalFileFormats
		{
			[Column("file_format_id"),   NotNull    ] public int     FileFormatID    { get; set; } // int
			[Column("name"),             NotNull    ] public string  Name            { get; set; } = null!; // nvarchar(128)
			[Column("format_type"),      NotNull    ] public string  FormatType      { get; set; } = null!; // nvarchar(100)
			[Column("field_terminator"),    Nullable] public string? FieldTerminator { get; set; } // nvarchar(10)
			[Column("string_delimiter"),    Nullable] public string? StringDelimiter { get; set; } // nvarchar(10)
			[Column("date_format"),         Nullable] public string? DateFormat      { get; set; } // nvarchar(50)
			[Column("use_type_default"),    Nullable] public bool?   UseTypeDefault  { get; set; } // bit
			[Column("serde_method"),        Nullable] public string? SerdeMethod     { get; set; } // nvarchar(255)
			[Column("row_terminator"),      Nullable] public string? RowTerminator   { get; set; } // nvarchar(10)
			[Column("encoding"),            Nullable] public string? Encoding        { get; set; } // nvarchar(10)
			[Column("data_compression"),    Nullable] public string? DataCompression { get; set; } // nvarchar(255)
			[Column("first_row"),           Nullable] public int?    FirstRow        { get; set; } // int
		}

		/// <summary>
		/// This catalog view provides a list of the external language extension files in the database. <b>R</b> and <b>Python</b> are reserved names and no external language can be created with those specific names.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-external-language-files-transact-sql?view=sql-server-ver15'>sys.external_language_files</a>.
		/// </summary>
		[Table(Schema="sys", Name="external_language_files", IsView=true)]
		public partial class ExternalLanguageFiles
		{
			/// <summary>
			/// ID of the external language
			/// </summary>
			[Column("external_language_id"),  NotNull    ] public int     ExternalLanguageID   { get; set; } // int
			/// <summary>
			/// Content of the external language extension file
			/// </summary>
			[Column("content"),                  Nullable] public byte[]? Content              { get; set; } // varbinary(max)
			/// <summary>
			/// Name of the language extension file
			/// </summary>
			[Column("file_name"),                Nullable] public string? FileName             { get; set; } // sysname
			/// <summary>
			/// ID of the host platform on which SQL Server is installed
			/// </summary>
			[Column("platform"),                 Nullable] public byte?   Platform             { get; set; } // tinyint
			/// <summary>
			/// Name of the host platform. Valid values are <i>WINDOWS</i>, <i>LINUX</i>.
			/// </summary>
			[Column("platform_desc"),            Nullable] public string? PlatformDesc         { get; set; } // nvarchar(60)
			/// <summary>
			/// External language parameters
			/// </summary>
			[Column("parameters"),               Nullable] public string? Parameters           { get; set; } // sysname
			/// <summary>
			/// External language environment variables
			/// </summary>
			[Column("environment_variables"),    Nullable] public string? EnvironmentVariables { get; set; } // sysname
		}

		/// <summary>
		/// This catalog view provides a list of the external languages in the database. <b>R</b> and <b>Python</b> are reserved names and no external language can be created with those specific names.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-external-languages-transact-sql?view=sql-server-ver15'>sys.external_languages</a>.
		/// </summary>
		[Table(Schema="sys", Name="external_languages", IsView=true)]
		public partial class ExternalLanguages
		{
			/// <summary>
			/// ID of the external language
			/// </summary>
			[Column("external_language_id"), NotNull    ] public int      ExternalLanguageID { get; set; } // int
			/// <summary>
			/// Name of the external language. Is unique within the database. R and Python are reserved names per instance
			/// </summary>
			[Column("language"),                Nullable] public string?  Language           { get; set; } // sysname
			/// <summary>
			/// Date and time of creation
			/// </summary>
			[Column("create_date"),          NotNull    ] public DateTime CreateDate         { get; set; } // datetime2
			/// <summary>
			/// ID of the principal that owns this external library
			/// </summary>
			[Column("principal_id"),            Nullable] public int?     PrincipalID        { get; set; } // int
		}

		/// <summary>
		/// Supports the management of package libraries related to external runtimes such as R, Python, and Java.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-external-libraries-transact-sql?view=sql-server-ver15'>sys.external_libraries</a>.
		/// </summary>
		[Table(Schema="sys", Name="external_libraries", IsView=true)]
		public partial class ExternalLibraries
		{
			/// <summary>
			/// ID of the external library object.
			/// </summary>
			[Column("external_library_id"), NotNull    ] public int     ExternalLibraryID { get; set; } // int
			/// <summary>
			/// Name of the external library. Is unique within the database per owner.
			/// </summary>
			[Column("name"),                   Nullable] public string? Name              { get; set; } // sysname
			/// <summary>
			/// ID of the principal that owns this external library.
			/// </summary>
			[Column("principal_id"),           Nullable] public int?    PrincipalID       { get; set; } // int
			/// <summary>
			/// Name of the language or runtime that supports the external library. Valid values are &apos;R&apos;, &apos;Python&apos;, and &apos;Java&apos;. Additional runtimes might be added in future.
			/// </summary>
			[Column("language"),               Nullable] public string? Language          { get; set; } // sysname
			/// <summary>
			/// 0 for public scope; 1 for private scope
			/// </summary>
			[Column("scope"),               NotNull    ] public int     Scope             { get; set; } // int
			/// <summary>
			/// Indicates whether the package is public or private
			/// </summary>
			[Column("scope_desc"),          NotNull    ] public string  ScopeDesc         { get; set; } = null!; // varchar(7)
		}

		[Table(Schema="sys", Name="external_libraries_installed", IsView=true)]
		public partial class ExternalLibrariesInstalled
		{
			[Column("db_id"),               NotNull] public int    DbID              { get; set; } // int
			[Column("principal_id"),        NotNull] public int    PrincipalID       { get; set; } // int
			[Column("language_id"),         NotNull] public int    LanguageID        { get; set; } // int
			[Column("external_library_id"), NotNull] public int    ExternalLibraryID { get; set; } // int
			[Column("name"),                NotNull] public string Name              { get; set; } = null!; // nvarchar(128)
			[Column("mdversion"),           NotNull] public byte[] Mdversion         { get; set; } = null!; // binary(8)
		}

		/// <summary>
		/// Lists a row for each file that makes up an external library.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-external-library-files-transact-sql?view=sql-server-ver15'>sys.external_library_files</a>.
		/// </summary>
		[Table(Schema="sys", Name="external_library_files", IsView=true)]
		public partial class ExternalLibraryFiles
		{
			/// <summary>
			/// ID of the external library object.
			/// </summary>
			[Column("external_library_id"), NotNull    ] public int     ExternalLibraryID { get; set; } // int
			/// <summary>
			/// Content of the external library file artifact.
			/// </summary>
			[Column("content"),                Nullable] public byte[]? Content           { get; set; } // varbinary(max)
			/// <summary>
			/// ID of the host platform on which SQL Server is installed.
			/// </summary>
			[Column("platform"),               Nullable] public byte?   Platform          { get; set; } // tinyint
			/// <summary>
			/// Name of the host platform. Valid values are <i>WINDOWS</i>, <i>LINUX</i>.
			/// </summary>
			[Column("platform_desc"),          Nullable] public string? PlatformDesc      { get; set; } // nvarchar(60)
		}

		[Table(Schema="sys", Name="external_library_setup_errors", IsView=true)]
		public partial class ExternalLibrarySetupErrors
		{
			[Column("db_id"),               NotNull    ] public int      DbID              { get; set; } // int
			[Column("principal_id"),        NotNull    ] public int      PrincipalID       { get; set; } // int
			[Column("external_library_id"), NotNull    ] public int      ExternalLibraryID { get; set; } // int
			[Column("error_code"),          NotNull    ] public int      ErrorCode         { get; set; } // int
			[Column("error_timestamp"),     NotNull    ] public DateTime ErrorTimestamp    { get; set; } // datetime2(7)
			[Column("error_message"),          Nullable] public string?  ErrorMessage      { get; set; } // nvarchar(1024)
		}

		[Table(Schema="sys", Name="external_table_columns", IsView=true)]
		public partial class ExternalTableColumns
		{
			[Column("object_id"),                NotNull    ] public int  ObjectID               { get; set; } // int
			[Column("column_id"),                NotNull    ] public int  ColumnID               { get; set; } // int
			[Column("partition_column_ordinal"),    Nullable] public int? PartitionColumnOrdinal { get; set; } // int
			[Column("hash_column_ordinal"),         Nullable] public int? HashColumnOrdinal      { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="ExternalTableColumns")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="external_tables", IsView=true)]
		public partial class ExternalTables
		{
			[Column("name"),                  NotNull    ] public string   Name                { get; set; } = null!; // sysname
			[Column("object_id"),             NotNull    ] public int      ObjectID            { get; set; } // int
			[Column("principal_id"),             Nullable] public int?     PrincipalID         { get; set; } // int
			[Column("schema_id"),             NotNull    ] public int      SchemaID            { get; set; } // int
			[Column("parent_object_id"),      NotNull    ] public int      ParentObjectID      { get; set; } // int
			[Column("type"),                     Nullable] public string?  Type                { get; set; } // char(2)
			[Column("type_desc"),                Nullable] public string?  TypeDesc            { get; set; } // nvarchar(60)
			[Column("create_date"),           NotNull    ] public DateTime CreateDate          { get; set; } // datetime
			[Column("modify_date"),           NotNull    ] public DateTime ModifyDate          { get; set; } // datetime
			[Column("is_ms_shipped"),         NotNull    ] public bool     IsMsShipped         { get; set; } // bit
			[Column("is_published"),          NotNull    ] public bool     IsPublished         { get; set; } // bit
			[Column("is_schema_published"),   NotNull    ] public bool     IsSchemaPublished   { get; set; } // bit
			[Column("max_column_id_used"),       Nullable] public int?     MaxColumnIdUsed     { get; set; } // int
			[Column("uses_ansi_nulls"),          Nullable] public bool?    UsesAnsiNulls       { get; set; } // bit
			[Column("data_source_id"),        NotNull    ] public int      DataSourceID        { get; set; } // int
			[Column("file_format_id"),           Nullable] public int?     FileFormatID        { get; set; } // int
			[Column("location"),                 Nullable] public string?  Location            { get; set; } // nvarchar(4000)
			[Column("reject_type"),              Nullable] public string?  RejectType          { get; set; } // nvarchar(20)
			[Column("reject_value"),             Nullable] public double?  RejectValue         { get; set; } // float
			[Column("reject_sample_value"),      Nullable] public double?  RejectSampleValue   { get; set; } // float
			[Column("distribution_type"),        Nullable] public byte?    DistributionType    { get; set; } // tinyint
			[Column("distribution_desc"),        Nullable] public string?  DistributionDesc    { get; set; } // nvarchar(120)
			[Column("sharding_col_id"),          Nullable] public int?     ShardingColID       { get; set; } // int
			[Column("remote_schema_name"),       Nullable] public string?  RemoteSchemaName    { get; set; } // nvarchar(128)
			[Column("remote_object_name"),       Nullable] public string?  RemoteObjectName    { get; set; } // nvarchar(128)
			[Column("rejected_row_location"),    Nullable] public string?  RejectedRowLocation { get; set; } // nvarchar(4000)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="ExternalTables")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="filegroups", IsView=true)]
		public partial class Filegroups
		{
			[Column("name"),                  NotNull    ] public string  Name               { get; set; } = null!; // sysname
			[Column("data_space_id"),         NotNull    ] public int     DataSpaceID        { get; set; } // int
			[Column("type"),                  NotNull    ] public string  Type               { get; set; } = null!; // char(2)
			[Column("type_desc"),                Nullable] public string? TypeDesc           { get; set; } // nvarchar(60)
			[Column("is_default"),               Nullable] public bool?   IsDefault          { get; set; } // bit
			[Column("is_system"),                Nullable] public bool?   IsSystem           { get; set; } // bit
			[Column("filegroup_guid"),           Nullable] public Guid?   FilegroupGuid      { get; set; } // uniqueidentifier
			[Column("log_filegroup_id"),         Nullable] public int?    LogFilegroupID     { get; set; } // int
			[Column("is_read_only"),             Nullable] public bool?   IsReadOnly         { get; set; } // bit
			[Column("is_autogrow_all_files"),    Nullable] public bool?   IsAutogrowAllFiles { get; set; } // bit
		}

		[Table(Schema="sys", Name="filetables", IsView=true)]
		public partial class Filetables
		{
			[Column("object_id"),               NotNull] public int    ObjectID              { get; set; } // int
			[Column("is_enabled"),              NotNull] public bool   IsEnabled             { get; set; } // bit
			[Column("directory_name"),          NotNull] public string DirectoryName         { get; set; } = null!; // nvarchar(256)
			[Column("filename_collation_id"),   NotNull] public int    FilenameCollationID   { get; set; } // int
			[Column("filename_collation_name"), NotNull] public string FilenameCollationName { get; set; } = null!; // nvarchar(129)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="Filetables")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="filetable_system_defined_objects", IsView=true)]
		public partial class FiletableSystemDefinedObjects
		{
			[Column("object_id"),        NotNull] public int ObjectID       { get; set; } // int
			[Column("parent_object_id"), NotNull] public int ParentObjectID { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="FiletableSystemDefinedObjects")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains a row for each column, or set of columns, that comprise a foreign key.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-foreign-key-columns-transact-sql?view=sql-server-ver15'>sys.foreign_key_columns</a>.
		/// </summary>
		[Table(Schema="sys", Name="foreign_key_columns", IsView=true)]
		public partial class ForeignKeyColumns
		{
			/// <summary>
			/// ID of the FOREIGN KEY constraint.
			/// </summary>
			[Column("constraint_object_id"), NotNull] public int ConstraintObjectID { get; set; } // int
			/// <summary>
			/// ID of the column, or set of columns, that comprise the FOREIGN KEY (<em>1..n</em> where n=number of columns).
			/// </summary>
			[Column("constraint_column_id"), NotNull] public int ConstraintColumnID { get; set; } // int
			/// <summary>
			/// ID of the parent of the constraint, which is the referencing object.
			/// </summary>
			[Column("parent_object_id"),     NotNull] public int ParentObjectID     { get; set; } // int
			/// <summary>
			/// ID of the parent column, which is the referencing column.
			/// </summary>
			[Column("parent_column_id"),     NotNull] public int ParentColumnID     { get; set; } // int
			/// <summary>
			/// ID of the referenced object, which has the candidate key.
			/// </summary>
			[Column("referenced_object_id"), NotNull] public int ReferencedObjectID { get; set; } // int
			/// <summary>
			/// ID of the referenced column (candidate key column).
			/// </summary>
			[Column("referenced_column_id"), NotNull] public int ReferencedColumnID { get; set; } // int
		}

		/// <summary>
		/// Contains a row per object that is a FOREIGN KEY constraint, with <b>sys.object.type</b> = F.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-foreign-keys-transact-sql?view=sql-server-ver15'>sys.foreign_keys</a>.
		/// </summary>
		[Table(Schema="sys", Name="foreign_keys", IsView=true)]
		public partial class ForeignKeys
		{
			[Column("name"),                           NotNull    ] public string   Name                        { get; set; } = null!; // sysname
			[Column("object_id"),                      NotNull    ] public int      ObjectID                    { get; set; } // int
			[Column("principal_id"),                      Nullable] public int?     PrincipalID                 { get; set; } // int
			[Column("schema_id"),                      NotNull    ] public int      SchemaID                    { get; set; } // int
			[Column("parent_object_id"),               NotNull    ] public int      ParentObjectID              { get; set; } // int
			[Column("type"),                              Nullable] public string?  Type                        { get; set; } // char(2)
			[Column("type_desc"),                         Nullable] public string?  TypeDesc                    { get; set; } // nvarchar(60)
			[Column("create_date"),                    NotNull    ] public DateTime CreateDate                  { get; set; } // datetime
			[Column("modify_date"),                    NotNull    ] public DateTime ModifyDate                  { get; set; } // datetime
			[Column("is_ms_shipped"),                  NotNull    ] public bool     IsMsShipped                 { get; set; } // bit
			[Column("is_published"),                   NotNull    ] public bool     IsPublished                 { get; set; } // bit
			[Column("is_schema_published"),            NotNull    ] public bool     IsSchemaPublished           { get; set; } // bit
			/// <summary>
			/// ID of the referenced object.
			/// </summary>
			[Column("referenced_object_id"),              Nullable] public int?     ReferencedObjectID          { get; set; } // int
			/// <summary>
			/// ID of the key index within the referenced object.
			/// </summary>
			[Column("key_index_id"),                      Nullable] public int?     KeyIndexID                  { get; set; } // int
			/// <summary>
			/// FOREIGN KEY constraint is disabled.
			/// </summary>
			[Column("is_disabled"),                    NotNull    ] public bool     IsDisabled                  { get; set; } // bit
			/// <summary>
			/// FOREIGN KEY constraint was created by using the NOT FOR REPLICATION option.
			/// </summary>
			[Column("is_not_for_replication"),         NotNull    ] public bool     IsNotForReplication         { get; set; } // bit
			/// <summary>
			/// FOREIGN KEY constraint has not been verified by the system.
			/// </summary>
			[Column("is_not_trusted"),                 NotNull    ] public bool     IsNotTrusted                { get; set; } // bit
			/// <summary>
			/// The referential action that was declared for this FOREIGN KEY when a delete happens.<br/> 0 = No action<br/> 1 = Cascade<br/> 2 = Set null<br/> 3 = Set default
			/// </summary>
			[Column("delete_referential_action"),         Nullable] public byte?    DeleteReferentialAction     { get; set; } // tinyint
			/// <summary>
			/// Description of the referential action that was declared for this FOREIGN KEY when a delete occurs:<br/> NO_ACTION<br/> CASCADE<br/> SET_NULL<br/> SET_DEFAULT
			/// </summary>
			[Column("delete_referential_action_desc"),    Nullable] public string?  DeleteReferentialActionDesc { get; set; } // nvarchar(60)
			/// <summary>
			/// The referential action that was declared for this FOREIGN KEY when an update happens.<br/> 0 = No action<br/> 1 = Cascade<br/> 2 = Set null<br/> 3 = Set default
			/// </summary>
			[Column("update_referential_action"),         Nullable] public byte?    UpdateReferentialAction     { get; set; } // tinyint
			/// <summary>
			/// Description of the referential action that was declared for this FOREIGN KEY when an update happens:<br/> NO_ACTION<br/> CASCADE<br/> SET_NULL<br/> SET_DEFAULT
			/// </summary>
			[Column("update_referential_action_desc"),    Nullable] public string?  UpdateReferentialActionDesc { get; set; } // nvarchar(60)
			/// <summary>
			/// 1 = Name was generated by the system.<br/> 0 = Name was supplied by the user.
			/// </summary>
			[Column("is_system_named"),                NotNull    ] public bool     IsSystemNamed               { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.OneToOne, KeyName="objects", BackReferenceName="ForeignKey")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="fulltext_catalogs", IsView=true)]
		public partial class FulltextCatalogs
		{
			[Column("fulltext_catalog_id"),      NotNull    ] public int     FulltextCatalogID     { get; set; } // int
			[Column("name"),                     NotNull    ] public string  Name                  { get; set; } = null!; // sysname
			[Column("path"),                        Nullable] public string? Path                  { get; set; } // nvarchar(260)
			[Column("is_default"),               NotNull    ] public bool    IsDefault             { get; set; } // bit
			[Column("is_accent_sensitivity_on"), NotNull    ] public bool    IsAccentSensitivityOn { get; set; } // bit
			[Column("data_space_id"),               Nullable] public int?    DataSpaceID           { get; set; } // int
			[Column("file_id"),                     Nullable] public int?    FileID                { get; set; } // int
			[Column("principal_id"),                Nullable] public int?    PrincipalID           { get; set; } // int
			[Column("is_importing"),             NotNull    ] public bool    IsImporting           { get; set; } // bit
		}

		[Table(Schema="sys", Name="fulltext_document_types", IsView=true)]
		public partial class FulltextDocumentTypes
		{
			[Column("document_type"), NotNull    ] public string  DocumentType { get; set; } = null!; // nvarchar(128)
			[Column("class_id"),      NotNull    ] public Guid    ClassID      { get; set; } // uniqueidentifier
			[Column("path"),             Nullable] public string? Path         { get; set; } // nvarchar(260)
			[Column("version"),       NotNull    ] public string  Version      { get; set; } = null!; // nvarchar(128)
			[Column("manufacturer"),     Nullable] public string? Manufacturer { get; set; } // nvarchar(128)
		}

		[Table(Schema="sys", Name="fulltext_index_catalog_usages", IsView=true)]
		public partial class FulltextIndexCatalogUsages
		{
			[Column("object_id"),           NotNull    ] public int  ObjectID          { get; set; } // int
			[Column("index_id"),               Nullable] public int? IndexID           { get; set; } // int
			[Column("fulltext_catalog_id"), NotNull    ] public int  FulltextCatalogID { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="FulltextIndexCatalogUsages")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="fulltext_index_columns", IsView=true)]
		public partial class FulltextIndexColumns
		{
			[Column("object_id"),             NotNull    ] public int  ObjectID             { get; set; } // int
			[Column("column_id"),             NotNull    ] public int  ColumnID             { get; set; } // int
			[Column("type_column_id"),           Nullable] public int? TypeColumnID         { get; set; } // int
			[Column("language_id"),           NotNull    ] public int  LanguageID           { get; set; } // int
			[Column("statistical_semantics"), NotNull    ] public int  StatisticalSemantics { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="FulltextIndexColumns")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="fulltext_indexes", IsView=true)]
		public partial class FulltextIndexes
		{
			[Column("object_id"),                  NotNull    ] public int       ObjectID                { get; set; } // int
			[Column("unique_index_id"),            NotNull    ] public int       UniqueIndexID           { get; set; } // int
			[Column("fulltext_catalog_id"),           Nullable] public int?      FulltextCatalogID       { get; set; } // int
			[Column("is_enabled"),                 NotNull    ] public bool      IsEnabled               { get; set; } // bit
			[Column("change_tracking_state"),         Nullable] public string?   ChangeTrackingState     { get; set; } // char(1)
			[Column("change_tracking_state_desc"),    Nullable] public string?   ChangeTrackingStateDesc { get; set; } // nvarchar(60)
			[Column("has_crawl_completed"),        NotNull    ] public bool      HasCrawlCompleted       { get; set; } // bit
			[Column("crawl_type"),                 NotNull    ] public string    CrawlType               { get; set; } = null!; // char(1)
			[Column("crawl_type_desc"),               Nullable] public string?   CrawlTypeDesc           { get; set; } // nvarchar(60)
			[Column("crawl_start_date"),              Nullable] public DateTime? CrawlStartDate          { get; set; } // datetime
			[Column("crawl_end_date"),                Nullable] public DateTime? CrawlEndDate            { get; set; } // datetime
			[Column("incremental_timestamp"),         Nullable] public byte[]?   IncrementalTimestamp    { get; set; } // binary(8)
			[Column("stoplist_id"),                   Nullable] public int?      StoplistID              { get; set; } // int
			[Column("property_list_id"),              Nullable] public int?      PropertyListID          { get; set; } // int
			[Column("data_space_id"),              NotNull    ] public int       DataSpaceID             { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="FulltextIndexes")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="fulltext_index_fragments", IsView=true)]
		public partial class FulltextIndexFragments
		{
			[Column("table_id"),           NotNull] public int    TableID          { get; set; } // int
			[Column("fragment_id"),        NotNull] public int    FragmentID       { get; set; } // int
			[Column("fragment_object_id"), NotNull] public int    FragmentObjectID { get; set; } // int
			[Column("timestamp"),          NotNull] public byte[] Timestamp        { get; set; } = null!; // binary(8)
			[Column("status"),             NotNull] public int    Status           { get; set; } // int
			[Column("data_size"),          NotNull] public long   DataSize         { get; set; } // bigint
			[Column("row_count"),          NotNull] public long   RowCount         { get; set; } // bigint
		}

		[Table(Schema="sys", Name="fulltext_languages", IsView=true)]
		public partial class FulltextLanguages
		{
			[Column("lcid"), NotNull] public int    Lcid { get; set; } // int
			[Column("name"), NotNull] public string Name { get; set; } = null!; // nvarchar(128)
		}

		[Table(Schema="sys", Name="fulltext_semantic_languages", IsView=true)]
		public partial class FulltextSemanticLanguages
		{
			[Column("lcid"), NotNull] public int    Lcid { get; set; } // int
			[Column("name"), NotNull] public string Name { get; set; } = null!; // nvarchar(128)
		}

		[Table(Schema="sys", Name="fulltext_semantic_language_statistics_database", IsView=true)]
		public partial class FulltextSemanticLanguageStatisticsDatabase
		{
			[Column("database_id"),   NotNull] public int      DatabaseID   { get; set; } // int
			[Column("register_date"), NotNull] public DateTime RegisterDate { get; set; } // datetime
			[Column("registered_by"), NotNull] public int      RegisteredBy { get; set; } // int
			[Column("version"),       NotNull] public string   Version      { get; set; } = null!; // nvarchar(128)
		}

		[Table(Schema="sys", Name="fulltext_stoplists", IsView=true)]
		public partial class FulltextStoplists
		{
			[Column("stoplist_id"),  NotNull    ] public int      StoplistID  { get; set; } // int
			[Column("name"),         NotNull    ] public string   Name        { get; set; } = null!; // sysname
			[Column("create_date"),  NotNull    ] public DateTime CreateDate  { get; set; } // datetime
			[Column("modify_date"),  NotNull    ] public DateTime ModifyDate  { get; set; } // datetime
			[Column("principal_id"),    Nullable] public int?     PrincipalID { get; set; } // int
		}

		[Table(Schema="sys", Name="fulltext_stopwords", IsView=true)]
		public partial class FulltextStopwords
		{
			[Column("stoplist_id"), NotNull] public int    StoplistID { get; set; } // int
			[Column("stopword"),    NotNull] public string Stopword   { get; set; } = null!; // nvarchar(64)
			[Column("language"),    NotNull] public string Language   { get; set; } = null!; // nvarchar(128)
			[Column("language_id"), NotNull] public int    LanguageID { get; set; } // int
		}

		[Table(Schema="sys", Name="fulltext_system_stopwords", IsView=true)]
		public partial class FulltextSystemStopwords
		{
			[Column("stopword"),       Nullable] public string? Stopword   { get; set; } // nvarchar(64)
			[Column("language_id"), NotNull    ] public int     LanguageID { get; set; } // int
		}

		/// <summary>
		/// Returns one row per column that is a part of an <b>ORDER</b> expression of a common language runtime (CLR) table-valued function.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-function-order-columns-transact-sql?view=sql-server-ver15'>sys.function_order_columns</a>.
		/// </summary>
		[Table(Schema="sys", Name="function_order_columns", IsView=true)]
		public partial class FunctionOrderColumns
		{
			/// <summary>
			/// ID of the object (CLR table-valued function) the order is defined on.
			/// </summary>
			[Column("object_id"),       NotNull    ] public int   ObjectID      { get; set; } // int
			/// <summary>
			/// ID of the order column. <b>order_column_id</b> is unique only within <b>object_id</b>.<br/> <b>order_column_id</b> represents the position of this column in the ordering.
			/// </summary>
			[Column("order_column_id"), NotNull    ] public int   OrderColumnID { get; set; } // int
			/// <summary>
			/// ID of the column in <b>object_id</b>.<br/> <b>column_id</b> is unique only within <b>object_id</b>.
			/// </summary>
			[Column("column_id"),       NotNull    ] public int   ColumnID      { get; set; } // int
			/// <summary>
			/// 1 = order column has a descending sort direction.<br/> 0 = order column has an ascending sort direction.
			/// </summary>
			[Column("is_descending"),      Nullable] public bool? IsDescending  { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="FunctionOrderColumns")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Shows the current hash indexes and the hash index properties. Hash indexes are supported only on <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../in-memory-oltp/overview-and-usage-scenarios?view=sql-server-ver15'>In-Memory OLTP (In-Memory Optimization)</a>.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-hash-indexes-transact-sql?view=sql-server-ver15'>sys.hash_indexes</a>.
		/// </summary>
		[Table(Schema="sys", Name="hash_indexes", IsView=true)]
		public partial class HashIndexes
		{
			[Column("object_id"),                  NotNull    ] public int     ObjectID                { get; set; } // int
			[Column("name"),                          Nullable] public string? Name                    { get; set; } // sysname
			[Column("index_id"),                   NotNull    ] public int     IndexID                 { get; set; } // int
			[Column("type"),                       NotNull    ] public byte    Type                    { get; set; } // tinyint
			[Column("type_desc"),                     Nullable] public string? TypeDesc                { get; set; } // nvarchar(60)
			[Column("is_unique"),                     Nullable] public bool?   IsUnique                { get; set; } // bit
			[Column("data_space_id"),              NotNull    ] public int     DataSpaceID             { get; set; } // int
			[Column("ignore_dup_key"),                Nullable] public bool?   IgnoreDupKey            { get; set; } // bit
			[Column("is_primary_key"),                Nullable] public bool?   IsPrimaryKey            { get; set; } // bit
			[Column("is_unique_constraint"),          Nullable] public bool?   IsUniqueConstraint      { get; set; } // bit
			[Column("fill_factor"),                NotNull    ] public byte    FillFactor              { get; set; } // tinyint
			[Column("is_padded"),                     Nullable] public bool?   IsPadded                { get; set; } // bit
			[Column("is_disabled"),                   Nullable] public bool?   IsDisabled              { get; set; } // bit
			[Column("is_hypothetical"),               Nullable] public bool?   IsHypothetical          { get; set; } // bit
			[Column("is_ignored_in_optimization"),    Nullable] public bool?   IsIgnoredInOptimization { get; set; } // bit
			[Column("allow_row_locks"),               Nullable] public bool?   AllowRowLocks           { get; set; } // bit
			[Column("allow_page_locks"),              Nullable] public bool?   AllowPageLocks          { get; set; } // bit
			[Column("has_filter"),                    Nullable] public bool?   HasFilter               { get; set; } // bit
			[Column("filter_definition"),             Nullable] public string? FilterDefinition        { get; set; } // nvarchar(0)
			/// <summary>
			/// Count of hash buckets for hash indexes.<br/> For more information about the bucket_count value, including guidelines for setting the value, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/create-table-transact-sql?view=sql-server-ver15'>CREATE TABLE (Transact-SQL)</a>.
			/// </summary>
			[Column("bucket_count"),               NotNull    ] public int     BucketCount             { get; set; } // int
			[Column("auto_created"),                  Nullable] public bool?   AutoCreated             { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="HashIndexes")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="http_endpoints", IsView=true)]
		public partial class HttpEndpoints
		{
			[Column("name"),                       NotNull    ] public string  Name                    { get; set; } = null!; // sysname
			[Column("endpoint_id"),                NotNull    ] public int     EndpointID              { get; set; } // int
			[Column("principal_id"),                  Nullable] public int?    PrincipalID             { get; set; } // int
			[Column("protocol"),                   NotNull    ] public byte    Protocol                { get; set; } // tinyint
			[Column("protocol_desc"),                 Nullable] public string? ProtocolDesc            { get; set; } // nvarchar(60)
			[Column("type"),                       NotNull    ] public byte    Type                    { get; set; } // tinyint
			[Column("type_desc"),                     Nullable] public string? TypeDesc                { get; set; } // nvarchar(60)
			[Column("state"),                         Nullable] public byte?   State                   { get; set; } // tinyint
			[Column("state_desc"),                    Nullable] public string? StateDesc               { get; set; } // nvarchar(60)
			[Column("is_admin_endpoint"),          NotNull    ] public bool    IsAdminEndpoint         { get; set; } // bit
			[Column("site"),                          Nullable] public string? Site                    { get; set; } // nvarchar(128)
			[Column("url_path"),                      Nullable] public string? UrlPath                 { get; set; } // nvarchar(4000)
			[Column("is_clear_port_enabled"),      NotNull    ] public bool    IsClearPortEnabled      { get; set; } // bit
			[Column("clear_port"),                 NotNull    ] public int     ClearPort               { get; set; } // int
			[Column("is_ssl_port_enabled"),        NotNull    ] public bool    IsSslPortEnabled        { get; set; } // bit
			[Column("ssl_port"),                   NotNull    ] public int     SslPort                 { get; set; } // int
			[Column("is_anonymous_enabled"),       NotNull    ] public bool    IsAnonymousEnabled      { get; set; } // bit
			[Column("is_basic_auth_enabled"),      NotNull    ] public bool    IsBasicAuthEnabled      { get; set; } // bit
			[Column("is_digest_auth_enabled"),     NotNull    ] public bool    IsDigestAuthEnabled     { get; set; } // bit
			[Column("is_kerberos_auth_enabled"),   NotNull    ] public bool    IsKerberosAuthEnabled   { get; set; } // bit
			[Column("is_ntlm_auth_enabled"),       NotNull    ] public bool    IsNtlmAuthEnabled       { get; set; } // bit
			[Column("is_integrated_auth_enabled"), NotNull    ] public bool    IsIntegratedAuthEnabled { get; set; } // bit
			[Column("authorization_realm"),           Nullable] public string? AuthorizationRealm      { get; set; } // nvarchar(128)
			[Column("default_logon_domain"),          Nullable] public string? DefaultLogonDomain      { get; set; } // nvarchar(128)
			[Column("is_compression_enabled"),     NotNull    ] public bool    IsCompressionEnabled    { get; set; } // bit
		}

		/// <summary>
		/// Contains a row for each column that is an identity column.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-identity-columns-transact-sql?view=sql-server-ver15'>sys.identity_columns</a>.
		/// </summary>
		[Table(Schema="sys", Name="identity_columns", IsView=true)]
		public partial class IdentityColumns
		{
			[Column("object_id"),                           NotNull    ] public int     ObjectID                        { get; set; } // int
			[Column("name"),                                   Nullable] public string? Name                            { get; set; } // sysname
			[Column("column_id"),                           NotNull    ] public int     ColumnID                        { get; set; } // int
			[Column("system_type_id"),                      NotNull    ] public byte    SystemTypeID                    { get; set; } // tinyint
			[Column("user_type_id"),                        NotNull    ] public int     UserTypeID                      { get; set; } // int
			[Column("max_length"),                          NotNull    ] public short   MaxLength                       { get; set; } // smallint
			[Column("precision"),                           NotNull    ] public byte    Precision                       { get; set; } // tinyint
			[Column("scale"),                               NotNull    ] public byte    Scale                           { get; set; } // tinyint
			[Column("collation_name"),                         Nullable] public string? CollationName                   { get; set; } // sysname
			[Column("is_nullable"),                            Nullable] public bool?   IsNullable                      { get; set; } // bit
			[Column("is_ansi_padded"),                      NotNull    ] public bool    IsAnsiPadded                    { get; set; } // bit
			[Column("is_rowguidcol"),                       NotNull    ] public bool    IsRowguidcol                    { get; set; } // bit
			[Column("is_identity"),                         NotNull    ] public bool    IsIdentity                      { get; set; } // bit
			[Column("is_filestream"),                       NotNull    ] public bool    IsFilestream                    { get; set; } // bit
			[Column("is_replicated"),                          Nullable] public bool?   IsReplicated                    { get; set; } // bit
			[Column("is_non_sql_subscribed"),                  Nullable] public bool?   IsNonSqlSubscribed              { get; set; } // bit
			[Column("is_merge_published"),                     Nullable] public bool?   IsMergePublished                { get; set; } // bit
			[Column("is_dts_replicated"),                      Nullable] public bool?   IsDtsReplicated                 { get; set; } // bit
			[Column("is_xml_document"),                     NotNull    ] public bool    IsXmlDocument                   { get; set; } // bit
			[Column("xml_collection_id"),                   NotNull    ] public int     XmlCollectionID                 { get; set; } // int
			[Column("default_object_id"),                   NotNull    ] public int     DefaultObjectID                 { get; set; } // int
			[Column("rule_object_id"),                      NotNull    ] public int     RuleObjectID                    { get; set; } // int
			/// <summary>
			/// Seed value for this identity column. The data type of the seed value is the same as the data type of the column itself.
			/// </summary>
			[Column("seed_value"),                             Nullable] public object? SeedValue                       { get; set; } // sql_variant
			/// <summary>
			/// Increment value for this identity column. The data type of the seed value is the same as the data type of the column itself.
			/// </summary>
			[Column("increment_value"),                        Nullable] public object? IncrementValue                  { get; set; } // sql_variant
			/// <summary>
			/// Last value generated for this identity column. The data type of the seed value is the same as the data type of the column itself.
			/// </summary>
			[Column("last_value"),                             Nullable] public object? LastValue                       { get; set; } // sql_variant
			/// <summary>
			/// Identity column is declared NOT FOR REPLICATION. <b>Note:</b> This column does not apply to Azure Synapse Analytics.
			/// </summary>
			[Column("is_not_for_replication"),                 Nullable] public bool?   IsNotForReplication             { get; set; } // bit
			[Column("is_computed"),                         NotNull    ] public bool    IsComputed                      { get; set; } // bit
			[Column("is_sparse"),                           NotNull    ] public bool    IsSparse                        { get; set; } // bit
			[Column("is_column_set"),                       NotNull    ] public bool    IsColumnSet                     { get; set; } // bit
			[Column("generated_always_type"),                  Nullable] public byte?   GeneratedAlwaysType             { get; set; } // tinyint
			[Column("generated_always_type_desc"),             Nullable] public string? GeneratedAlwaysTypeDesc         { get; set; } // nvarchar(60)
			[Column("encryption_type"),                        Nullable] public int?    EncryptionType                  { get; set; } // int
			[Column("encryption_type_desc"),                   Nullable] public string? EncryptionTypeDesc              { get; set; } // nvarchar(64)
			[Column("encryption_algorithm_name"),              Nullable] public string? EncryptionAlgorithmName         { get; set; } // nvarchar(128)
			[Column("column_encryption_key_id"),               Nullable] public int?    ColumnEncryptionKeyID           { get; set; } // int
			[Column("column_encryption_key_database_name"),    Nullable] public string? ColumnEncryptionKeyDatabaseName { get; set; } // sysname
			[Column("is_hidden"),                           NotNull    ] public bool    IsHidden                        { get; set; } // bit
			[Column("is_masked"),                           NotNull    ] public bool    IsMasked                        { get; set; } // bit
			[Column("graph_type"),                             Nullable] public int?    GraphType                       { get; set; } // int
			[Column("graph_type_desc"),                        Nullable] public string? GraphTypeDesc                   { get; set; } // nvarchar(60)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="IdentityColumns")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains one row per column that is part of a <b>sys.indexes</b> index or unordered table (heap).<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-index-columns-transact-sql?view=sql-server-ver15'>sys.index_columns</a>.
		/// </summary>
		[Table(Schema="sys", Name="index_columns", IsView=true)]
		public partial class IndexColumns
		{
			/// <summary>
			/// ID of the object the index is defined on.
			/// </summary>
			[Column("object_id"),                  NotNull    ] public int   ObjectID                { get; set; } // int
			/// <summary>
			/// ID of the index in which the column is defined.
			/// </summary>
			[Column("index_id"),                   NotNull    ] public int   IndexID                 { get; set; } // int
			/// <summary>
			/// ID of the index column. <b>index_column_id</b> is unique only within <b>index_id</b>.
			/// </summary>
			[Column("index_column_id"),            NotNull    ] public int   IndexColumnID           { get; set; } // int
			/// <summary>
			/// ID of the column in <b>object_id</b>.<br/> 0 = Row Identifier (RID) in a nonclustered index.<br/> <b>column_id</b> is unique only within <b>object_id</b>.
			/// </summary>
			[Column("column_id"),                  NotNull    ] public int   ColumnID                { get; set; } // int
			/// <summary>
			/// Ordinal (1-based) within set of key-columns.<br/> 0 = Not a key column, or is an XML index, a columnstore index, or a spatial index.<br/> Note: An XML or spatial index cannot be a key because the underlying columns are not comparable, meaning that their values cannot be ordered.
			/// </summary>
			[Column("key_ordinal"),                NotNull    ] public byte  KeyOrdinal              { get; set; } // tinyint
			/// <summary>
			/// Ordinal (1-based) within set of partitioning columns. A clustered columnstore index can have at most 1 partitioning column.<br/> 0 = Not a partitioning column.
			/// </summary>
			[Column("partition_ordinal"),          NotNull    ] public byte  PartitionOrdinal        { get; set; } // tinyint
			/// <summary>
			/// 1 = Index key column has a descending sort direction.<br/> 0 = Index key column has an ascending sort direction, or the column is part of a columnstore or hash index.
			/// </summary>
			[Column("is_descending_key"),             Nullable] public bool? IsDescendingKey         { get; set; } // bit
			/// <summary>
			/// 1 = Column is a nonkey column added to the index by using the CREATE INDEX INCLUDE clause, or the column is part of a columnstore index.<br/> 0 = Column is not an included column.<br/> Columns implicitly added because they are part of the clustering key are not listed in <b>sys.index_columns</b>.<br/> Columns implicitly added because they are a partitioning column are returned as 0.
			/// </summary>
			[Column("is_included_column"),            Nullable] public bool? IsIncludedColumn        { get; set; } // bit
			/// <summary>
			/// Ordinal (1-based) within set of order columns in an ordered clustered columnstore index.
			/// </summary>
			[Column("column_store_order_ordinal"), NotNull    ] public byte  ColumnStoreOrderOrdinal { get; set; } // tinyint

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="IndexColumns")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains a row per index or heap of a tabular object, such as a table, view, or table-valued function.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-indexes-transact-sql?view=sql-server-ver15'>sys.indexes</a>.
		/// </summary>
		[Table(Schema="sys", Name="indexes", IsView=true)]
		public partial class Indexes
		{
			/// <summary>
			/// ID of the object to which this index belongs.
			/// </summary>
			[Column("object_id"),                   NotNull    ] public int     ObjectID                 { get; set; } // int
			/// <summary>
			/// Name of the index. <b>name</b> is unique only within the object.<br/> NULL = Heap
			/// </summary>
			[Column("name"),                           Nullable] public string? Name                     { get; set; } // sysname
			/// <summary>
			/// ID of the index. <b>index_id</b> is unique only within the object.<br/> 0 = Heap<br/> 1 = Clustered index<br/> &gt; 1 = Nonclustered index
			/// </summary>
			[Column("index_id"),                    NotNull    ] public int     IndexID                  { get; set; } // int
			/// <summary>
			/// Type of index:<br/> 0 = Heap<br/> 1 = Clustered rowstore (b-tree)<br/> 2 = Nonclustered rowstore (b-tree)<br/> 3 = XML<br/> 4 = Spatial<br/> 5 = Clustered columnstore index. <b>Applies to</b>: SQL Server 2014 (12.x) and later.<br/> 6 = Nonclustered columnstore index. <b>Applies to</b>: SQL Server 2012 (11.x) and later.<br/> 7 = Nonclustered hash index. <b>Applies to</b>: SQL Server 2014 (12.x) and later.
			/// </summary>
			[Column("type"),                        NotNull    ] public byte    Type                     { get; set; } // tinyint
			/// <summary>
			/// Description of index type:<br/> HEAP<br/> CLUSTERED<br/> NONCLUSTERED<br/> XML<br/> SPATIAL<br/> CLUSTERED COLUMNSTORE - <b>Applies to</b>: SQL Server 2014 (12.x) and later.<br/> NONCLUSTERED COLUMNSTORE - <b>Applies to</b>: SQL Server 2012 (11.x) and later.<br/> NONCLUSTERED HASH : NONCLUSTERED HASH indexes are supported only on memory-optimized tables. The sys.hash_indexes view shows the current hash indexes and the hash properties. For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-hash-indexes-transact-sql?view=sql-server-ver15'>sys.hash_indexes (Transact-SQL)</a>. <b>Applies to</b>: SQL Server 2014 (12.x) and later.
			/// </summary>
			[Column("type_desc"),                      Nullable] public string? TypeDesc                 { get; set; } // nvarchar(60)
			/// <summary>
			/// 1 = Index is unique.<br/> 0 = Index is not unique.<br/> Always 0 for clustered columnstore indexes.
			/// </summary>
			[Column("is_unique"),                      Nullable] public bool?   IsUnique                 { get; set; } // bit
			/// <summary>
			/// ID of the data space for this index. Data space is either a filegroup or partition scheme.<br/> 0 = <b>object_id</b> is a table-valued function or in-memory index.
			/// </summary>
			[Column("data_space_id"),                  Nullable] public int?    DataSpaceID              { get; set; } // int
			/// <summary>
			/// 1 = IGNORE_DUP_KEY is ON.<br/> 0 = IGNORE_DUP_KEY is OFF.
			/// </summary>
			[Column("ignore_dup_key"),                 Nullable] public bool?   IgnoreDupKey             { get; set; } // bit
			/// <summary>
			/// 1 = Index is part of a PRIMARY KEY constraint.<br/> Always 0 for clustered columnstore indexes.
			/// </summary>
			[Column("is_primary_key"),                 Nullable] public bool?   IsPrimaryKey             { get; set; } // bit
			/// <summary>
			/// 1 = Index is part of a UNIQUE constraint.<br/> Always 0 for clustered columnstore indexes.
			/// </summary>
			[Column("is_unique_constraint"),           Nullable] public bool?   IsUniqueConstraint       { get; set; } // bit
			/// <summary>
			/// &gt; 0 = FILLFACTOR percentage used when the index was created or rebuilt.<br/> 0 = Default value<br/> Always 0 for clustered columnstore indexes.
			/// </summary>
			[Column("fill_factor"),                 NotNull    ] public byte    FillFactor               { get; set; } // tinyint
			/// <summary>
			/// 1 = PADINDEX is ON.<br/> 0 = PADINDEX is OFF.<br/> Always 0 for clustered columnstore indexes.
			/// </summary>
			[Column("is_padded"),                      Nullable] public bool?   IsPadded                 { get; set; } // bit
			/// <summary>
			/// 1 = Index is disabled.<br/> 0 = Index is not disabled.
			/// </summary>
			[Column("is_disabled"),                    Nullable] public bool?   IsDisabled               { get; set; } // bit
			/// <summary>
			/// 1 = Index is hypothetical and cannot be used directly as a data access path. Hypothetical indexes hold column-level statistics.<br/> 0 = Index is not hypothetical.
			/// </summary>
			[Column("is_hypothetical"),                Nullable] public bool?   IsHypothetical           { get; set; } // bit
			[Column("is_ignored_in_optimization"),     Nullable] public bool?   IsIgnoredInOptimization  { get; set; } // bit
			/// <summary>
			/// 1 = Index allows row locks.<br/> 0 = Index does not allow row locks.<br/> Always 0 for clustered columnstore indexes.
			/// </summary>
			[Column("allow_row_locks"),                Nullable] public bool?   AllowRowLocks            { get; set; } // bit
			/// <summary>
			/// 1 = Index allows page locks.<br/> 0 = Index does not allow page locks.<br/> Always 0 for clustered columnstore indexes.
			/// </summary>
			[Column("allow_page_locks"),               Nullable] public bool?   AllowPageLocks           { get; set; } // bit
			/// <summary>
			/// 1 = Index has a filter and only contains rows that satisfy the filter definition.<br/> 0 = Index does not have a filter.
			/// </summary>
			[Column("has_filter"),                     Nullable] public bool?   HasFilter                { get; set; } // bit
			/// <summary>
			/// Expression for the subset of rows included in the filtered index.<br/> NULL for heap, non-filtered index, or insufficient permissions on the table.
			/// </summary>
			[Column("filter_definition"),              Nullable] public string? FilterDefinition         { get; set; } // nvarchar(max)
			/// <summary>
			/// &gt; 0 = Columnstore index compression delay specified in minutes.<br/> NULL = Columnstore index rowgroup compression delay is managed automatically.
			/// </summary>
			[Column("compression_delay"),              Nullable] public int?    CompressionDelay         { get; set; } // int
			/// <summary>
			/// 1 = Index is configured to suppress duplicate key messages during an index rebuild operation.<br/> <b>0</b> = Index is not configured to suppress duplicate key messages during an index rebuild operation.<br/><br/><b>Applies to:</b> SQL Server (Starting with SQL Server 2017 (14.x)), Azure SQL Database, and Azure SQL Managed Instance
			/// </summary>
			[Column("suppress_dup_key_messages"),      Nullable] public bool?   SuppressDupKeyMessages   { get; set; } // bit
			/// <summary>
			/// 1 = Index was created by the automatic tuning.<br/><br/>0 = Index was created by the user.<br/><br/><b>Applies to:</b> Azure SQL Database
			/// </summary>
			[Column("auto_created"),                   Nullable] public bool?   AutoCreated              { get; set; } // bit
			/// <summary>
			/// 1 = Index has last-page insert optimization enabled.<br/><br/>0 = Default value. Index has last-page insert optimization disabled.<br/><br/><b>Applies to:</b> SQL Server (Starting with SQL Server 2019 (15.x)), Azure SQL Database, and Azure SQL Managed Instance
			/// </summary>
			[Column("optimize_for_sequential_key"),    Nullable] public bool?   OptimizeForSequentialKey { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="Indexes")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// <b>sys.index_resumable_operations</b> is a system view that monitors and checks the current execution status for resumable Index rebuild or creation.<br/>
		/// <b>Applies to</b>: SQL Server (2017 and newer), and Azure SQL Database<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-index-resumable-operations?view=sql-server-ver15'>sys.index_resumable_operations</a>.
		/// </summary>
		[Table(Schema="sys", Name="index_resumable_operations", IsView=true)]
		public partial class IndexResumableOperations
		{
			/// <summary>
			/// ID of the object to which this index belongs (not nullable).
			/// </summary>
			[Column("object_id"),            NotNull    ] public int       ObjectID           { get; set; } // int
			/// <summary>
			/// ID of the index (not nullable). <b>index_id</b> is unique only within the object.
			/// </summary>
			[Column("index_id"),             NotNull    ] public int       IndexID            { get; set; } // int
			/// <summary>
			/// Name of the index. <b>name</b> is unique only within the object.
			/// </summary>
			[Column("name"),                 NotNull    ] public string    Name               { get; set; } = null!; // sysname
			/// <summary>
			/// DDL T-SQL statement text
			/// </summary>
			[Column("sql_text"),                Nullable] public string?   SqlText            { get; set; } // nvarchar(max)
			[Column("last_max_dop_used"),    NotNull    ] public short     LastMaxDopUsed     { get; set; } // smallint
			/// <summary>
			/// Partition number within the owning index or heap. For non-partitioned tables and indexes or in case all partitions are being rebuild the value of this column is NULL.
			/// </summary>
			[Column("partition_number"),        Nullable] public int?      PartitionNumber    { get; set; } // int
			/// <summary>
			/// Operational state for resumable index:<br/><br/>0=Running<br/><br/>1=Pause
			/// </summary>
			[Column("state"),                NotNull    ] public byte      State              { get; set; } // tinyint
			/// <summary>
			/// Description of the operational state for resumable index (running or Paused)
			/// </summary>
			[Column("state_desc"),              Nullable] public string?   StateDesc          { get; set; } // nvarchar(60)
			/// <summary>
			/// Index operation start time (not nullable)
			/// </summary>
			[Column("start_time"),           NotNull    ] public DateTime  StartTime          { get; set; } // datetime
			/// <summary>
			/// Index operation last pause time (nullable). NULL if operation is running and never paused.
			/// </summary>
			[Column("last_pause_time"),         Nullable] public DateTime? LastPauseTime      { get; set; } // datatime
			/// <summary>
			/// Total execution time from start time in minutes (not nullable)
			/// </summary>
			[Column("total_execution_time"), NotNull    ] public int       TotalExecutionTime { get; set; } // int
			/// <summary>
			/// Index operation progress completion in % ( not nullable).
			/// </summary>
			[Column("percent_complete"),     NotNull    ] public double    PercentComplete    { get; set; } // real
			/// <summary>
			/// Total number of index pages allocated by the index build operation for the new and mapping indexes ( not nullable ).
			/// </summary>
			[Column("page_count"),           NotNull    ] public long      PageCount          { get; set; } // bigint

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="IndexResumableOperations")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Returns one row for each rowset that tracks internal data for columnstore indexes on disk-based tables. These rowsets are internal to columnstore indexes and track deleted rows, rowgroup mappings, and delta store rowgroups. They track data for each for each table partition; every table has at least one partition. SQL Server re-creates the rowsets each time it rebuilds the columnstore index.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-internal-partitions-transact-sql?view=sql-server-ver15'>sys.internal_partitions</a>.
		/// </summary>
		[Table(Schema="sys", Name="internal_partitions", IsView=true)]
		public partial class InternalPartitions
		{
			/// <summary>
			/// Partition ID for this partition. This is unique within a database.
			/// </summary>
			[Column("partition_id"),              NotNull    ] public long    PartitionID            { get; set; } // bigint
			/// <summary>
			/// Object ID for the table that contains the partition.
			/// </summary>
			[Column("object_id"),                 NotNull    ] public int     ObjectID               { get; set; } // int
			/// <summary>
			/// Index ID for the columnstore index defined on the table.<br/> 1 = clustered columnstore index<br/> 2 = nonclustered columnstore index
			/// </summary>
			[Column("index_id"),                  NotNull    ] public int     IndexID                { get; set; } // int
			/// <summary>
			/// The partition number.<br/> 1 = first partition of a partitioned table, or the single partition of a nonpartitioned table.<br/> 2 = second partition, and so on.
			/// </summary>
			[Column("partition_number"),          NotNull    ] public int     PartitionNumber        { get; set; } // int
			/// <summary>
			/// ID of the internal rowset object (HoBT). This is a good key for joining with other DMVs to get more information about the physical characteristics of the internal rowset.
			/// </summary>
			[Column("hobt_id"),                   NotNull    ] public long    HobtID                 { get; set; } // bigint
			/// <summary>
			/// Rowset objects that track internal data for the columnstore index.<br/> 2 = COLUMN_STORE_DELETE_BITMAP<br/> 3 = COLUMN_STORE_DELTA_STORE<br/> 4 = COLUMN_STORE_DELETE_BUFFER<br/> 5 = COLUMN_STORE_MAPPING_INDEX
			/// </summary>
			[Column("internal_object_type"),         Nullable] public byte?   InternalObjectType     { get; set; } // tinyint
			/// <summary>
			/// COLUMN_STORE_DELETE_BITMAP - This bitmap index tracks rows that are marked as deleted from the columnstore. The bitmap is for every rowgroup since partitions can have rows in multiple rowgroups. The rows are that are still physically present and taking up space in the columnstore.<br/> COLUMN_STORE_DELTA_STORE - Stores groups of rows, called rowgroups, that have not been compressed into columnar storage. Each table partition can have zero or more deltastore rowgroups.<br/> COLUMN_STORE_DELETE_BUFFER - For maintaining deletes to updateable nonclustered columnstore indexes. When a query deletes a row from the underlying rowstore table, the delete buffer tracks the deletion from the columnstore. When the number of deleted rows exceed 1048576, they are merged back into the delete bitmap by background Tuple Mover thread or by an explicit Reorganize command.  At any given point in time, the union of the delete bitmap and the delete buffer represents all deleted rows.<br/> COLUMN_STORE_MAPPING_INDEX - Used only when the clustered columnstore index has a secondary nonclustered index. This maps nonclustered index keys to the correct rowgroup and row ID in the columnstore. It only stores keys for rows that move to a different rowgroup; this occurs when a delta rowgroup is compressed into the columnstore, and when a merge operation merges rows from two different rowgroups.
			/// </summary>
			[Column("internal_object_type_desc"),    Nullable] public string? InternalObjectTypeDesc { get; set; } // nvarchar(60)
			[Column("row_group_id"),                 Nullable] public int?    RowGroupID             { get; set; } // int
			/// <summary>
			/// Approximate number of rows in this partition.
			/// </summary>
			[Column("rows"),                         Nullable] public long?   Rows                   { get; set; } // bigint
			/// <summary>
			/// The state of compression for the rowset:<br/> 0 = NONE<br/> 1 = ROW<br/> 2 = PAGE
			/// </summary>
			[Column("data_compression"),             Nullable] public byte?   DataCompression        { get; set; } // tinyint
			/// <summary>
			/// The state of compression for each partition. Possible values for rowstore tables are NONE, ROW, and PAGE. Possible values for columnstore tables are COLUMNSTORE and COLUMNSTORE_ARCHIVE.
			/// </summary>
			[Column("data_compression_desc"),        Nullable] public string? DataCompressionDesc    { get; set; } // nvarchar(60)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="InternalPartitions")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Returns one row for each object that is an internal table. Internal tables are automatically generated by SQL Server to support various features. For example, when you create a primary XML index, SQL Server automatically creates an internal table to persist the shredded XML document data. Internal tables appear in the <b>sys</b> schema of every database and have unique, system-generated names that indicate their function, for example, <b>xml_index_nodes_2021582240_32001</b> or <b>queue_messages_1977058079</b><br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-internal-tables-transact-sql?view=sql-server-ver15'>sys.internal_tables</a>.
		/// </summary>
		[Table(Schema="sys", Name="internal_tables", IsView=true)]
		public partial class InternalTables
		{
			[Column("name"),                     NotNull    ] public string   Name                  { get; set; } = null!; // sysname
			[Column("object_id"),                NotNull    ] public int      ObjectID              { get; set; } // int
			[Column("principal_id"),                Nullable] public int?     PrincipalID           { get; set; } // int
			[Column("schema_id"),                NotNull    ] public int      SchemaID              { get; set; } // int
			[Column("parent_object_id"),         NotNull    ] public int      ParentObjectID        { get; set; } // int
			[Column("type"),                     NotNull    ] public string   Type                  { get; set; } = null!; // char(2)
			[Column("type_desc"),                   Nullable] public string?  TypeDesc              { get; set; } // nvarchar(60)
			[Column("create_date"),              NotNull    ] public DateTime CreateDate            { get; set; } // datetime
			[Column("modify_date"),              NotNull    ] public DateTime ModifyDate            { get; set; } // datetime
			[Column("is_ms_shipped"),               Nullable] public bool?    IsMsShipped           { get; set; } // bit
			[Column("is_published"),                Nullable] public bool?    IsPublished           { get; set; } // bit
			[Column("is_schema_published"),         Nullable] public bool?    IsSchemaPublished     { get; set; } // bit
			/// <summary>
			/// Type of the internal table:<br/> 3 = <b>query_disk_store_query_hints</b><br/> 4 = <b>query_disk_store_query_template_parameterization</b><br/> 6 = <b>query_disk_store_wait_stats</b><br/> 201 = <b>queue_messages</b><br/> 202 = <b>xml_index_nodes</b><br/> 203 = <b>fulltext_catalog_freelist</b><br/> 205 = <b>query_notification</b><br/> 206 = <b>service_broker_map</b><br/> 207 = <b>extended_indexes</b> (such as a spatial index)<br/> 208 = <b>filestream_tombstone</b><br/> 209 = <b>change_tracking</b><br/> 210 = <b>tracked_committed_transactions</b><br/> 220 = <b>contained_features</b><br/> 225 = <b>filetable_updates</b><br/> 236 = <b>selective_xml_index_node_table</b><br/> 240 = <b>query_disk_store_query_text</b><br/> 241 = <b>query_disk_store_query</b><br/> 242 = <b>query_disk_store_plan</b><br/> 243 = <b>query_disk_store_runtime_stats</b><br/> 244 = <b>query_disk_store_runtime_stats_interval</b><br/> 245 = <b>query_context_settings</b>
			/// </summary>
			[Column("internal_type"),               Nullable] public byte?    InternalType          { get; set; } // tinyint
			/// <summary>
			/// Description of the type of internal table:<br/> QUERY_DISK_STORE_QUERY_HINTS<br/> QUERY_DISK_STORE_QUERY_TEMPLATE_PARAMETERIZATION<br/> QUERY_DISK_STORE_WAIT_STATS<br/> QUEUE_MESSAGES<br/> XML_INDEX_NODES<br/> FULLTEXT_CATALOG_FREELIST<br/> FULLTEXT_CATALOG_MAP<br/> QUERY_NOTIFICATION<br/> SERVICE_BROKER_MAP<br/> EXTENDED_INDEXES<br/> FILESTREAM_TOMBSTONE<br/> CHANGE_TRACKING<br/> TRACKED_COMMITTED_TRANSACTIONS<br/> CONTAINED_FEATURES<br/> FILETABLE_UPDATES<br/> SELECTIVE_XML_INDEX_NODE_TABLE<br/> QUERY_DISK_STORE_QUERY_TEXT<br/> QUERY_DISK_STORE_QUERY<br/> QUERY_DISK_STORE_PLAN<br/> QUERY_DISK_STORE_RUNTIME_STATS<br/> QUERY_DISK_STORE_RUNTIME_STATS_INTERVAL<br/> QUERY_CONTEXT_SETTINGS
			/// </summary>
			[Column("internal_type_desc"),          Nullable] public string?  InternalTypeDesc      { get; set; } // nvarchar(60)
			/// <summary>
			/// ID of the parent, regardless of whether it is schema-scoped or not. Otherwise, 0 if there is no parent.<br/> <b>queue_messages</b> = <b>object_id</b> of queue<br/> <b>xml_index_nodes</b> = <b>object_id</b> of the xml index<br/> <b>fulltext_catalog_freelist</b> = <b>fulltext_catalog_id</b> of the full-text catalog<br/> <b>fulltext_index_map</b> = <b>object_id</b> of the full-text index<br/> <b>query_notification</b>, or <b>service_broker_map</b> = 0<br/> <b>extended_indexes</b> = <b>object_id</b> of an extended index, such as a spatial index<br/> <b>object_id</b> of the table for which table tracking is enabled = <b>change_tracking</b>
			/// </summary>
			[Column("parent_id"),                   Nullable] public int?     ParentID              { get; set; } // int
			/// <summary>
			/// Minor ID of the parent.<br/> <b>xml_index_nodes</b> = <b>index_id</b> of the XML index<br/> <b>extended_indexes</b> = <b>index_id</b> of an extended index, such as a spatial index<br/> 0 = <b>queue_messages</b>, <b>fulltext_catalog_freelist</b>, <b>fulltext_index_map</b>, <b>query_notification</b>, <b>service_broker_map</b>, or <b>change_tracking</b>
			/// </summary>
			[Column("parent_minor_id"),             Nullable] public int?     ParentMinorID         { get; set; } // int
			/// <summary>
			/// Non-zero value is the ID of data space (filegroup or partition-scheme) that holds the large object (LOB) data for this table.
			/// </summary>
			[Column("lob_data_space_id"),        NotNull    ] public int      LobDataSpaceID        { get; set; } // int
			/// <summary>
			/// Reserved for future use.
			/// </summary>
			[Column("filestream_data_space_id"),    Nullable] public int?     FilestreamDataSpaceID { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="InternalTables")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains a row for each object that is a primary key or unique constraint. Includes <b>sys.objects.type</b> PK and UQ.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-key-constraints-transact-sql?view=sql-server-ver15'>sys.key_constraints</a>.
		/// </summary>
		[Table(Schema="sys", Name="key_constraints", IsView=true)]
		public partial class KeyConstraints
		{
			[Column("name"),                NotNull    ] public string   Name              { get; set; } = null!; // sysname
			[Column("object_id"),           NotNull    ] public int      ObjectID          { get; set; } // int
			[Column("principal_id"),           Nullable] public int?     PrincipalID       { get; set; } // int
			[Column("schema_id"),           NotNull    ] public int      SchemaID          { get; set; } // int
			[Column("parent_object_id"),    NotNull    ] public int      ParentObjectID    { get; set; } // int
			[Column("type"),                   Nullable] public string?  Type              { get; set; } // char(2)
			[Column("type_desc"),              Nullable] public string?  TypeDesc          { get; set; } // nvarchar(60)
			[Column("create_date"),         NotNull    ] public DateTime CreateDate        { get; set; } // datetime
			[Column("modify_date"),         NotNull    ] public DateTime ModifyDate        { get; set; } // datetime
			[Column("is_ms_shipped"),       NotNull    ] public bool     IsMsShipped       { get; set; } // bit
			[Column("is_published"),        NotNull    ] public bool     IsPublished       { get; set; } // bit
			[Column("is_schema_published"), NotNull    ] public bool     IsSchemaPublished { get; set; } // bit
			/// <summary>
			/// ID of the corresponding unique index in the parent object that was created to enforce this constraint.
			/// </summary>
			[Column("unique_index_id"),        Nullable] public int?     UniqueIndexID     { get; set; } // int
			/// <summary>
			/// 1 = Name was generated by system.<br/> 0 = Name was supplied by the user.
			/// </summary>
			[Column("is_system_named"),     NotNull    ] public bool     IsSystemNamed     { get; set; } // bit
			[Column("is_enforced"),            Nullable] public bool?    IsEnforced        { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.OneToOne, KeyName="objects", BackReferenceName="KeyConstraint")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="key_encryptions", IsView=true)]
		public partial class KeyEncryptions
		{
			[Column("key_id"),          NotNull    ] public int     KeyID         { get; set; } // int
			[Column("thumbprint"),         Nullable] public byte[]? Thumbprint    { get; set; } // varbinary(32)
			[Column("crypt_type"),      NotNull    ] public string  CryptType     { get; set; } = null!; // char(4)
			[Column("crypt_type_desc"),    Nullable] public string? CryptTypeDesc { get; set; } // nvarchar(60)
			[Column("crypt_property"),     Nullable] public byte[]? CryptProperty { get; set; } // varbinary(-1)
		}

		[Table(Schema="sys", Name="linked_logins", IsView=true)]
		public partial class LinkedLogins
		{
			[Column("server_id"),            NotNull    ] public int      ServerID           { get; set; } // int
			[Column("local_principal_id"),      Nullable] public int?     LocalPrincipalID   { get; set; } // int
			[Column("uses_self_credential"), NotNull    ] public bool     UsesSelfCredential { get; set; } // bit
			[Column("remote_name"),             Nullable] public string?  RemoteName         { get; set; } // sysname
			[Column("modify_date"),          NotNull    ] public DateTime ModifyDate         { get; set; } // datetime
		}

		[Table(Schema="sys", Name="login_token", IsView=true)]
		public partial class LoginToken
		{
			[Column("principal_id"), Nullable] public int?    PrincipalID { get; set; } // int
			[Column("sid"),          Nullable] public byte[]? Sid         { get; set; } // varbinary(85)
			[Column("name"),         Nullable] public string? Name        { get; set; } // nvarchar(128)
			[Column("type"),         Nullable] public string? Type        { get; set; } // nvarchar(128)
			[Column("usage"),        Nullable] public string? Usage       { get; set; } // nvarchar(128)
		}

		/// <summary>
		/// Use the <b>sys.masked_columns</b> view to query for table-columns that have a dynamic data masking function applied to them. This view inherits from the <b>sys.columns</b> view. It returns all columns in the <b>sys.columns</b> view, plus the <b>is_masked</b> and <b>masking_function</b> columns, indicating if the column is masked, and if so, what masking function is defined. This view only shows the columns on which there is a masking function applied.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-masked-columns-transact-sql?view=sql-server-ver15'>sys.masked_columns</a>.
		/// </summary>
		[Table(Schema="sys", Name="masked_columns", IsView=true)]
		public partial class MaskedColumns
		{
			/// <summary>
			/// ID of the object to which this column belongs.
			/// </summary>
			[Column("object_id"),                           NotNull    ] public int     ObjectID                        { get; set; } // int
			/// <summary>
			/// Name of the column. Is unique within the object.
			/// </summary>
			[Column("name"),                                   Nullable] public string? Name                            { get; set; } // sysname
			/// <summary>
			/// ID of the column. Is unique within the object.<br/> Column IDs might not be sequential.
			/// </summary>
			[Column("column_id"),                           NotNull    ] public int     ColumnID                        { get; set; } // int
			[Column("system_type_id"),                      NotNull    ] public byte    SystemTypeID                    { get; set; } // tinyint
			[Column("user_type_id"),                        NotNull    ] public int     UserTypeID                      { get; set; } // int
			[Column("max_length"),                          NotNull    ] public short   MaxLength                       { get; set; } // smallint
			[Column("precision"),                           NotNull    ] public byte    Precision                       { get; set; } // tinyint
			[Column("scale"),                               NotNull    ] public byte    Scale                           { get; set; } // tinyint
			[Column("collation_name"),                         Nullable] public string? CollationName                   { get; set; } // sysname
			[Column("is_nullable"),                            Nullable] public bool?   IsNullable                      { get; set; } // bit
			[Column("is_ansi_padded"),                      NotNull    ] public bool    IsAnsiPadded                    { get; set; } // bit
			[Column("is_rowguidcol"),                       NotNull    ] public bool    IsRowguidcol                    { get; set; } // bit
			[Column("is_identity"),                         NotNull    ] public bool    IsIdentity                      { get; set; } // bit
			[Column("is_filestream"),                       NotNull    ] public bool    IsFilestream                    { get; set; } // bit
			[Column("is_replicated"),                          Nullable] public bool?   IsReplicated                    { get; set; } // bit
			[Column("is_non_sql_subscribed"),                  Nullable] public bool?   IsNonSqlSubscribed              { get; set; } // bit
			[Column("is_merge_published"),                     Nullable] public bool?   IsMergePublished                { get; set; } // bit
			[Column("is_dts_replicated"),                      Nullable] public bool?   IsDtsReplicated                 { get; set; } // bit
			[Column("is_xml_document"),                     NotNull    ] public bool    IsXmlDocument                   { get; set; } // bit
			[Column("xml_collection_id"),                   NotNull    ] public int     XmlCollectionID                 { get; set; } // int
			[Column("default_object_id"),                   NotNull    ] public int     DefaultObjectID                 { get; set; } // int
			[Column("rule_object_id"),                      NotNull    ] public int     RuleObjectID                    { get; set; } // int
			[Column("definition"),                             Nullable] public string? Definition                      { get; set; } // nvarchar(0)
			[Column("uses_database_collation"),             NotNull    ] public bool    UsesDatabaseCollation           { get; set; } // bit
			[Column("is_persisted"),                        NotNull    ] public bool    IsPersisted                     { get; set; } // bit
			[Column("is_computed"),                         NotNull    ] public bool    IsComputed                      { get; set; } // bit
			[Column("is_sparse"),                           NotNull    ] public bool    IsSparse                        { get; set; } // bit
			[Column("is_column_set"),                       NotNull    ] public bool    IsColumnSet                     { get; set; } // bit
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database. 7, 8, 9, 10 only applies to SQL Database.<br/> Identifies when the column value is generated (will always be 0 for columns in system tables):<br/> 0 = NOT_APPLICABLE<br/> 1 = AS_ROW_START<br/> 2 = AS_ROW_END<br/>7 = AS_TRANSACTION_ID_START<br/>8 = AS_TRANSACTION_ID_END<br/>9 = AS_SEQUENCE_NUMBER_START<br/>10 = AS_SEQUENCE_NUMBER_END<br/> For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../tables/temporal-tables?view=sql-server-ver15'>Temporal Tables (Relational databases)</a>.
			/// </summary>
			[Column("generated_always_type"),                  Nullable] public byte?   GeneratedAlwaysType             { get; set; } // tinyint
			[Column("generated_always_type_desc"),             Nullable] public string? GeneratedAlwaysTypeDesc         { get; set; } // nvarchar(60)
			[Column("encryption_type"),                        Nullable] public int?    EncryptionType                  { get; set; } // int
			[Column("encryption_type_desc"),                   Nullable] public string? EncryptionTypeDesc              { get; set; } // nvarchar(64)
			[Column("encryption_algorithm_name"),              Nullable] public string? EncryptionAlgorithmName         { get; set; } // nvarchar(128)
			[Column("column_encryption_key_id"),               Nullable] public int?    ColumnEncryptionKeyID           { get; set; } // int
			[Column("column_encryption_key_database_name"),    Nullable] public string? ColumnEncryptionKeyDatabaseName { get; set; } // sysname
			[Column("is_hidden"),                           NotNull    ] public bool    IsHidden                        { get; set; } // bit
			/// <summary>
			/// Indicates if the column is masked. 1 indicates masked.
			/// </summary>
			[Column("is_masked"),                              Nullable] public bool?   IsMasked                        { get; set; } // bit
			/// <summary>
			/// The masking function for the column.
			/// </summary>
			[Column("masking_function"),                       Nullable] public string? MaskingFunction                 { get; set; } // nvarchar(4000)
			[Column("graph_type"),                             Nullable] public int?    GraphType                       { get; set; } // int
			[Column("graph_type_desc"),                        Nullable] public string? GraphTypeDesc                   { get; set; } // nvarchar(60)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="MaskedColumns")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="master_files", IsView=true)]
		public partial class MasterFiles
		{
			[Column("database_id"),              NotNull    ] public int       DatabaseID            { get; set; } // int
			[Column("file_id"),                  NotNull    ] public int       FileID                { get; set; } // int
			[Column("file_guid"),                   Nullable] public Guid?     FileGuid              { get; set; } // uniqueidentifier
			[Column("type"),                     NotNull    ] public byte      Type                  { get; set; } // tinyint
			[Column("type_desc"),                   Nullable] public string?   TypeDesc              { get; set; } // nvarchar(60)
			[Column("data_space_id"),            NotNull    ] public int       DataSpaceID           { get; set; } // int
			[Column("name"),                     NotNull    ] public string    Name                  { get; set; } = null!; // sysname
			[Column("physical_name"),            NotNull    ] public string    PhysicalName          { get; set; } = null!; // nvarchar(260)
			[Column("state"),                       Nullable] public byte?     State                 { get; set; } // tinyint
			[Column("state_desc"),                  Nullable] public string?   StateDesc             { get; set; } // nvarchar(60)
			[Column("size"),                     NotNull    ] public int       Size                  { get; set; } // int
			[Column("max_size"),                 NotNull    ] public int       MaxSize               { get; set; } // int
			[Column("growth"),                   NotNull    ] public int       Growth                { get; set; } // int
			[Column("is_media_read_only"),       NotNull    ] public bool      IsMediaReadOnly       { get; set; } // bit
			[Column("is_read_only"),             NotNull    ] public bool      IsReadOnly            { get; set; } // bit
			[Column("is_sparse"),                NotNull    ] public bool      IsSparse              { get; set; } // bit
			[Column("is_percent_growth"),        NotNull    ] public bool      IsPercentGrowth       { get; set; } // bit
			[Column("is_name_reserved"),         NotNull    ] public bool      IsNameReserved        { get; set; } // bit
			[Column("is_persistent_log_buffer"), NotNull    ] public bool      IsPersistentLogBuffer { get; set; } // bit
			[Column("create_lsn"),                  Nullable] public decimal?  CreateLsn             { get; set; } // numeric(25,0)
			[Column("drop_lsn"),                    Nullable] public decimal?  DropLsn               { get; set; } // numeric(25,0)
			[Column("read_only_lsn"),               Nullable] public decimal?  ReadOnlyLsn           { get; set; } // numeric(25,0)
			[Column("read_write_lsn"),              Nullable] public decimal?  ReadWriteLsn          { get; set; } // numeric(25,0)
			[Column("differential_base_lsn"),       Nullable] public decimal?  DifferentialBaseLsn   { get; set; } // numeric(25,0)
			[Column("differential_base_guid"),      Nullable] public Guid?     DifferentialBaseGuid  { get; set; } // uniqueidentifier
			[Column("differential_base_time"),      Nullable] public DateTime? DifferentialBaseTime  { get; set; } // datetime
			[Column("redo_start_lsn"),              Nullable] public decimal?  RedoStartLsn          { get; set; } // numeric(25,0)
			[Column("redo_start_fork_guid"),        Nullable] public Guid?     RedoStartForkGuid     { get; set; } // uniqueidentifier
			[Column("redo_target_lsn"),             Nullable] public decimal?  RedoTargetLsn         { get; set; } // numeric(25,0)
			[Column("redo_target_fork_guid"),       Nullable] public Guid?     RedoTargetForkGuid    { get; set; } // uniqueidentifier
			[Column("backup_lsn"),                  Nullable] public decimal?  BackupLsn             { get; set; } // numeric(25,0)
			[Column("credential_id"),               Nullable] public int?      CredentialID          { get; set; } // int
		}

		[Table(Schema="sys", Name="master_key_passwords", IsView=true)]
		public partial class MasterKeyPasswords
		{
			[Column("credential_id"), NotNull    ] public int   CredentialID { get; set; } // int
			[Column("family_guid"),      Nullable] public Guid? FamilyGuid   { get; set; } // uniqueidentifier
		}

		/// <summary>
		/// Contains a row for each internal memory-optimized table used for storing user memory-optimized tables. Each user table corresponds to one or more internal tables. A single table is used for the core data storage. Additional internal tables are used to support features such as temporal, columnstore index and off-row (LOB) storage for memory-optimized tables.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-memory-optimized-tables-internal-attributes-transact-sql?view=sql-server-ver15'>sys.memory_optimized_tables_internal_attributes</a>.
		/// </summary>
		[Table(Schema="sys", Name="memory_optimized_tables_internal_attributes", IsView=true)]
		public partial class MemoryOptimizedTablesInternalAttributes
		{
			[Column("object_id"),        Nullable] public int?   ObjectID    { get; set; } // int
			[Column("xtp_object_id"), NotNull    ] public int    XtpObjectID { get; set; } // int
			[Column("type"),             Nullable] public int?   Type        { get; set; } // int
			[Column("type_desc"),     NotNull    ] public string TypeDesc    { get; set; } = null!; // nvarchar(60)
			[Column("minor_id"),      NotNull    ] public int    MinorID     { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="MemoryOptimizedTablesInternalAttributes")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="messages", IsView=true)]
		public partial class Messages
		{
			[Column("message_id"),      NotNull    ] public int    MessageID     { get; set; } // int
			[Column("language_id"),     NotNull    ] public short  LanguageID    { get; set; } // smallint
			[Column("severity"),           Nullable] public byte?  Severity      { get; set; } // tinyint
			[Column("is_event_logged"), NotNull    ] public bool   IsEventLogged { get; set; } // bit
			[Column("text"),            NotNull    ] public string Text          { get; set; } = null!; // nvarchar(2048)
		}

		[Table(Schema="sys", Name="message_type_xml_schema_collection_usages", IsView=true)]
		public partial class MessageTypeXmlSchemaCollectionUsages
		{
			[Column("message_type_id"),   NotNull] public int MessageTypeID   { get; set; } // int
			[Column("xml_collection_id"), NotNull] public int XmlCollectionID { get; set; } // int
		}

		/// <summary>
		/// Returns a row for each module-to-assembly reference.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-module-assembly-usages-transact-sql?view=sql-server-ver15'>sys.module_assembly_usages</a>.
		/// </summary>
		[Table(Schema="sys", Name="module_assembly_usages", IsView=true)]
		public partial class ModuleAssemblyUsages
		{
			/// <summary>
			/// Object identification number of the SQL object. Is unique within a database.
			/// </summary>
			[Column("object_id"),   NotNull] public int ObjectID   { get; set; } // int
			/// <summary>
			/// ID of the assembly from which this module was created.
			/// </summary>
			[Column("assembly_id"), NotNull] public int AssemblyID { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="ModuleAssemblyUsages")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains one row for each parameter of a numbered procedure. When you create a numbered stored procedure, the base procedure is number 1. All subsequent procedures have numbers 2, 3, and so forth. <b>sys.numbered_procedure_parameters</b> contains the parameter definitions for all subsequent procedures, numbered 2 and greater. This view does not show parameters for the base stored procedure (number = 1). The base stored procedure is similar to a nonnumbered stored procedure. Therefore, its parameters are represented in <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-parameters-transact-sql?view=sql-server-ver15'>sys.parameters (Transact-SQL)</a>.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-numbered-procedure-parameters-transact-sql?view=sql-server-ver15'>sys.numbered_procedure_parameters</a>.
		/// </summary>
		[Table(Schema="sys", Name="numbered_procedure_parameters", IsView=true)]
		public partial class NumberedProcedureParameters
		{
			/// <summary>
			/// ID of the object to which this parameter belongs.
			/// </summary>
			[Column("object_id"),        NotNull    ] public int     ObjectID        { get; set; } // int
			/// <summary>
			/// Number of this procedure within the object, 2 or greater.
			/// </summary>
			[Column("procedure_number"), NotNull    ] public short   ProcedureNumber { get; set; } // smallint
			/// <summary>
			/// Name of the parameter. Is unique within <b>procedure_number</b>.
			/// </summary>
			[Column("name"),                Nullable] public string? Name            { get; set; } // sysname
			/// <summary>
			/// ID of the parameter. Is unique within the <b>procedure_number</b>.
			/// </summary>
			[Column("parameter_id"),     NotNull    ] public int     ParameterID     { get; set; } // int
			/// <summary>
			/// ID of the system type of the parameter
			/// </summary>
			[Column("system_type_id"),   NotNull    ] public byte    SystemTypeID    { get; set; } // tinyint
			/// <summary>
			/// ID of the type, as defined by user, of the parameter.
			/// </summary>
			[Column("user_type_id"),     NotNull    ] public int     UserTypeID      { get; set; } // int
			/// <summary>
			/// Maximum length of the parameter in bytes.<br/> -1 = Column data type is varchar(max), nvarchar(max), or varbinary(max).
			/// </summary>
			[Column("max_length"),       NotNull    ] public short   MaxLength       { get; set; } // smallint
			/// <summary>
			/// Precision of the parameter if numeric-based; otherwise, 0.
			/// </summary>
			[Column("precision"),        NotNull    ] public byte    Precision       { get; set; } // tinyint
			/// <summary>
			/// Scale of the parameter if numeric-based; otherwise, 0.
			/// </summary>
			[Column("scale"),            NotNull    ] public byte    Scale           { get; set; } // tinyint
			/// <summary>
			/// 1 = Parameter is output or return; otherwise, 0
			/// </summary>
			[Column("is_output"),        NotNull    ] public bool    IsOutput        { get; set; } // bit
			/// <summary>
			/// 1 = Parameter is a cursor-reference parameter.
			/// </summary>
			[Column("is_cursor_ref"),    NotNull    ] public bool    IsCursorRef     { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="NumberedProcedureParameters")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains a row for each SQL Server stored procedure that was created as a numbered procedure. This does not show a row for the base (number = 1) stored procedure. Entries for the base stored procedures can be found in views such as <b>sys.objects</b> and <b>sys.procedures</b>.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-numbered-procedures-transact-sql?view=sql-server-ver15'>sys.numbered_procedures</a>.
		/// </summary>
		[Table(Schema="sys", Name="numbered_procedures", IsView=true)]
		public partial class NumberedProcedures
		{
			/// <summary>
			/// ID of the object of the stored procedure.
			/// </summary>
			[Column("object_id"),        NotNull    ] public int     ObjectID        { get; set; } // int
			/// <summary>
			/// Number of this procedure within the object, 2 or greater.
			/// </summary>
			[Column("procedure_number"),    Nullable] public short?  ProcedureNumber { get; set; } // smallint
			/// <summary>
			/// The SQL Server text that defines this procedure.<br/> NULL = encrypted.
			/// </summary>
			[Column("definition"),          Nullable] public string? Definition      { get; set; } // nvarchar(max)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="NumberedProcedures")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains a row for each user-defined, schema-scoped object that is created within a database, including natively compiled scalar user-defined function.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-objects-transact-sql?view=sql-server-ver15'>sys.objects</a>.
		/// </summary>
		[Table(Schema="sys", Name="objects", IsView=true)]
		public partial class Objects
		{
			/// <summary>
			/// Object name.
			/// </summary>
			[Column("name"),                NotNull    ] public string   Name              { get; set; } = null!; // sysname
			/// <summary>
			/// Object identification number. Is unique within a database.
			/// </summary>
			[Column("object_id"),           NotNull    ] public int      ObjectID          { get; set; } // int
			/// <summary>
			/// ID of the individual owner, if different from the schema owner. By default, schema-contained objects are owned by the schema owner. However, an alternate owner can be specified by using the ALTER AUTHORIZATION statement to change ownership.<br/> Is NULL if there is no alternate individual owner.<br/> Is NULL if the object type is one of the following:<br/> C = CHECK constraint<br/> D = DEFAULT (constraint or stand-alone)<br/> F = FOREIGN KEY constraint<br/> PK = PRIMARY KEY constraint<br/> R = Rule (old-style, stand-alone)<br/> TA = Assembly (CLR-integration) trigger<br/> TR = SQL trigger<br/> UQ = UNIQUE constraint<br/> EC = Edge constraint
			/// </summary>
			[Column("principal_id"),           Nullable] public int?     PrincipalID       { get; set; } // int
			/// <summary>
			/// ID of the schema that the object is contained in.<br/> Schema-scoped system objects are always contained in the sys or INFORMATION_SCHEMA schemas.
			/// </summary>
			[Column("schema_id"),           NotNull    ] public int      SchemaID          { get; set; } // int
			/// <summary>
			/// ID of the object to which this object belongs.<br/> 0 = Not a child object.
			/// </summary>
			[Column("parent_object_id"),    NotNull    ] public int      ParentObjectID    { get; set; } // int
			/// <summary>
			/// Object type:<br/> AF = Aggregate function (CLR)<br/> C = CHECK constraint<br/> D = DEFAULT (constraint or stand-alone)<br/> F = FOREIGN KEY constraint<br/> FN = SQL scalar function<br/> FS = Assembly (CLR) scalar-function<br/> FT = Assembly (CLR) table-valued function<br/> IF = SQL inline table-valued function<br/> IT = Internal table<br/> P = SQL Stored Procedure<br/> PC = Assembly (CLR) stored-procedure<br/> PG = Plan guide<br/> PK = PRIMARY KEY constraint<br/> R = Rule (old-style, stand-alone)<br/> RF = Replication-filter-procedure<br/> S = System base table<br/> SN = Synonym<br/> SO = Sequence object<br/> U = Table (user-defined)<br/> V = View<br/> EC = Edge constraint <br/> <br/> <b>Applies to</b>: SQL Server 2012 (11.x) and later.<br/> SQ = Service queue<br/> TA = Assembly (CLR) DML trigger<br/> TF = SQL table-valued-function<br/> TR = SQL DML trigger<br/> TT = Table type<br/> UQ = UNIQUE constraint<br/> X = Extended stored procedure<br/> <br/> <b>Applies to</b>: SQL Server 2014 (12.x) and later, Azure SQL Database, Azure Synapse Analytics, Analytics Platform System (PDW).<br/> ST = STATS_TREE<br/> <br/> <b>Applies to</b>: SQL Server 2016 (13.x) and later, Azure SQL Database, Azure Synapse Analytics, Analytics Platform System (PDW).<br/> ET = External Table
			/// </summary>
			[Column("type"),                   Nullable] public string?  Type              { get; set; } // char(2)
			/// <summary>
			/// Description of the object type:<br/> AGGREGATE_FUNCTION<br/> CHECK_CONSTRAINT<br/> CLR_SCALAR_FUNCTION<br/> CLR_STORED_PROCEDURE<br/> CLR_TABLE_VALUED_FUNCTION<br/> CLR_TRIGGER<br/> DEFAULT_CONSTRAINT<br/> EXTENDED_STORED_PROCEDURE<br/> FOREIGN_KEY_CONSTRAINT<br/> INTERNAL_TABLE<br/> PLAN_GUIDE<br/> PRIMARY_KEY_CONSTRAINT<br/> REPLICATION_FILTER_PROCEDURE<br/> RULE<br/> SEQUENCE_OBJECT<br/> <br/> <b>Applies to</b>: SQL Server 2012 (11.x) and later.<br/>  SERVICE_QUEUE<br/> SQL_INLINE_TABLE_VALUED_FUNCTION<br/> SQL_SCALAR_FUNCTION<br/> SQL_STORED_PROCEDURE<br/> SQL_TABLE_VALUED_FUNCTION<br/> SQL_TRIGGER<br/> SYNONYM<br/> SYSTEM_TABLE<br/> TABLE_TYPE<br/> UNIQUE_CONSTRAINT<br/> USER_TABLE<br/> VIEW
			/// </summary>
			[Column("type_desc"),              Nullable] public string?  TypeDesc          { get; set; } // nvarchar(60)
			/// <summary>
			/// Date the object was created.
			/// </summary>
			[Column("create_date"),         NotNull    ] public DateTime CreateDate        { get; set; } // datetime
			/// <summary>
			/// Date the object was last modified by using an ALTER statement. If the object is a table or a view, modify_date also changes when an index on the table or view is created or altered.
			/// </summary>
			[Column("modify_date"),         NotNull    ] public DateTime ModifyDate        { get; set; } // datetime
			/// <summary>
			/// Object is created by an internal SQL Server component.
			/// </summary>
			[Column("is_ms_shipped"),       NotNull    ] public bool     IsMsShipped       { get; set; } // bit
			/// <summary>
			/// Object is published.
			/// </summary>
			[Column("is_published"),        NotNull    ] public bool     IsPublished       { get; set; } // bit
			/// <summary>
			/// Only the schema of the object is published.
			/// </summary>
			[Column("is_schema_published"), NotNull    ] public bool     IsSchemaPublished { get; set; } // bit

			#region Associations

			/// <summary>
			/// assembly_modules
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToOne, IsBackReference=true)]
			public SystemSchema.AssemblyModules? AssemblyModule { get; set; }

			/// <summary>
			/// change_tracking_tables
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<ChangeTrackingSchema.ChangeTrackingTables> ChangeTrackingTables { get; set; } = null!;

			/// <summary>
			/// check_constraints
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToOne, IsBackReference=true)]
			public SystemSchema.CheckConstraints? CheckConstraint { get; set; }

			/// <summary>
			/// columns
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.Columns> Columns { get; set; } = null!;

			/// <summary>
			/// column_store_row_groups
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.ColumnStoreRowGroups> ColumnStoreRowGroups { get; set; } = null!;

			/// <summary>
			/// column_type_usages
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.ColumnTypeUsages> ColumnTypeUsages { get; set; } = null!;

			/// <summary>
			/// column_xml_schema_collection_usages
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<XmlSchema.ColumnXmlSchemaCollectionUsages> ColumnXmlSchemaCollectionUsages { get; set; } = null!;

			/// <summary>
			/// computed_columns
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.ComputedColumns> ComputedColumns { get; set; } = null!;

			/// <summary>
			/// default_constraints
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToOne, IsBackReference=true)]
			public SystemSchema.DefaultConstraints? DefaultConstraint { get; set; }

			/// <summary>
			/// dm_column_store_object_pool
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<DynamicManagementSchema.DmColumnStoreObjectPool> DmColumnStoreObjectPool { get; set; } = null!;

			/// <summary>
			/// dm_db_column_store_row_group_operational_stats
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<DynamicManagementSchema.DmDbColumnStoreRowGroupOperationalStats> DmDbColumnStoreRowGroupOperationalStats { get; set; } = null!;

			/// <summary>
			/// dm_db_column_store_row_group_physical_stats
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<DynamicManagementSchema.DmDbColumnStoreRowGroupPhysicalStats> DmDbColumnStoreRowGroupPhysicalStats { get; set; } = null!;

			/// <summary>
			/// dm_db_fts_index_physical_stats
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<DynamicManagementSchema.DmDbFtsIndexPhysicalStats> DmDbFtsIndexPhysicalStats { get; set; } = null!;

			/// <summary>
			/// dm_db_index_usage_stats
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<DynamicManagementSchema.DmDbIndexUsageStats> DmDbIndexUsageStats { get; set; } = null!;

			/// <summary>
			/// dm_db_missing_index_details
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<DynamicManagementSchema.DmDbMissingIndexDetails> DmDbMissingIndexDetails { get; set; } = null!;

			/// <summary>
			/// dm_db_partition_stats
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<DynamicManagementSchema.DmDbPartitionStats> DmDbPartitionStats { get; set; } = null!;

			/// <summary>
			/// dm_db_xtp_hash_index_stats
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<DynamicManagementSchema.DmDbXtpHashIndexStats> DmDbXtpHashIndexStats { get; set; } = null!;

			/// <summary>
			/// dm_db_xtp_index_stats
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<DynamicManagementSchema.DmDbXtpIndexStats> DmDbXtpIndexStats { get; set; } = null!;

			/// <summary>
			/// dm_db_xtp_memory_consumers
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<DynamicManagementSchema.DmDbXtpMemoryConsumers> DmDbXtpMemoryConsumers { get; set; } = null!;

			/// <summary>
			/// dm_db_xtp_nonclustered_index_stats
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<DynamicManagementSchema.DmDbXtpNonclusteredIndexStats> DmDbXtpNonclusteredIndexStats { get; set; } = null!;

			/// <summary>
			/// dm_db_xtp_object_stats
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<DynamicManagementSchema.DmDbXtpObjectStats> DmDbXtpObjectStats { get; set; } = null!;

			/// <summary>
			/// dm_db_xtp_table_memory_stats
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<DynamicManagementSchema.DmDbXtpTableMemoryStats> DmDbXtpTableMemoryStats { get; set; } = null!;

			/// <summary>
			/// dm_exec_function_stats
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<DynamicManagementSchema.DmExecFunctionStats> DmExecFunctionStats { get; set; } = null!;

			/// <summary>
			/// dm_exec_procedure_stats
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<DynamicManagementSchema.DmExecProcedureStats> DmExecProcedureStats { get; set; } = null!;

			/// <summary>
			/// dm_exec_query_profiles
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<DynamicManagementSchema.DmExecQueryProfiles> DmExecQueryProfiles { get; set; } = null!;

			/// <summary>
			/// dm_exec_trigger_stats
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<DynamicManagementSchema.DmExecTriggerStats> DmExecTriggerStats { get; set; } = null!;

			/// <summary>
			/// dm_filestream_non_transacted_handles
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<DynamicManagementSchema.DmFilestreamNonTransactedHandles> DmFilestreamNonTransactedHandles { get; set; } = null!;

			/// <summary>
			/// dm_qn_subscriptions
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<DynamicManagementSchema.DmQnSubscriptions> DmQnSubscriptions { get; set; } = null!;

			/// <summary>
			/// edge_constraint_clauses
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.EdgeConstraintClauses> EdgeConstraintClauses { get; set; } = null!;

			/// <summary>
			/// edge_constraints
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.EdgeConstraints> EdgeConstraints { get; set; } = null!;

			/// <summary>
			/// event_notifications
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.EventNotifications> EventNotifications { get; set; } = null!;

			/// <summary>
			/// events
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.Events> Events { get; set; } = null!;

			/// <summary>
			/// extended_procedures
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.ExtendedProcedures> ExtendedProcedures { get; set; } = null!;

			/// <summary>
			/// external_table_columns
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.ExternalTableColumns> ExternalTableColumns { get; set; } = null!;

			/// <summary>
			/// external_tables
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.ExternalTables> ExternalTables { get; set; } = null!;

			/// <summary>
			/// filetables
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.Filetables> Filetables { get; set; } = null!;

			/// <summary>
			/// filetable_system_defined_objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.FiletableSystemDefinedObjects> FiletableSystemDefinedObjects { get; set; } = null!;

			/// <summary>
			/// foreign_keys
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToOne, IsBackReference=true)]
			public SystemSchema.ForeignKeys? ForeignKey { get; set; }

			/// <summary>
			/// fulltext_index_catalog_usages
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.FulltextIndexCatalogUsages> FulltextIndexCatalogUsages { get; set; } = null!;

			/// <summary>
			/// fulltext_index_columns
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.FulltextIndexColumns> FulltextIndexColumns { get; set; } = null!;

			/// <summary>
			/// fulltext_indexes
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.FulltextIndexes> FulltextIndexes { get; set; } = null!;

			/// <summary>
			/// function_order_columns
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.FunctionOrderColumns> FunctionOrderColumns { get; set; } = null!;

			/// <summary>
			/// hash_indexes
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.HashIndexes> HashIndexes { get; set; } = null!;

			/// <summary>
			/// identity_columns
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.IdentityColumns> IdentityColumns { get; set; } = null!;

			/// <summary>
			/// index_columns
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.IndexColumns> IndexColumns { get; set; } = null!;

			/// <summary>
			/// indexes
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.Indexes> Indexes { get; set; } = null!;

			/// <summary>
			/// index_resumable_operations
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.IndexResumableOperations> IndexResumableOperations { get; set; } = null!;

			/// <summary>
			/// internal_partitions
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.InternalPartitions> InternalPartitions { get; set; } = null!;

			/// <summary>
			/// internal_tables
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.InternalTables> InternalTables { get; set; } = null!;

			/// <summary>
			/// key_constraints
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToOne, IsBackReference=true)]
			public SystemSchema.KeyConstraints? KeyConstraint { get; set; }

			/// <summary>
			/// masked_columns
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.MaskedColumns> MaskedColumns { get; set; } = null!;

			/// <summary>
			/// memory_optimized_tables_internal_attributes
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.MemoryOptimizedTablesInternalAttributes> MemoryOptimizedTablesInternalAttributes { get; set; } = null!;

			/// <summary>
			/// module_assembly_usages
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.ModuleAssemblyUsages> ModuleAssemblyUsages { get; set; } = null!;

			/// <summary>
			/// numbered_procedure_parameters
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.NumberedProcedureParameters> NumberedProcedureParameters { get; set; } = null!;

			/// <summary>
			/// numbered_procedures
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.NumberedProcedures> NumberedProcedures { get; set; } = null!;

			/// <summary>
			/// parameters
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.Parameters> Parameters { get; set; } = null!;

			/// <summary>
			/// parameter_type_usages
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.ParameterTypeUsages> ParameterTypeUsages { get; set; } = null!;

			/// <summary>
			/// parameter_xml_schema_collection_usages
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<XmlSchema.ParameterXmlSchemaCollectionUsages> ParameterXmlSchemaCollectionUsages { get; set; } = null!;

			/// <summary>
			/// partitions
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.Partitions> Partitions { get; set; } = null!;

			/// <summary>
			/// periods
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.Periods> Periods { get; set; } = null!;

			/// <summary>
			/// procedures
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.Procedures> Procedures { get; set; } = null!;

			/// <summary>
			/// query_store_query
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.QueryStoreQuery> QueryStoreQuery { get; set; } = null!;

			/// <summary>
			/// remote_data_archive_tables
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.RemoteDataArchiveTables> RemoteDataArchiveTables { get; set; } = null!;

			/// <summary>
			/// security_policies
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.SecurityPolicies> SecurityPolicies { get; set; } = null!;

			/// <summary>
			/// security_predicates
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.SecurityPredicates> SecurityPredicates { get; set; } = null!;

			/// <summary>
			/// selective_xml_index_namespaces
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.SelectiveXmlIndexNamespaces> SelectiveXmlIndexNamespaces { get; set; } = null!;

			/// <summary>
			/// selective_xml_index_paths
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<XmlSchema.SelectiveXmlIndexPaths> SelectiveXmlIndexPaths { get; set; } = null!;

			/// <summary>
			/// sequences
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.Sequences> Sequences { get; set; } = null!;

			/// <summary>
			/// server_assembly_modules
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.ServerAssemblyModules> ServerAssemblyModules { get; set; } = null!;

			/// <summary>
			/// server_event_notifications
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.ServerEventNotifications> ServerEventNotifications { get; set; } = null!;

			/// <summary>
			/// server_events
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.ServerEvents> ServerEvents { get; set; } = null!;

			/// <summary>
			/// server_event_session_fields
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.ServerEventSessionFields> ServerEventSessionFields { get; set; } = null!;

			/// <summary>
			/// server_sql_modules
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.ServerSqlModules> ServerSqlModules { get; set; } = null!;

			/// <summary>
			/// server_trigger_events
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.ServerTriggerEvents> ServerTriggerEvents { get; set; } = null!;

			/// <summary>
			/// server_triggers
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.ServerTriggers> ServerTriggers { get; set; } = null!;

			/// <summary>
			/// service_queues
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToOne, IsBackReference=true)]
			public SystemSchema.ServiceQueues? ServiceQueue { get; set; }

			/// <summary>
			/// spatial_indexes
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.SpatialIndexes> SpatialIndexes { get; set; } = null!;

			/// <summary>
			/// spatial_index_tessellations
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.SpatialIndexTessellations> SpatialIndexTessellations { get; set; } = null!;

			/// <summary>
			/// sql_dependencies
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.SqlDependencies> SqlDependencies { get; set; } = null!;

			/// <summary>
			/// sql_modules
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.SqlModules> SqlModules { get; set; } = null!;

			/// <summary>
			/// stats
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.Stats> Stats { get; set; } = null!;

			/// <summary>
			/// stats_columns
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.StatsColumns> StatsColumns { get; set; } = null!;

			/// <summary>
			/// synonyms
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToOne, IsBackReference=true)]
			public SystemSchema.Synonyms? Synonym { get; set; }

			/// <summary>
			/// tables
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToOne, IsBackReference=true)]
			public SystemSchema.Tables? Table { get; set; }

			/// <summary>
			/// trigger_events
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.TriggerEvents> TriggerEvents { get; set; } = null!;

			/// <summary>
			/// triggers
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.Triggers> Triggers { get; set; } = null!;

			/// <summary>
			/// views
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToOne, IsBackReference=true)]
			public SystemSchema.Views? View { get; set; }

			/// <summary>
			/// xml_indexes
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<XmlSchema.XmlIndexes> XmlIndexes { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="openkeys", IsView=true)]
		public partial class Openkeys
		{
			[Column("database_id"),   Nullable] public int?      DatabaseID   { get; set; } // int
			[Column("database_name"), Nullable] public string?   DatabaseName { get; set; } // nvarchar(128)
			[Column("key_id"),        Nullable] public int?      KeyID        { get; set; } // int
			[Column("key_name"),      Nullable] public string?   KeyName      { get; set; } // nvarchar(128)
			[Column("key_guid"),      Nullable] public Guid?     KeyGuid      { get; set; } // uniqueidentifier
			[Column("opened_date"),   Nullable] public DateTime? OpenedDate   { get; set; } // datetime
			[Column("status"),        Nullable] public short?    Status       { get; set; } // smallint
		}

		/// <summary>
		/// Contains a row for each parameter of an object that accepts parameters. If the object is a scalar function, there is also a single row describing the return value. That row will have a <b>parameter_id</b> value of 0.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-parameters-transact-sql?view=sql-server-ver15'>sys.parameters</a>.
		/// </summary>
		[Table(Schema="sys", Name="parameters", IsView=true)]
		public partial class Parameters
		{
			/// <summary>
			/// ID of the object to which this parameter belongs.
			/// </summary>
			[Column("object_id"),                           NotNull    ] public int     ObjectID                        { get; set; } // int
			/// <summary>
			/// Name of the parameter. Is unique within the object.<br/> If the object is a scalar function, the parameter name is an empty string in the row representing the return value.
			/// </summary>
			[Column("name"),                                   Nullable] public string? Name                            { get; set; } // sysname
			/// <summary>
			/// ID of the parameter. Is unique within the object.<br/> If the object is a scalar function, <b>parameter_id</b> = 0 represents the return value.
			/// </summary>
			[Column("parameter_id"),                        NotNull    ] public int     ParameterID                     { get; set; } // int
			/// <summary>
			/// ID of the system type of the parameter.
			/// </summary>
			[Column("system_type_id"),                      NotNull    ] public byte    SystemTypeID                    { get; set; } // tinyint
			/// <summary>
			/// ID of the type of the parameter as defined by the user.<br/> To return the name of the type, join to the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-types-transact-sql?view=sql-server-ver15'>sys.types</a> catalog view on this column.
			/// </summary>
			[Column("user_type_id"),                        NotNull    ] public int     UserTypeID                      { get; set; } // int
			/// <summary>
			/// Maximum length of the parameter, in bytes.<br/> Value = -1 when the column data type is <b>varchar(max)</b>, <b>nvarchar(max)</b>, <b>varbinary(max)</b>, or <b>xml</b>.
			/// </summary>
			[Column("max_length"),                          NotNull    ] public short   MaxLength                       { get; set; } // smallint
			/// <summary>
			/// Precision of the parameter if numeric-based; otherwise, 0.
			/// </summary>
			[Column("precision"),                           NotNull    ] public byte    Precision                       { get; set; } // tinyint
			/// <summary>
			/// Scale of the parameter if numeric-based; otherwise, 0.
			/// </summary>
			[Column("scale"),                               NotNull    ] public byte    Scale                           { get; set; } // tinyint
			/// <summary>
			/// 1 = Parameter is OUTPUT or RETURN; otherwise, 0.
			/// </summary>
			[Column("is_output"),                           NotNull    ] public bool    IsOutput                        { get; set; } // bit
			/// <summary>
			/// 1 = Parameter is a cursor-reference parameter.
			/// </summary>
			[Column("is_cursor_ref"),                       NotNull    ] public bool    IsCursorRef                     { get; set; } // bit
			/// <summary>
			/// 1 = Parameter has default value.<br/> SQL Server only maintains default values for CLR objects in this catalog view; therefore, this column has a value of 0 for Transact-SQL objects. To view the default value of a parameter in a Transact-SQL object, query the <b>definition</b> column of the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-sql-modules-transact-sql?view=sql-server-ver15'>sys.sql_modules</a> catalog view, or use the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/functions/object-definition-transact-sql?view=sql-server-ver15'>OBJECT_DEFINITION</a> system function.
			/// </summary>
			[Column("has_default_value"),                   NotNull    ] public bool    HasDefaultValue                 { get; set; } // bit
			/// <summary>
			/// 1 = Content is a complete XML document.<br/> 0 = Content is a document fragment, or the data type of the column is not <b>xml</b>.
			/// </summary>
			[Column("is_xml_document"),                     NotNull    ] public bool    IsXmlDocument                   { get; set; } // bit
			/// <summary>
			/// If <b>has_default_value</b> is 1, the value of this column is the value of the default for the parameter; otherwise <i>NULL</i>.
			/// </summary>
			[Column("default_value"),                          Nullable] public object? DefaultValue                    { get; set; } // sql_variant
			/// <summary>
			/// Non-zero if the data type of the parameter is <b>xml</b> and the XML is typed. The value is the ID of the collection containing the validating XML schema namespace of the parameter.<br/> 0 = No XML schema collection.
			/// </summary>
			[Column("xml_collection_id"),                   NotNull    ] public int     XmlCollectionID                 { get; set; } // int
			/// <summary>
			/// 1 = Parameter is  READONLY; otherwise, 0.
			/// </summary>
			[Column("is_readonly"),                         NotNull    ] public bool    IsReadonly                      { get; set; } // bit
			/// <summary>
			/// 1 = Parameter is nullable. (the default).<br/> 0 = Parameter is not nullable, for more efficient execution of natively-compiled stored procedures.
			/// </summary>
			[Column("is_nullable"),                            Nullable] public bool?   IsNullable                      { get; set; } // bit
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> Encryption type:<br/> 1 = Deterministic encryption<br/> 2 = Randomized encryption
			/// </summary>
			[Column("encryption_type"),                        Nullable] public int?    EncryptionType                  { get; set; } // int
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> Encryption type description:<br/> RANDOMIZED<br/> DETERMINISTIC
			/// </summary>
			[Column("encryption_type_desc"),                   Nullable] public string? EncryptionTypeDesc              { get; set; } // nvarchar(64)
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> Name of encryption algorithm.<br/> Only AEAD_AES_256_CBC_HMAC_SHA_512 is supported.
			/// </summary>
			[Column("encryption_algorithm_name"),              Nullable] public string? EncryptionAlgorithmName         { get; set; } // sysname
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> ID of the CEK.
			/// </summary>
			[Column("column_encryption_key_id"),               Nullable] public int?    ColumnEncryptionKeyID           { get; set; } // int
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> The name of the database where the column encryption key exists if different than the database of the column. Is <i>NULL</i> if the key exists in the same database as the column.
			/// </summary>
			[Column("column_encryption_key_database_name"),    Nullable] public string? ColumnEncryptionKeyDatabaseName { get; set; } // sysname

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="Parameters")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Returns one row for each parameter that is of user-defined type.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-parameter-type-usages-transact-sql?view=sql-server-ver15'>sys.parameter_type_usages</a>.
		/// </summary>
		[Table(Schema="sys", Name="parameter_type_usages", IsView=true)]
		public partial class ParameterTypeUsages
		{
			/// <summary>
			/// ID of the object to which this parameter belongs.
			/// </summary>
			[Column("object_id"),    NotNull] public int ObjectID    { get; set; } // int
			/// <summary>
			/// ID of the parameter. Is unique within the object.
			/// </summary>
			[Column("parameter_id"), NotNull] public int ParameterID { get; set; } // int
			/// <summary>
			/// ID of the user-defined type.<br/> To return the name of the type, join to the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-types-transact-sql?view=sql-server-ver15'>sys.types</a> catalog view on this column.
			/// </summary>
			[Column("user_type_id"), NotNull] public int UserTypeID  { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="ParameterTypeUsages")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="partition_functions", IsView=true)]
		public partial class PartitionFunctions
		{
			[Column("name"),                    NotNull    ] public string   Name                 { get; set; } = null!; // sysname
			[Column("function_id"),             NotNull    ] public int      FunctionID           { get; set; } // int
			[Column("type"),                    NotNull    ] public string   Type                 { get; set; } = null!; // char(2)
			[Column("type_desc"),                  Nullable] public string?  TypeDesc             { get; set; } // nvarchar(60)
			[Column("fanout"),                  NotNull    ] public int      Fanout               { get; set; } // int
			[Column("boundary_value_on_right"), NotNull    ] public bool     BoundaryValueOnRight { get; set; } // bit
			[Column("is_system"),               NotNull    ] public bool     IsSystem             { get; set; } // bit
			[Column("create_date"),             NotNull    ] public DateTime CreateDate           { get; set; } // datetime
			[Column("modify_date"),             NotNull    ] public DateTime ModifyDate           { get; set; } // datetime
		}

		[Table(Schema="sys", Name="partition_parameters", IsView=true)]
		public partial class PartitionParameters
		{
			[Column("function_id"),    NotNull    ] public int     FunctionID    { get; set; } // int
			[Column("parameter_id"),   NotNull    ] public int     ParameterID   { get; set; } // int
			[Column("system_type_id"), NotNull    ] public byte    SystemTypeID  { get; set; } // tinyint
			[Column("max_length"),     NotNull    ] public short   MaxLength     { get; set; } // smallint
			[Column("precision"),      NotNull    ] public byte    Precision     { get; set; } // tinyint
			[Column("scale"),          NotNull    ] public byte    Scale         { get; set; } // tinyint
			[Column("collation_name"),    Nullable] public string? CollationName { get; set; } // sysname
			[Column("user_type_id"),   NotNull    ] public int     UserTypeID    { get; set; } // int
		}

		[Table(Schema="sys", Name="partition_range_values", IsView=true)]
		public partial class PartitionRangeValues
		{
			[Column("function_id"),  NotNull    ] public int     FunctionID  { get; set; } // int
			[Column("boundary_id"),  NotNull    ] public int     BoundaryID  { get; set; } // int
			[Column("parameter_id"), NotNull    ] public int     ParameterID { get; set; } // int
			[Column("value"),           Nullable] public object? Value       { get; set; } // sql_variant
		}

		/// <summary>
		/// Contains a row for each partition of all the tables and most types of indexes in the database. Special index types such as Full-Text, Spatial, and XML are not included in this view. All tables and indexes in SQL Server contain at least one partition, whether or not they are explicitly partitioned.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-partitions-transact-sql?view=sql-server-ver15'>sys.partitions</a>.
		/// </summary>
		[Table(Schema="sys", Name="partitions", IsView=true)]
		public partial class Partitions
		{
			/// <summary>
			/// Indicates the partition ID. Is unique within a database.
			/// </summary>
			[Column("partition_id"),            NotNull    ] public long    PartitionID           { get; set; } // bigint
			/// <summary>
			/// Indicates the ID of the object to which this partition belongs. Every table or view is composed of at least one partition.
			/// </summary>
			[Column("object_id"),               NotNull    ] public int     ObjectID              { get; set; } // int
			/// <summary>
			/// Indicates the ID of the index within the object to which this partition belongs.<br/> 0 = heap<br/>1 = clustered index<br/>2 or greater = nonclustered index
			/// </summary>
			[Column("index_id"),                NotNull    ] public int     IndexID               { get; set; } // int
			/// <summary>
			/// Is a 1-based partition number within the owning index or heap. For non-partitioned tables and indexes, the value of this column is 1.
			/// </summary>
			[Column("partition_number"),        NotNull    ] public int     PartitionNumber       { get; set; } // int
			/// <summary>
			/// Indicates the ID of the data heap or B-tree (HoBT) that contains the rows for this partition.
			/// </summary>
			[Column("hobt_id"),                 NotNull    ] public long    HobtID                { get; set; } // bigint
			/// <summary>
			/// Indicates the approximate number of rows in this partition.
			/// </summary>
			[Column("rows"),                       Nullable] public long?   Rows                  { get; set; } // bigint
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2012 (11.x) and later.<br/> Indicates the ID of the FILESTREAM filegroup stored on this partition.
			/// </summary>
			[Column("filestream_filegroup_id"), NotNull    ] public short   FilestreamFilegroupID { get; set; } // smallint
			/// <summary>
			/// Indicates the state of compression for each partition:<br/> 0 = NONE <br/>1 = ROW <br/>2 = PAGE <br/>3 = COLUMNSTORE : <b>Applies to</b>: SQL Server 2012 (11.x) and later<br/>4 = COLUMNSTORE_ARCHIVE : <b>Applies to</b>: SQL Server 2014 (12.x) and later<br/> <b>Note:</b> Full text indexes will be compressed in any edition of SQL Server.
			/// </summary>
			[Column("data_compression"),        NotNull    ] public byte    DataCompression       { get; set; } // tinyint
			/// <summary>
			/// Indicates the state of compression for each partition. Possible values for rowstore tables are NONE, ROW, and PAGE. Possible values for columnstore tables are COLUMNSTORE and COLUMNSTORE_ARCHIVE.
			/// </summary>
			[Column("data_compression_desc"),      Nullable] public string? DataCompressionDesc   { get; set; } // nvarchar(60)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="Partitions")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="partition_schemes", IsView=true)]
		public partial class PartitionSchemes
		{
			[Column("name"),          NotNull    ] public string  Name        { get; set; } = null!; // sysname
			[Column("data_space_id"), NotNull    ] public int     DataSpaceID { get; set; } // int
			[Column("type"),          NotNull    ] public string  Type        { get; set; } = null!; // char(2)
			[Column("type_desc"),        Nullable] public string? TypeDesc    { get; set; } // nvarchar(60)
			[Column("is_default"),       Nullable] public bool?   IsDefault   { get; set; } // bit
			[Column("is_system"),        Nullable] public bool?   IsSystem    { get; set; } // bit
			[Column("function_id"),   NotNull    ] public int     FunctionID  { get; set; } // int
		}

		/// <summary>
		/// Returns a row for each table for which periods have been defined.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-periods-transact-sql?view=sql-server-ver15'>sys.periods</a>.
		/// </summary>
		[Table(Schema="sys", Name="periods", IsView=true)]
		public partial class Periods
		{
			/// <summary>
			/// Name of the period
			/// </summary>
			[Column("name"),                Nullable] public string? Name           { get; set; } // sysname
			/// <summary>
			/// The numeric value representing the type of period:<br/> 1 = system-time period
			/// </summary>
			[Column("period_type"),         Nullable] public byte?   PeriodType     { get; set; } // tinyint
			/// <summary>
			/// The text description of the type of column:<br/> SYSTEM_TIME_PERIOD
			/// </summary>
			[Column("period_type_desc"),    Nullable] public string? PeriodTypeDesc { get; set; } // nvarchar(60)
			/// <summary>
			/// The id of the table containing the period_type column
			/// </summary>
			[Column("object_id"),        NotNull    ] public int     ObjectID       { get; set; } // int
			/// <summary>
			/// The id of the column that defines the lower period boundary
			/// </summary>
			[Column("start_column_id"),  NotNull    ] public int     StartColumnID  { get; set; } // int
			/// <summary>
			/// The id of the column that defines the upper period boundary
			/// </summary>
			[Column("end_column_id"),    NotNull    ] public int     EndColumnID    { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="Periods")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains a row for each plan guide in the database.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-plan-guides-transact-sql?view=sql-server-ver15'>sys.plan_guides</a>.
		/// </summary>
		[Table(Schema="sys", Name="plan_guides", IsView=true)]
		public partial class PlanGuides
		{
			/// <summary>
			/// Unique identifier of the plan guide in the database.
			/// </summary>
			[Column("plan_guide_id"),   NotNull    ] public int      PlanGuideID   { get; set; } // int
			/// <summary>
			/// Name of the plan guide.
			/// </summary>
			[Column("name"),            NotNull    ] public string   Name          { get; set; } = null!; // sysname
			/// <summary>
			/// Date and time the plan guide was created.
			/// </summary>
			[Column("create_date"),     NotNull    ] public DateTime CreateDate    { get; set; } // datetime
			/// <summary>
			/// Date the plan guide was last modified.
			/// </summary>
			[Column("modify_date"),     NotNull    ] public DateTime ModifyDate    { get; set; } // Datetime
			/// <summary>
			/// 1 = Plan guide is disabled.<br/> 0 = Plan guide is enabled.
			/// </summary>
			[Column("is_disabled"),     NotNull    ] public bool     IsDisabled    { get; set; } // bit
			/// <summary>
			/// Text of the query on which the plan guide is created.
			/// </summary>
			[Column("query_text"),         Nullable] public string?  QueryText     { get; set; } // nvarchar(max)
			/// <summary>
			/// Identifies the scope of the plan guide.<br/> 1 = OBJECT<br/> 2 = SQL<br/> 3 = TEMPLATE
			/// </summary>
			[Column("scope_type"),      NotNull    ] public byte     ScopeType     { get; set; } // tinyint
			/// <summary>
			/// Description of scope of the plan guide.<br/> OBJECT<br/> SQL<br/> TEMPLATE
			/// </summary>
			[Column("scope_type_desc"),    Nullable] public string?  ScopeTypeDesc { get; set; } // nvarchar(60)
			/// <summary>
			/// object_id of the object defining the scope of the plan guide, if the scope is OBJECT.<br/> NULL if the plan guide is not scoped to OBJECT.
			/// </summary>
			[Column("scope_object_id"),    Nullable] public int?     ScopeObjectID { get; set; } // Int
			/// <summary>
			/// Batch text, if <b>scope_type</b> is SQL.<br/> NULL if batch type is not SQL.<br/> If NULL and <b>scope_type</b> is SQL, the value of <b>query_text</b> applies.
			/// </summary>
			[Column("scope_batch"),        Nullable] public string?  ScopeBatch    { get; set; } // nvarchar(max)
			/// <summary>
			/// The string defining the list of parameters associated with the plan guide.<br/> NULL = No parameter list is associated with the plan guide.
			/// </summary>
			[Column("parameters"),         Nullable] public string?  Parameters    { get; set; } // nvarchar(max)
			/// <summary>
			/// The OPTION clause hints associated with the plan guide.
			/// </summary>
			[Column("hints"),              Nullable] public string?  Hints         { get; set; } // nvarchar(max)
		}

		/// <summary>
		/// Contains a row for each object that is a procedure of some kind, with <b>sys.objects.type</b> = P, X, RF, and PC.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-procedures-transact-sql?view=sql-server-ver15'>sys.procedures</a>.
		/// </summary>
		[Table(Schema="sys", Name="procedures", IsView=true)]
		public partial class Procedures
		{
			[Column("name"),                      NotNull    ] public string   Name                   { get; set; } = null!; // sysname
			[Column("object_id"),                 NotNull    ] public int      ObjectID               { get; set; } // int
			[Column("principal_id"),                 Nullable] public int?     PrincipalID            { get; set; } // int
			[Column("schema_id"),                 NotNull    ] public int      SchemaID               { get; set; } // int
			[Column("parent_object_id"),          NotNull    ] public int      ParentObjectID         { get; set; } // int
			[Column("type"),                         Nullable] public string?  Type                   { get; set; } // char(2)
			[Column("type_desc"),                    Nullable] public string?  TypeDesc               { get; set; } // nvarchar(60)
			[Column("create_date"),               NotNull    ] public DateTime CreateDate             { get; set; } // datetime
			[Column("modify_date"),               NotNull    ] public DateTime ModifyDate             { get; set; } // datetime
			[Column("is_ms_shipped"),             NotNull    ] public bool     IsMsShipped            { get; set; } // bit
			[Column("is_published"),              NotNull    ] public bool     IsPublished            { get; set; } // bit
			[Column("is_schema_published"),       NotNull    ] public bool     IsSchemaPublished      { get; set; } // bit
			/// <summary>
			/// 1 = Procedure is auto-executed at the server startup; otherwise, 0. Can only be set for procedures in the master database.
			/// </summary>
			[Column("is_auto_executed"),          NotNull    ] public bool     IsAutoExecuted         { get; set; } // bit
			/// <summary>
			/// Execution of this procedure is replicated.
			/// </summary>
			[Column("is_execution_replicated"),      Nullable] public bool?    IsExecutionReplicated  { get; set; } // bit
			/// <summary>
			/// Replication of the procedure execution is done only when the transaction can be serialized.
			/// </summary>
			[Column("is_repl_serializable_only"),    Nullable] public bool?    IsReplSerializableOnly { get; set; } // bit
			/// <summary>
			/// During execution, the procedure skips constraints marked NOT FOR REPLICATION.
			/// </summary>
			[Column("skips_repl_constraints"),       Nullable] public bool?    SkipsReplConstraints   { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="Procedures")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="query_context_settings", IsView=true)]
		public partial class QueryContextSettings
		{
			[Column("context_settings_id"),       NotNull    ] public long    ContextSettingsID       { get; set; } // bigint
			[Column("set_options"),                  Nullable] public byte[]? SetOptions              { get; set; } // varbinary(8)
			[Column("language_id"),               NotNull    ] public short   LanguageID              { get; set; } // smallint
			[Column("date_format"),               NotNull    ] public short   DateFormat              { get; set; } // smallint
			[Column("date_first"),                NotNull    ] public byte    DateFirst               { get; set; } // tinyint
			[Column("status"),                       Nullable] public byte[]? Status                  { get; set; } // varbinary(2)
			[Column("required_cursor_options"),   NotNull    ] public int     RequiredCursorOptions   { get; set; } // int
			[Column("acceptable_cursor_options"), NotNull    ] public int     AcceptableCursorOptions { get; set; } // int
			[Column("merge_action_type"),         NotNull    ] public short   MergeActionType         { get; set; } // smallint
			[Column("default_schema_id"),         NotNull    ] public int     DefaultSchemaID         { get; set; } // int
			[Column("is_replication_specific"),   NotNull    ] public bool    IsReplicationSpecific   { get; set; } // bit
			[Column("is_contained"),                 Nullable] public byte[]? IsContained             { get; set; } // varbinary(1)
		}

		[Table(Schema="sys", Name="query_store_plan", IsView=true)]
		public partial class QueryStorePlan
		{
			[Column("plan_id"),                        NotNull    ] public long            PlanID                     { get; set; } // bigint
			[Column("query_id"),                       NotNull    ] public long            QueryID                    { get; set; } // bigint
			[Column("plan_group_id"),                     Nullable] public long?           PlanGroupID                { get; set; } // bigint
			[Column("engine_version"),                    Nullable] public string?         EngineVersion              { get; set; } // nvarchar(32)
			[Column("compatibility_level"),            NotNull    ] public short           CompatibilityLevel         { get; set; } // smallint
			[Column("query_plan_hash"),                NotNull    ] public byte[]          QueryPlanHash              { get; set; } = null!; // binary(8)
			[Column("query_plan"),                        Nullable] public string?         QueryPlan                  { get; set; } // nvarchar(0)
			[Column("is_online_index_plan"),           NotNull    ] public bool            IsOnlineIndexPlan          { get; set; } // bit
			[Column("is_trivial_plan"),                NotNull    ] public bool            IsTrivialPlan              { get; set; } // bit
			[Column("is_parallel_plan"),               NotNull    ] public bool            IsParallelPlan             { get; set; } // bit
			[Column("is_forced_plan"),                 NotNull    ] public bool            IsForcedPlan               { get; set; } // bit
			[Column("is_natively_compiled"),           NotNull    ] public bool            IsNativelyCompiled         { get; set; } // bit
			[Column("force_failure_count"),            NotNull    ] public long            ForceFailureCount          { get; set; } // bigint
			[Column("last_force_failure_reason"),      NotNull    ] public int             LastForceFailureReason     { get; set; } // int
			[Column("last_force_failure_reason_desc"),    Nullable] public string?         LastForceFailureReasonDesc { get; set; } // nvarchar(128)
			[Column("count_compiles"),                    Nullable] public long?           CountCompiles              { get; set; } // bigint
			[Column("initial_compile_start_time"),     NotNull    ] public DateTimeOffset  InitialCompileStartTime    { get; set; } // datetimeoffset(7)
			[Column("last_compile_start_time"),           Nullable] public DateTimeOffset? LastCompileStartTime       { get; set; } // datetimeoffset(7)
			[Column("last_execution_time"),               Nullable] public DateTimeOffset? LastExecutionTime          { get; set; } // datetimeoffset(7)
			[Column("avg_compile_duration"),              Nullable] public double?         AvgCompileDuration         { get; set; } // float
			[Column("last_compile_duration"),             Nullable] public long?           LastCompileDuration        { get; set; } // bigint
			[Column("plan_forcing_type"),              NotNull    ] public int             PlanForcingType            { get; set; } // int
			[Column("plan_forcing_type_desc"),            Nullable] public string?         PlanForcingTypeDesc        { get; set; } // nvarchar(60)
		}

		[Table(Schema="sys", Name="query_store_query", IsView=true)]
		public partial class QueryStoreQuery
		{
			[Column("query_id"),                         NotNull    ] public long            QueryID                       { get; set; } // bigint
			[Column("query_text_id"),                    NotNull    ] public long            QueryTextID                   { get; set; } // bigint
			[Column("context_settings_id"),              NotNull    ] public long            ContextSettingsID             { get; set; } // bigint
			[Column("object_id"),                           Nullable] public long?           ObjectID                      { get; set; } // bigint
			[Column("batch_sql_handle"),                    Nullable] public byte[]?         BatchSqlHandle                { get; set; } // varbinary(44)
			[Column("query_hash"),                       NotNull    ] public byte[]          QueryHash                     { get; set; } = null!; // binary(8)
			[Column("is_internal_query"),                NotNull    ] public bool            IsInternalQuery               { get; set; } // bit
			[Column("query_parameterization_type"),      NotNull    ] public byte            QueryParameterizationType     { get; set; } // tinyint
			[Column("query_parameterization_type_desc"),    Nullable] public string?         QueryParameterizationTypeDesc { get; set; } // nvarchar(60)
			[Column("initial_compile_start_time"),       NotNull    ] public DateTimeOffset  InitialCompileStartTime       { get; set; } // datetimeoffset(7)
			[Column("last_compile_start_time"),             Nullable] public DateTimeOffset? LastCompileStartTime          { get; set; } // datetimeoffset(7)
			[Column("last_execution_time"),                 Nullable] public DateTimeOffset? LastExecutionTime             { get; set; } // datetimeoffset(7)
			[Column("last_compile_batch_sql_handle"),       Nullable] public byte[]?         LastCompileBatchSqlHandle     { get; set; } // varbinary(44)
			[Column("last_compile_batch_offset_start"),     Nullable] public long?           LastCompileBatchOffsetStart   { get; set; } // bigint
			[Column("last_compile_batch_offset_end"),       Nullable] public long?           LastCompileBatchOffsetEnd     { get; set; } // bigint
			[Column("count_compiles"),                      Nullable] public long?           CountCompiles                 { get; set; } // bigint
			[Column("avg_compile_duration"),                Nullable] public double?         AvgCompileDuration            { get; set; } // float
			[Column("last_compile_duration"),               Nullable] public long?           LastCompileDuration           { get; set; } // bigint
			[Column("avg_bind_duration"),                   Nullable] public double?         AvgBindDuration               { get; set; } // float
			[Column("last_bind_duration"),                  Nullable] public long?           LastBindDuration              { get; set; } // bigint
			[Column("avg_bind_cpu_time"),                   Nullable] public double?         AvgBindCpuTime                { get; set; } // float
			[Column("last_bind_cpu_time"),                  Nullable] public long?           LastBindCpuTime               { get; set; } // bigint
			[Column("avg_optimize_duration"),               Nullable] public double?         AvgOptimizeDuration           { get; set; } // float
			[Column("last_optimize_duration"),              Nullable] public long?           LastOptimizeDuration          { get; set; } // bigint
			[Column("avg_optimize_cpu_time"),               Nullable] public double?         AvgOptimizeCpuTime            { get; set; } // float
			[Column("last_optimize_cpu_time"),              Nullable] public long?           LastOptimizeCpuTime           { get; set; } // bigint
			[Column("avg_compile_memory_kb"),               Nullable] public double?         AvgCompileMemoryKb            { get; set; } // float
			[Column("last_compile_memory_kb"),              Nullable] public long?           LastCompileMemoryKb           { get; set; } // bigint
			[Column("max_compile_memory_kb"),               Nullable] public long?           MaxCompileMemoryKb            { get; set; } // bigint
			[Column("is_clouddb_internal_query"),           Nullable] public bool?           IsClouddbInternalQuery        { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="QueryStoreQuery")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="query_store_query_text", IsView=true)]
		public partial class QueryStoreQueryText
		{
			[Column("query_text_id"),               NotNull    ] public long    QueryTextID             { get; set; } // bigint
			[Column("query_sql_text"),                 Nullable] public string? QuerySqlText            { get; set; } // nvarchar(0)
			[Column("statement_sql_handle"),           Nullable] public byte[]? StatementSqlHandle      { get; set; } // varbinary(44)
			[Column("is_part_of_encrypted_module"), NotNull    ] public bool    IsPartOfEncryptedModule { get; set; } // bit
			[Column("has_restricted_text"),         NotNull    ] public bool    HasRestrictedText       { get; set; } // bit
		}

		[Table(Schema="sys", Name="query_store_runtime_stats", IsView=true)]
		public partial class QueryStoreRuntimeStats
		{
			[Column("runtime_stats_id"),            NotNull    ] public long           RuntimeStatsID          { get; set; } // bigint
			[Column("plan_id"),                     NotNull    ] public long           PlanID                  { get; set; } // bigint
			[Column("runtime_stats_interval_id"),   NotNull    ] public long           RuntimeStatsIntervalID  { get; set; } // bigint
			[Column("execution_type"),              NotNull    ] public byte           ExecutionType           { get; set; } // tinyint
			[Column("execution_type_desc"),            Nullable] public string?        ExecutionTypeDesc       { get; set; } // nvarchar(60)
			[Column("first_execution_time"),        NotNull    ] public DateTimeOffset FirstExecutionTime      { get; set; } // datetimeoffset(7)
			[Column("last_execution_time"),         NotNull    ] public DateTimeOffset LastExecutionTime       { get; set; } // datetimeoffset(7)
			[Column("count_executions"),            NotNull    ] public long           CountExecutions         { get; set; } // bigint
			[Column("avg_duration"),                   Nullable] public double?        AvgDuration             { get; set; } // float
			[Column("last_duration"),               NotNull    ] public long           LastDuration            { get; set; } // bigint
			[Column("min_duration"),                NotNull    ] public long           MinDuration             { get; set; } // bigint
			[Column("max_duration"),                NotNull    ] public long           MaxDuration             { get; set; } // bigint
			[Column("stdev_duration"),                 Nullable] public double?        StdevDuration           { get; set; } // float
			[Column("avg_cpu_time"),                   Nullable] public double?        AvgCpuTime              { get; set; } // float
			[Column("last_cpu_time"),               NotNull    ] public long           LastCpuTime             { get; set; } // bigint
			[Column("min_cpu_time"),                NotNull    ] public long           MinCpuTime              { get; set; } // bigint
			[Column("max_cpu_time"),                NotNull    ] public long           MaxCpuTime              { get; set; } // bigint
			[Column("stdev_cpu_time"),                 Nullable] public double?        StdevCpuTime            { get; set; } // float
			[Column("avg_logical_io_reads"),           Nullable] public double?        AvgLogicalIoReads       { get; set; } // float
			[Column("last_logical_io_reads"),       NotNull    ] public long           LastLogicalIoReads      { get; set; } // bigint
			[Column("min_logical_io_reads"),        NotNull    ] public long           MinLogicalIoReads       { get; set; } // bigint
			[Column("max_logical_io_reads"),        NotNull    ] public long           MaxLogicalIoReads       { get; set; } // bigint
			[Column("stdev_logical_io_reads"),         Nullable] public double?        StdevLogicalIoReads     { get; set; } // float
			[Column("avg_logical_io_writes"),          Nullable] public double?        AvgLogicalIoWrites      { get; set; } // float
			[Column("last_logical_io_writes"),      NotNull    ] public long           LastLogicalIoWrites     { get; set; } // bigint
			[Column("min_logical_io_writes"),       NotNull    ] public long           MinLogicalIoWrites      { get; set; } // bigint
			[Column("max_logical_io_writes"),       NotNull    ] public long           MaxLogicalIoWrites      { get; set; } // bigint
			[Column("stdev_logical_io_writes"),        Nullable] public double?        StdevLogicalIoWrites    { get; set; } // float
			[Column("avg_physical_io_reads"),          Nullable] public double?        AvgPhysicalIoReads      { get; set; } // float
			[Column("last_physical_io_reads"),      NotNull    ] public long           LastPhysicalIoReads     { get; set; } // bigint
			[Column("min_physical_io_reads"),       NotNull    ] public long           MinPhysicalIoReads      { get; set; } // bigint
			[Column("max_physical_io_reads"),       NotNull    ] public long           MaxPhysicalIoReads      { get; set; } // bigint
			[Column("stdev_physical_io_reads"),        Nullable] public double?        StdevPhysicalIoReads    { get; set; } // float
			[Column("avg_clr_time"),                   Nullable] public double?        AvgClrTime              { get; set; } // float
			[Column("last_clr_time"),               NotNull    ] public long           LastClrTime             { get; set; } // bigint
			[Column("min_clr_time"),                NotNull    ] public long           MinClrTime              { get; set; } // bigint
			[Column("max_clr_time"),                NotNull    ] public long           MaxClrTime              { get; set; } // bigint
			[Column("stdev_clr_time"),                 Nullable] public double?        StdevClrTime            { get; set; } // float
			[Column("avg_dop"),                        Nullable] public double?        AvgDop                  { get; set; } // float
			[Column("last_dop"),                    NotNull    ] public long           LastDop                 { get; set; } // bigint
			[Column("min_dop"),                     NotNull    ] public long           MinDop                  { get; set; } // bigint
			[Column("max_dop"),                     NotNull    ] public long           MaxDop                  { get; set; } // bigint
			[Column("stdev_dop"),                      Nullable] public double?        StdevDop                { get; set; } // float
			[Column("avg_query_max_used_memory"),      Nullable] public double?        AvgQueryMaxUsedMemory   { get; set; } // float
			[Column("last_query_max_used_memory"),  NotNull    ] public long           LastQueryMaxUsedMemory  { get; set; } // bigint
			[Column("min_query_max_used_memory"),   NotNull    ] public long           MinQueryMaxUsedMemory   { get; set; } // bigint
			[Column("max_query_max_used_memory"),   NotNull    ] public long           MaxQueryMaxUsedMemory   { get; set; } // bigint
			[Column("stdev_query_max_used_memory"),    Nullable] public double?        StdevQueryMaxUsedMemory { get; set; } // float
			[Column("avg_rowcount"),                   Nullable] public double?        AvgRowcount             { get; set; } // float
			[Column("last_rowcount"),               NotNull    ] public long           LastRowcount            { get; set; } // bigint
			[Column("min_rowcount"),                NotNull    ] public long           MinRowcount             { get; set; } // bigint
			[Column("max_rowcount"),                NotNull    ] public long           MaxRowcount             { get; set; } // bigint
			[Column("stdev_rowcount"),                 Nullable] public double?        StdevRowcount           { get; set; } // float
			[Column("avg_num_physical_io_reads"),      Nullable] public double?        AvgNumPhysicalIoReads   { get; set; } // float
			[Column("last_num_physical_io_reads"),     Nullable] public long?          LastNumPhysicalIoReads  { get; set; } // bigint
			[Column("min_num_physical_io_reads"),      Nullable] public long?          MinNumPhysicalIoReads   { get; set; } // bigint
			[Column("max_num_physical_io_reads"),      Nullable] public long?          MaxNumPhysicalIoReads   { get; set; } // bigint
			[Column("stdev_num_physical_io_reads"),    Nullable] public double?        StdevNumPhysicalIoReads { get; set; } // float
			[Column("avg_log_bytes_used"),             Nullable] public double?        AvgLogBytesUsed         { get; set; } // float
			[Column("last_log_bytes_used"),            Nullable] public long?          LastLogBytesUsed        { get; set; } // bigint
			[Column("min_log_bytes_used"),             Nullable] public long?          MinLogBytesUsed         { get; set; } // bigint
			[Column("max_log_bytes_used"),             Nullable] public long?          MaxLogBytesUsed         { get; set; } // bigint
			[Column("stdev_log_bytes_used"),           Nullable] public double?        StdevLogBytesUsed       { get; set; } // float
			[Column("avg_tempdb_space_used"),          Nullable] public double?        AvgTempdbSpaceUsed      { get; set; } // float
			[Column("last_tempdb_space_used"),         Nullable] public long?          LastTempdbSpaceUsed     { get; set; } // bigint
			[Column("min_tempdb_space_used"),          Nullable] public long?          MinTempdbSpaceUsed      { get; set; } // bigint
			[Column("max_tempdb_space_used"),          Nullable] public long?          MaxTempdbSpaceUsed      { get; set; } // bigint
			[Column("stdev_tempdb_space_used"),        Nullable] public double?        StdevTempdbSpaceUsed    { get; set; } // float
		}

		[Table(Schema="sys", Name="query_store_runtime_stats_interval", IsView=true)]
		public partial class QueryStoreRuntimeStatsInterval
		{
			[Column("runtime_stats_interval_id"), NotNull    ] public long           RuntimeStatsIntervalID { get; set; } // bigint
			[Column("start_time"),                NotNull    ] public DateTimeOffset StartTime              { get; set; } // datetimeoffset(7)
			[Column("end_time"),                  NotNull    ] public DateTimeOffset EndTime                { get; set; } // datetimeoffset(7)
			[Column("comment"),                      Nullable] public string?        Comment                { get; set; } // nvarchar(0)
		}

		[Table(Schema="sys", Name="query_store_wait_stats", IsView=true)]
		public partial class QueryStoreWaitStats
		{
			[Column("wait_stats_id"),             NotNull    ] public long    WaitStatsID            { get; set; } // bigint
			[Column("plan_id"),                   NotNull    ] public long    PlanID                 { get; set; } // bigint
			[Column("runtime_stats_interval_id"), NotNull    ] public long    RuntimeStatsIntervalID { get; set; } // bigint
			[Column("wait_category"),             NotNull    ] public short   WaitCategory           { get; set; } // smallint
			[Column("wait_category_desc"),           Nullable] public string? WaitCategoryDesc       { get; set; } // nvarchar(60)
			[Column("execution_type"),            NotNull    ] public byte    ExecutionType          { get; set; } // tinyint
			[Column("execution_type_desc"),          Nullable] public string? ExecutionTypeDesc      { get; set; } // nvarchar(60)
			[Column("total_query_wait_time_ms"),  NotNull    ] public long    TotalQueryWaitTimeMs   { get; set; } // bigint
			[Column("avg_query_wait_time_ms"),       Nullable] public double? AvgQueryWaitTimeMs     { get; set; } // float
			[Column("last_query_wait_time_ms"),   NotNull    ] public long    LastQueryWaitTimeMs    { get; set; } // bigint
			[Column("min_query_wait_time_ms"),    NotNull    ] public long    MinQueryWaitTimeMs     { get; set; } // bigint
			[Column("max_query_wait_time_ms"),    NotNull    ] public long    MaxQueryWaitTimeMs     { get; set; } // bigint
			[Column("stdev_query_wait_time_ms"),     Nullable] public double? StdevQueryWaitTimeMs   { get; set; } // float
		}

		[Table(Schema="sys", Name="registered_search_properties", IsView=true)]
		public partial class RegisteredSearchProperties
		{
			[Column("property_list_id"),     NotNull    ] public int     PropertyListID      { get; set; } // int
			[Column("property_id"),          NotNull    ] public int     PropertyID          { get; set; } // int
			[Column("property_name"),        NotNull    ] public string  PropertyName        { get; set; } = null!; // nvarchar(256)
			[Column("property_set_guid"),    NotNull    ] public Guid    PropertySetGuid     { get; set; } // uniqueidentifier
			[Column("property_int_id"),      NotNull    ] public int     PropertyIntID       { get; set; } // int
			[Column("property_description"),    Nullable] public string? PropertyDescription { get; set; } // nvarchar(512)
		}

		[Table(Schema="sys", Name="registered_search_property_lists", IsView=true)]
		public partial class RegisteredSearchPropertyLists
		{
			[Column("property_list_id"), NotNull    ] public int      PropertyListID { get; set; } // int
			[Column("name"),             NotNull    ] public string   Name           { get; set; } = null!; // sysname
			[Column("create_date"),      NotNull    ] public DateTime CreateDate     { get; set; } // datetime
			[Column("modify_date"),      NotNull    ] public DateTime ModifyDate     { get; set; } // datetime
			[Column("principal_id"),        Nullable] public int?     PrincipalID    { get; set; } // int
		}

		[Table(Schema="sys", Name="remote_data_archive_databases", IsView=true)]
		public partial class RemoteDataArchiveDatabases
		{
			[Column("remote_database_id"),        NotNull    ] public int    RemoteDatabaseID        { get; set; } // int
			[Column("remote_database_name"),      NotNull    ] public string RemoteDatabaseName      { get; set; } = null!; // sysname
			[Column("data_source_id"),            NotNull    ] public int    DataSourceID            { get; set; } // int
			[Column("federated_service_account"),    Nullable] public bool?  FederatedServiceAccount { get; set; } // bit
		}

		[Table(Schema="sys", Name="remote_data_archive_tables", IsView=true)]
		public partial class RemoteDataArchiveTables
		{
			[Column("object_id"),                NotNull    ] public int     ObjectID               { get; set; } // int
			[Column("remote_database_id"),       NotNull    ] public int     RemoteDatabaseID       { get; set; } // int
			[Column("remote_table_name"),           Nullable] public string? RemoteTableName        { get; set; } // sysname
			[Column("filter_predicate"),            Nullable] public string? FilterPredicate        { get; set; } // nvarchar(0)
			[Column("migration_direction"),         Nullable] public byte?   MigrationDirection     { get; set; } // tinyint
			[Column("migration_direction_desc"),    Nullable] public string? MigrationDirectionDesc { get; set; } // nvarchar(60)
			[Column("is_migration_paused"),         Nullable] public bool?   IsMigrationPaused      { get; set; } // bit
			[Column("is_reconciled"),               Nullable] public bool?   IsReconciled           { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="RemoteDataArchiveTables")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="remote_logins", IsView=true)]
		public partial class RemoteLogins
		{
			[Column("server_id"),          NotNull    ] public int      ServerID         { get; set; } // int
			[Column("remote_name"),           Nullable] public string?  RemoteName       { get; set; } // sysname
			[Column("local_principal_id"),    Nullable] public int?     LocalPrincipalID { get; set; } // int
			[Column("modify_date"),        NotNull    ] public DateTime ModifyDate       { get; set; } // datetime
		}

		[Table(Schema="sys", Name="remote_service_bindings", IsView=true)]
		public partial class RemoteServiceBindings
		{
			[Column("name"),                      NotNull    ] public string  Name                   { get; set; } = null!; // sysname
			[Column("remote_service_binding_id"), NotNull    ] public int     RemoteServiceBindingID { get; set; } // int
			[Column("principal_id"),                 Nullable] public int?    PrincipalID            { get; set; } // int
			[Column("remote_service_name"),          Nullable] public string? RemoteServiceName      { get; set; } // nvarchar(256)
			[Column("service_contract_id"),       NotNull    ] public int     ServiceContractID      { get; set; } // int
			[Column("remote_principal_id"),          Nullable] public int?    RemotePrincipalID      { get; set; } // int
			[Column("is_anonymous_on"),           NotNull    ] public bool    IsAnonymousOn          { get; set; } // bit
		}

		[Table(Schema="sys", Name="resource_governor_configuration", IsView=true)]
		public partial class ResourceGovernorConfiguration
		{
			[Column("classifier_function_id"),        NotNull] public int  ClassifierFunctionID      { get; set; } // int
			[Column("is_enabled"),                    NotNull] public bool IsEnabled                 { get; set; } // bit
			[Column("max_outstanding_io_per_volume"), NotNull] public int  MaxOutstandingIoPerVolume { get; set; } // int
		}

		[Table(Schema="sys", Name="resource_governor_external_resource_pool_affinity", IsView=true)]
		public partial class ResourceGovernorExternalResourcePoolAffinity
		{
			[Column("external_pool_id"), NotNull] public int   ExternalPoolID { get; set; } // int
			[Column("processor_group"),  NotNull] public short ProcessorGroup { get; set; } // smallint
			[Column("cpu_mask"),         NotNull] public long  CpuMask        { get; set; } // bigint
		}

		[Table(Schema="sys", Name="resource_governor_external_resource_pools", IsView=true)]
		public partial class ResourceGovernorExternalResourcePools
		{
			[Column("external_pool_id"),   NotNull] public int    ExternalPoolID   { get; set; } // int
			[Column("name"),               NotNull] public string Name             { get; set; } = null!; // sysname
			[Column("max_cpu_percent"),    NotNull] public int    MaxCpuPercent    { get; set; } // int
			[Column("max_memory_percent"), NotNull] public int    MaxMemoryPercent { get; set; } // int
			[Column("max_processes"),      NotNull] public int    MaxProcesses     { get; set; } // int
			[Column("version"),            NotNull] public long   Version          { get; set; } // bigint
		}

		[Table(Schema="sys", Name="resource_governor_resource_pool_affinity", IsView=true)]
		public partial class ResourceGovernorResourcePoolAffinity
		{
			[Column("pool_id"),         NotNull] public int   PoolID         { get; set; } // int
			[Column("processor_group"), NotNull] public short ProcessorGroup { get; set; } // smallint
			[Column("scheduler_mask"),  NotNull] public long  SchedulerMask  { get; set; } // bigint
		}

		[Table(Schema="sys", Name="resource_governor_resource_pools", IsView=true)]
		public partial class ResourceGovernorResourcePools
		{
			[Column("pool_id"),             NotNull] public int    PoolID           { get; set; } // int
			[Column("name"),                NotNull] public string Name             { get; set; } = null!; // sysname
			[Column("min_cpu_percent"),     NotNull] public int    MinCpuPercent    { get; set; } // int
			[Column("max_cpu_percent"),     NotNull] public int    MaxCpuPercent    { get; set; } // int
			[Column("min_memory_percent"),  NotNull] public int    MinMemoryPercent { get; set; } // int
			[Column("max_memory_percent"),  NotNull] public int    MaxMemoryPercent { get; set; } // int
			[Column("cap_cpu_percent"),     NotNull] public int    CapCpuPercent    { get; set; } // int
			[Column("min_iops_per_volume"), NotNull] public int    MinIopsPerVolume { get; set; } // int
			[Column("max_iops_per_volume"), NotNull] public int    MaxIopsPerVolume { get; set; } // int
		}

		[Table(Schema="sys", Name="resource_governor_workload_groups", IsView=true)]
		public partial class ResourceGovernorWorkloadGroups
		{
			[Column("group_id"),                                 NotNull] public int    GroupID                             { get; set; } // int
			[Column("name"),                                     NotNull] public string Name                                { get; set; } = null!; // sysname
			[Column("importance"),                               NotNull] public string Importance                          { get; set; } = null!; // sysname
			[Column("request_max_memory_grant_percent"),         NotNull] public int    RequestMaxMemoryGrantPercent        { get; set; } // int
			[Column("request_max_cpu_time_sec"),                 NotNull] public int    RequestMaxCpuTimeSec                { get; set; } // int
			[Column("request_memory_grant_timeout_sec"),         NotNull] public int    RequestMemoryGrantTimeoutSec        { get; set; } // int
			[Column("max_dop"),                                  NotNull] public int    MaxDop                              { get; set; } // int
			[Column("group_max_requests"),                       NotNull] public int    GroupMaxRequests                    { get; set; } // int
			[Column("pool_id"),                                  NotNull] public int    PoolID                              { get; set; } // int
			[Column("external_pool_id"),                         NotNull] public int    ExternalPoolID                      { get; set; } // int
			[Column("request_max_memory_grant_percent_numeric"), NotNull] public double RequestMaxMemoryGrantPercentNumeric { get; set; } // float
		}

		[Table(Schema="sys", Name="routes", IsView=true)]
		public partial class Routes
		{
			[Column("name"),                NotNull    ] public string    Name              { get; set; } = null!; // sysname
			[Column("route_id"),            NotNull    ] public int       RouteID           { get; set; } // int
			[Column("principal_id"),           Nullable] public int?      PrincipalID       { get; set; } // int
			[Column("remote_service_name"),    Nullable] public string?   RemoteServiceName { get; set; } // nvarchar(256)
			[Column("broker_instance"),        Nullable] public string?   BrokerInstance    { get; set; } // nvarchar(128)
			[Column("lifetime"),               Nullable] public DateTime? Lifetime          { get; set; } // datetime
			[Column("address"),                Nullable] public string?   Address           { get; set; } // nvarchar(256)
			[Column("mirror_address"),         Nullable] public string?   MirrorAddress     { get; set; } // nvarchar(256)
		}

		[Table(Schema="sys", Name="schemas", IsView=true)]
		public partial class Schemas
		{
			[Column("name"),         NotNull    ] public string Name        { get; set; } = null!; // sysname
			[Column("schema_id"),    NotNull    ] public int    SchemaID    { get; set; } // int
			[Column("principal_id"),    Nullable] public int?   PrincipalID { get; set; } // int
		}

		[Table(Schema="sys", Name="securable_classes", IsView=true)]
		public partial class SecurableClasses
		{
			[Column("class_desc"), Nullable] public string? ClassDesc { get; set; } // nvarchar(60)
			[Column("class"),      Nullable] public int?    @class    { get; set; } // int
		}

		[Table(Schema="sys", Name="security_policies", IsView=true)]
		public partial class SecurityPolicies
		{
			[Column("name"),                    NotNull    ] public string   Name                  { get; set; } = null!; // sysname
			[Column("object_id"),               NotNull    ] public int      ObjectID              { get; set; } // int
			[Column("principal_id"),               Nullable] public int?     PrincipalID           { get; set; } // int
			[Column("schema_id"),               NotNull    ] public int      SchemaID              { get; set; } // int
			[Column("parent_object_id"),        NotNull    ] public int      ParentObjectID        { get; set; } // int
			[Column("type"),                       Nullable] public string?  Type                  { get; set; } // char(2)
			[Column("type_desc"),                  Nullable] public string?  TypeDesc              { get; set; } // nvarchar(60)
			[Column("create_date"),             NotNull    ] public DateTime CreateDate            { get; set; } // datetime
			[Column("modify_date"),             NotNull    ] public DateTime ModifyDate            { get; set; } // datetime
			[Column("is_ms_shipped"),           NotNull    ] public bool     IsMsShipped           { get; set; } // bit
			[Column("is_enabled"),              NotNull    ] public bool     IsEnabled             { get; set; } // bit
			[Column("is_not_for_replication"),  NotNull    ] public bool     IsNotForReplication   { get; set; } // bit
			[Column("uses_database_collation"),    Nullable] public bool?    UsesDatabaseCollation { get; set; } // bit
			[Column("is_schema_bound"),         NotNull    ] public bool     IsSchemaBound         { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="SecurityPolicies")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="security_predicates", IsView=true)]
		public partial class SecurityPredicates
		{
			[Column("object_id"),             NotNull    ] public int     ObjectID            { get; set; } // int
			[Column("security_predicate_id"), NotNull    ] public int     SecurityPredicateID { get; set; } // int
			[Column("target_object_id"),      NotNull    ] public int     TargetObjectID      { get; set; } // int
			[Column("predicate_definition"),     Nullable] public string? PredicateDefinition { get; set; } // nvarchar(0)
			[Column("predicate_type"),           Nullable] public int?    PredicateType       { get; set; } // int
			[Column("predicate_type_desc"),      Nullable] public string? PredicateTypeDesc   { get; set; } // nvarchar(60)
			[Column("operation"),                Nullable] public int?    Operation           { get; set; } // int
			[Column("operation_desc"),           Nullable] public string? OperationDesc       { get; set; } // nvarchar(60)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="SecurityPredicates")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="selective_xml_index_namespaces", IsView=true)]
		public partial class SelectiveXmlIndexNamespaces
		{
			[Column("object_id"),      NotNull    ] public int     ObjectID     { get; set; } // int
			[Column("index_id"),       NotNull    ] public int     IndexID      { get; set; } // int
			[Column("is_default_uri"),    Nullable] public bool?   IsDefaultUri { get; set; } // bit
			[Column("uri"),               Nullable] public string? Uri          { get; set; } // nvarchar(4000)
			[Column("prefix"),            Nullable] public string? Prefix       { get; set; } // sysname

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="SelectiveXmlIndexNamespaces")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="sensitivity_classifications", IsView=true)]
		public partial class SensitivityClassifications
		{
			[Column("class"),               NotNull    ] public int     @class            { get; set; } // int
			[Column("class_desc"),          NotNull    ] public string  ClassDesc         { get; set; } = null!; // varchar(16)
			[Column("major_id"),            NotNull    ] public int     MajorID           { get; set; } // int
			[Column("minor_id"),            NotNull    ] public int     MinorID           { get; set; } // int
			[Column("label"),                  Nullable] public object? Label             { get; set; } // sql_variant
			[Column("label_id"),               Nullable] public object? LabelID           { get; set; } // sql_variant
			[Column("information_type"),       Nullable] public object? InformationType   { get; set; } // sql_variant
			[Column("information_type_id"),    Nullable] public object? InformationTypeID { get; set; } // sql_variant
			[Column("rank"),                   Nullable] public object? Rank              { get; set; } // sql_variant
			[Column("rank_desc"),              Nullable] public string? RankDesc          { get; set; } // varchar(8)
		}

		/// <summary>
		/// Contains a row for each sequence object in a database.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-sequences-transact-sql?view=sql-server-ver15'>sys.sequences</a>.
		/// </summary>
		[Table(Schema="sys", Name="sequences", IsView=true)]
		public partial class Sequences
		{
			[Column("name"),                NotNull    ] public string   Name              { get; set; } = null!; // sysname
			[Column("object_id"),           NotNull    ] public int      ObjectID          { get; set; } // int
			[Column("principal_id"),           Nullable] public int?     PrincipalID       { get; set; } // int
			[Column("schema_id"),           NotNull    ] public int      SchemaID          { get; set; } // int
			[Column("parent_object_id"),    NotNull    ] public int      ParentObjectID    { get; set; } // int
			[Column("type"),                   Nullable] public string?  Type              { get; set; } // char(2)
			[Column("type_desc"),              Nullable] public string?  TypeDesc          { get; set; } // nvarchar(60)
			[Column("create_date"),         NotNull    ] public DateTime CreateDate        { get; set; } // datetime
			[Column("modify_date"),         NotNull    ] public DateTime ModifyDate        { get; set; } // datetime
			[Column("is_ms_shipped"),       NotNull    ] public bool     IsMsShipped       { get; set; } // bit
			[Column("is_published"),        NotNull    ] public bool     IsPublished       { get; set; } // bit
			[Column("is_schema_published"), NotNull    ] public bool     IsSchemaPublished { get; set; } // bit
			/// <summary>
			/// The starting value for the sequence object. If the sequence object is restarted by using ALTER SEQUENCE it will restart at this value. When the sequence object cycles it proceeds to the <b>minimum_value</b> or <b>maximum_value</b>, not the <b>start_value</b>.
			/// </summary>
			[Column("start_value"),         NotNull    ] public object   StartValue        { get; set; } = null!; // sql_variant NOT NULL
			/// <summary>
			/// The value that is used to increment the sequence object after each generated value.
			/// </summary>
			[Column("increment"),           NotNull    ] public object   Increment         { get; set; } = null!; // sql_variant NOT NULL
			/// <summary>
			/// The minimum value that can be generated by the sequence object. After this value is reached, the sequence object will either return an error when trying to generate more values or restart if the CYCLE option is specified. If no MINVALUE has been specified, this column returns the minimum value supported by the sequence generator&apos;s data type.
			/// </summary>
			[Column("minimum_value"),       NotNull    ] public object   MinimumValue      { get; set; } = null!; // sql_variant NULL
			/// <summary>
			/// The maximum value that can be generated by the sequence object. After this value is reached the sequence object will either start returning an error when trying to generate more values or restart if the CYCLE option is specified. If no MAXVALUE has been specified this column returns the maximum value supported by the sequence object&apos;s data type.
			/// </summary>
			[Column("maximum_value"),       NotNull    ] public object   MaximumValue      { get; set; } = null!; // sql_variant NULL
			/// <summary>
			/// Returns 0 if NO CYCLE has been specified for the sequence object and 1 if CYCLE has been specified.
			/// </summary>
			[Column("is_cycling"),             Nullable] public bool?    IsCycling         { get; set; } // bit NOT NULL
			/// <summary>
			/// Returns 0 if NO CACHE has been specified for the sequence object and 1 if CACHE has been specified.
			/// </summary>
			[Column("is_cached"),              Nullable] public bool?    IsCached          { get; set; } // bit NOT NULL
			/// <summary>
			/// Returns the specified cache size for the sequence object. This column contains NULL if the sequence was created with the NO CACHE option or if CACHE was specified without specifying a cache size. If the value specified by the cache size is larger than the maximum number of values that can be returned by the sequence object, that unobtainable cache size is still displayed.
			/// </summary>
			[Column("cache_size"),             Nullable] public int?     CacheSize         { get; set; } // int NULL
			/// <summary>
			/// ID of the system type for sequence object&apos;s data type.
			/// </summary>
			[Column("system_type_id"),      NotNull    ] public byte     SystemTypeID      { get; set; } // tinyint NOT NULL
			/// <summary>
			/// ID of the data type for the sequence object as defined by the user.
			/// </summary>
			[Column("user_type_id"),        NotNull    ] public int      UserTypeID        { get; set; } // int NOT NULL
			/// <summary>
			/// Max precision of the data type.
			/// </summary>
			[Column("precision"),           NotNull    ] public byte     Precision         { get; set; } // tinyint NOT NULL
			/// <summary>
			/// Max scale of the type. Scale is returned together with precision to give users complete metadata. Scale is always 0 for sequence objects because only integer types are allowed.
			/// </summary>
			[Column("scale"),                  Nullable] public byte?    Scale             { get; set; } // tinyint NOT NULL
			/// <summary>
			/// The last value obligated. That is, the value returned from the most recent execution of the NEXT VALUE FOR function or the last value from executing the <b>sp_sequence_get_range</b> procedure. Returns the START WITH value if the sequence has never been used.
			/// </summary>
			[Column("current_value"),       NotNull    ] public object   CurrentValue      { get; set; } = null!; // sql_variant NOT NULL
			/// <summary>
			/// 0 indicates that more values can be generated from the sequence. 1 indicates that the sequence object has reached the MAXVALUE parameter and the sequence is not set to CYCLE. The NEXT VALUE FOR function returns an error until the sequence is restarted by using ALTER SEQUENCE.
			/// </summary>
			[Column("is_exhausted"),        NotNull    ] public bool     IsExhausted       { get; set; } // bit NOT NULL
			/// <summary>
			/// Returns the last value generated by the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/functions/next-value-for-transact-sql?view=sql-server-ver15'>Next Value For</a> function. Applies to SQL Server 2017 and later.
			/// </summary>
			[Column("last_used_value"),        Nullable] public object?  LastUsedValue     { get; set; } // sql_variant NULL

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="Sequences")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains one row for each assembly module for the server-level triggers of type TA. This view maps assembly triggers to the underlying CLR implementation. You can join this relation to <b>sys.server_triggers</b>. The assembly must be loaded into the <b>master</b> database. The tuple (object_id) is the key for the relation.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-server-assembly-modules-transact-sql?view=sql-server-ver15'>sys.server_assembly_modules</a>.
		/// </summary>
		[Table(Schema="sys", Name="server_assembly_modules", IsView=true)]
		public partial class ServerAssemblyModules
		{
			/// <summary>
			/// This is a FOREIGN KEY reference back to the object upon which this assembly module is defined.
			/// </summary>
			[Column("object_id"),               NotNull    ] public int     ObjectID             { get; set; } // int
			/// <summary>
			/// ID of the assembly from which this module was created. The assembly must be loaded into the master database.
			/// </summary>
			[Column("assembly_id"),             NotNull    ] public int     AssemblyID           { get; set; } // int
			/// <summary>
			/// Name of the class within assembly that defines this module.
			/// </summary>
			[Column("assembly_class"),             Nullable] public string? AssemblyClass        { get; set; } // sysname
			/// <summary>
			/// Name of the method within the class that defines this module. Is NULL for aggregate functions (AF).
			/// </summary>
			[Column("assembly_method"),            Nullable] public string? AssemblyMethod       { get; set; } // sysname
			/// <summary>
			/// ID of the EXECUTE AS server principal.<br/> NULL by default or if EXECUTE AS CALLER.<br/> ID of the specified principal if EXECUTE AS SELF EXECUTE AS &lt;principal&gt;.<br/> -2 = EXECUTE AS OWNER.
			/// </summary>
			[Column("execute_as_principal_id"),    Nullable] public int?    ExecuteAsPrincipalID { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="ServerAssemblyModules")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="server_audits", IsView=true)]
		public partial class ServerAudits
		{
			[Column("audit_id"),         NotNull    ] public int      AuditID        { get; set; } // int
			[Column("name"),             NotNull    ] public string   Name           { get; set; } = null!; // sysname
			[Column("audit_guid"),          Nullable] public Guid?    AuditGuid      { get; set; } // uniqueidentifier
			[Column("create_date"),      NotNull    ] public DateTime CreateDate     { get; set; } // datetime
			[Column("modify_date"),      NotNull    ] public DateTime ModifyDate     { get; set; } // datetime
			[Column("principal_id"),        Nullable] public int?     PrincipalID    { get; set; } // int
			[Column("type"),             NotNull    ] public string   Type           { get; set; } = null!; // char(2)
			[Column("type_desc"),           Nullable] public string?  TypeDesc       { get; set; } // nvarchar(60)
			[Column("on_failure"),          Nullable] public byte?    OnFailure      { get; set; } // tinyint
			[Column("on_failure_desc"),     Nullable] public string?  OnFailureDesc  { get; set; } // nvarchar(60)
			[Column("is_state_enabled"),    Nullable] public bool?    IsStateEnabled { get; set; } // bit
			[Column("queue_delay"),         Nullable] public int?     QueueDelay     { get; set; } // int
			[Column("predicate"),           Nullable] public string?  Predicate      { get; set; } // nvarchar(3000)
		}

		[Table(Schema="sys", Name="server_audit_specification_details", IsView=true)]
		public partial class ServerAuditSpecificationDetails
		{
			[Column("server_specification_id"), NotNull    ] public int     ServerSpecificationID { get; set; } // int
			[Column("audit_action_id"),         NotNull    ] public string  AuditActionID         { get; set; } = null!; // char(4)
			[Column("audit_action_name"),          Nullable] public string? AuditActionName       { get; set; } // nvarchar(60)
			[Column("class"),                   NotNull    ] public byte    @class                { get; set; } // tinyint
			[Column("class_desc"),                 Nullable] public string? ClassDesc             { get; set; } // nvarchar(60)
			[Column("major_id"),                NotNull    ] public int     MajorID               { get; set; } // int
			[Column("minor_id"),                NotNull    ] public int     MinorID               { get; set; } // int
			[Column("audited_principal_id"),    NotNull    ] public int     AuditedPrincipalID    { get; set; } // int
			[Column("audited_result"),             Nullable] public string? AuditedResult         { get; set; } // nvarchar(60)
			[Column("is_group"),                   Nullable] public bool?   IsGroup               { get; set; } // bit
		}

		[Table(Schema="sys", Name="server_audit_specifications", IsView=true)]
		public partial class ServerAuditSpecifications
		{
			[Column("server_specification_id"), NotNull    ] public int      ServerSpecificationID { get; set; } // int
			[Column("name"),                    NotNull    ] public string   Name                  { get; set; } = null!; // sysname
			[Column("create_date"),             NotNull    ] public DateTime CreateDate            { get; set; } // datetime
			[Column("modify_date"),             NotNull    ] public DateTime ModifyDate            { get; set; } // datetime
			[Column("audit_guid"),                 Nullable] public Guid?    AuditGuid             { get; set; } // uniqueidentifier
			[Column("is_state_enabled"),           Nullable] public bool?    IsStateEnabled        { get; set; } // bit
		}

		/// <summary>
		/// Returns a row for each server-level event notification object.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-server-event-notifications-transact-sql?view=sql-server-ver15'>sys.server_event_notifications</a>.
		/// </summary>
		[Table(Schema="sys", Name="server_event_notifications", IsView=true)]
		public partial class ServerEventNotifications
		{
			/// <summary>
			/// Server event notification name. Is unique across all server-level event notifications.
			/// </summary>
			[Column("name"),              NotNull    ] public string   Name            { get; set; } = null!; // sysname
			/// <summary>
			/// Object identification number. Is unique within the <b>master</b> database.
			/// </summary>
			[Column("object_id"),         NotNull    ] public int      ObjectID        { get; set; } // int
			/// <summary>
			/// Class of parent. Is always 100 = Server.
			/// </summary>
			[Column("parent_class"),      NotNull    ] public byte     ParentClass     { get; set; } // tinyint
			/// <summary>
			/// Description of class of parent. Is always SERVER.
			/// </summary>
			[Column("parent_class_desc"),    Nullable] public string?  ParentClassDesc { get; set; } // nvarchar(60)
			/// <summary>
			/// Is always 0.
			/// </summary>
			[Column("parent_id"),         NotNull    ] public int      ParentID        { get; set; } // int
			/// <summary>
			/// Date created.
			/// </summary>
			[Column("create_date"),       NotNull    ] public DateTime CreateDate      { get; set; } // datetime
			/// <summary>
			/// Date object was last modified by using an ALTER statement.
			/// </summary>
			[Column("modify_date"),       NotNull    ] public DateTime ModifyDate      { get; set; } // datetime
			/// <summary>
			/// Name of the target service to which the notification is sent.
			/// </summary>
			[Column("service_name"),         Nullable] public string?  ServiceName     { get; set; } // nvarchar(256)
			/// <summary>
			/// The service broker where the named target service is defined.
			/// </summary>
			[Column("broker_instance"),      Nullable] public string?  BrokerInstance  { get; set; } // nvarchar(128)
			/// <summary>
			/// SID of the login executing the statement that creates the event notification. NULL if WITH FAN_IN is not specified in the event notification definition.
			/// </summary>
			[Column("creator_sid"),          Nullable] public byte[]?  CreatorSid      { get; set; } // varbinary(85)
			/// <summary>
			/// ID of the server principal that owns this.
			/// </summary>
			[Column("principal_id"),         Nullable] public int?     PrincipalID     { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="ServerEventNotifications")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains one row for each event for which a server-level event-notification or server-level DDL trigger fires. The columns <b>object_id</b> and <b>type</b> uniquely identify the server event.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-server-events-transact-sql?view=sql-server-ver15'>sys.server_events</a>.
		/// </summary>
		[Table(Schema="sys", Name="server_events", IsView=true)]
		public partial class ServerEvents
		{
			/// <summary>
			/// ID of the server-level event notification or server-level DDL trigger to fire.
			/// </summary>
			[Column("object_id"),             NotNull    ] public int     ObjectID           { get; set; } // int
			/// <summary>
			/// Type of the event that causes the event notification or DDL trigger to fire.
			/// </summary>
			[Column("type"),                  NotNull    ] public int     Type               { get; set; } // int
			/// <summary>
			/// Description of the event that causes the DDL trigger or event notification to fire.
			/// </summary>
			[Column("type_desc"),             NotNull    ] public string  TypeDesc           { get; set; } = null!; // nvarchar(60)
			[Column("is_trigger_event"),         Nullable] public bool?   IsTriggerEvent     { get; set; } // bit
			/// <summary>
			/// Event group on which the trigger or event notification is created, or null if not created on an event group.
			/// </summary>
			[Column("event_group_type"),         Nullable] public int?    EventGroupType     { get; set; } // int
			/// <summary>
			/// Description of the event group on which the trigger or event notification is created, or null if not created on an event group
			/// </summary>
			[Column("event_group_type_desc"),    Nullable] public string? EventGroupTypeDesc { get; set; } // nvarchar(60)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="ServerEvents")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="server_event_session_actions", IsView=true)]
		public partial class ServerEventSessionActions
		{
			[Column("event_session_id"), NotNull    ] public int     EventSessionID { get; set; } // int
			[Column("event_id"),         NotNull    ] public int     EventID        { get; set; } // int
			[Column("name"),                Nullable] public string? Name           { get; set; } // sysname
			[Column("package"),             Nullable] public string? Package        { get; set; } // nvarchar(128)
			[Column("module"),              Nullable] public string? Module         { get; set; } // nvarchar(128)
		}

		[Table(Schema="sys", Name="server_event_session_events", IsView=true)]
		public partial class ServerEventSessionEvents
		{
			[Column("event_session_id"), NotNull    ] public int     EventSessionID { get; set; } // int
			[Column("event_id"),         NotNull    ] public int     EventID        { get; set; } // int
			[Column("name"),                Nullable] public string? Name           { get; set; } // sysname
			[Column("package"),             Nullable] public string? Package        { get; set; } // nvarchar(128)
			[Column("module"),              Nullable] public string? Module         { get; set; } // nvarchar(128)
			[Column("predicate"),           Nullable] public string? Predicate      { get; set; } // nvarchar(3000)
			[Column("predicate_xml"),       Nullable] public string? PredicateXml   { get; set; } // nvarchar(0)
		}

		[Table(Schema="sys", Name="server_event_session_fields", IsView=true)]
		public partial class ServerEventSessionFields
		{
			[Column("event_session_id"), NotNull    ] public int     EventSessionID { get; set; } // int
			[Column("object_id"),        NotNull    ] public int     ObjectID       { get; set; } // int
			[Column("name"),                Nullable] public string? Name           { get; set; } // sysname
			[Column("value"),               Nullable] public object? Value          { get; set; } // sql_variant

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="ServerEventSessionFields")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="server_event_sessions", IsView=true)]
		public partial class ServerEventSessions
		{
			[Column("event_session_id"),           NotNull    ] public int     EventSessionID          { get; set; } // int
			[Column("name"),                          Nullable] public string? Name                    { get; set; } // nvarchar(128)
			[Column("event_retention_mode"),          Nullable] public string? EventRetentionMode      { get; set; } // char(1)
			[Column("event_retention_mode_desc"),     Nullable] public string? EventRetentionModeDesc  { get; set; } // nvarchar(60)
			[Column("max_dispatch_latency"),          Nullable] public int?    MaxDispatchLatency      { get; set; } // int
			[Column("max_memory"),                    Nullable] public int?    MaxMemory               { get; set; } // int
			[Column("max_event_size"),                Nullable] public int?    MaxEventSize            { get; set; } // int
			[Column("memory_partition_mode"),         Nullable] public string? MemoryPartitionMode     { get; set; } // char(1)
			[Column("memory_partition_mode_desc"),    Nullable] public string? MemoryPartitionModeDesc { get; set; } // nvarchar(60)
			[Column("track_causality"),               Nullable] public bool?   TrackCausality          { get; set; } // bit
			[Column("startup_state"),                 Nullable] public bool?   StartupState            { get; set; } // bit
			[Column("has_long_running_target"),       Nullable] public bool?   HasLongRunningTarget    { get; set; } // bit
		}

		[Table(Schema="sys", Name="server_event_session_targets", IsView=true)]
		public partial class ServerEventSessionTargets
		{
			[Column("event_session_id"), NotNull    ] public int     EventSessionID { get; set; } // int
			[Column("target_id"),        NotNull    ] public int     TargetID       { get; set; } // int
			[Column("name"),                Nullable] public string? Name           { get; set; } // sysname
			[Column("package"),             Nullable] public string? Package        { get; set; } // nvarchar(128)
			[Column("module"),              Nullable] public string? Module         { get; set; } // nvarchar(128)
		}

		[Table(Schema="sys", Name="server_file_audits", IsView=true)]
		public partial class ServerFileAudits
		{
			[Column("audit_id"),           NotNull    ] public int      AuditID          { get; set; } // int
			[Column("name"),               NotNull    ] public string   Name             { get; set; } = null!; // sysname
			[Column("audit_guid"),            Nullable] public Guid?    AuditGuid        { get; set; } // uniqueidentifier
			[Column("create_date"),        NotNull    ] public DateTime CreateDate       { get; set; } // datetime
			[Column("modify_date"),        NotNull    ] public DateTime ModifyDate       { get; set; } // datetime
			[Column("principal_id"),          Nullable] public int?     PrincipalID      { get; set; } // int
			[Column("type"),               NotNull    ] public string   Type             { get; set; } = null!; // char(2)
			[Column("type_desc"),             Nullable] public string?  TypeDesc         { get; set; } // nvarchar(60)
			[Column("on_failure"),            Nullable] public byte?    OnFailure        { get; set; } // tinyint
			[Column("on_failure_desc"),       Nullable] public string?  OnFailureDesc    { get; set; } // nvarchar(60)
			[Column("is_state_enabled"),      Nullable] public bool?    IsStateEnabled   { get; set; } // bit
			[Column("queue_delay"),           Nullable] public int?     QueueDelay       { get; set; } // int
			[Column("predicate"),             Nullable] public string?  Predicate        { get; set; } // nvarchar(3000)
			[Column("max_file_size"),         Nullable] public long?    MaxFileSize      { get; set; } // bigint
			[Column("max_rollover_files"),    Nullable] public int?     MaxRolloverFiles { get; set; } // int
			[Column("max_files"),             Nullable] public int?     MaxFiles         { get; set; } // int
			[Column("reserve_disk_space"),    Nullable] public bool?    ReserveDiskSpace { get; set; } // bit
			[Column("log_file_path"),         Nullable] public string?  LogFilePath      { get; set; } // nvarchar(260)
			[Column("log_file_name"),         Nullable] public string?  LogFileName      { get; set; } // nvarchar(260)
			[Column("retention_days"),        Nullable] public int?     RetentionDays    { get; set; } // int
		}

		[Table(Schema="sys", Name="server_memory_optimized_hybrid_buffer_pool_configuration", IsView=true)]
		public partial class ServerMemoryOptimizedHybridBufferPoolConfiguration
		{
			[Column("is_configured"), Nullable] public object? IsConfigured { get; set; } // sql_variant
			[Column("is_enabled"),    Nullable] public object? IsEnabled    { get; set; } // sql_variant
		}

		[Table(Schema="sys", Name="server_permissions", IsView=true)]
		public partial class ServerPermissions
		{
			[Column("class"),                NotNull    ] public byte    @class             { get; set; } // tinyint
			[Column("class_desc"),              Nullable] public string? ClassDesc          { get; set; } // nvarchar(60)
			[Column("major_id"),             NotNull    ] public int     MajorID            { get; set; } // int
			[Column("minor_id"),             NotNull    ] public int     MinorID            { get; set; } // int
			[Column("grantee_principal_id"), NotNull    ] public int     GranteePrincipalID { get; set; } // int
			[Column("grantor_principal_id"), NotNull    ] public int     GrantorPrincipalID { get; set; } // int
			[Column("type"),                 NotNull    ] public string  Type               { get; set; } = null!; // char(4)
			[Column("permission_name"),         Nullable] public string? PermissionName     { get; set; } // nvarchar(128)
			[Column("state"),                NotNull    ] public string  State              { get; set; } = null!; // char(1)
			[Column("state_desc"),              Nullable] public string? StateDesc          { get; set; } // nvarchar(60)
		}

		[Table(Schema="sys", Name="server_principal_credentials", IsView=true)]
		public partial class ServerPrincipalCredentials
		{
			[Column("principal_id"),  NotNull] public int PrincipalID  { get; set; } // int
			[Column("credential_id"), NotNull] public int CredentialID { get; set; } // int
		}

		[Table(Schema="sys", Name="server_principals", IsView=true)]
		public partial class ServerPrincipals
		{
			[Column("name"),                  NotNull    ] public string   Name                { get; set; } = null!; // sysname
			[Column("principal_id"),          NotNull    ] public int      PrincipalID         { get; set; } // int
			[Column("sid"),                      Nullable] public byte[]?  Sid                 { get; set; } // varbinary(85)
			[Column("type"),                  NotNull    ] public string   Type                { get; set; } = null!; // char(1)
			[Column("type_desc"),                Nullable] public string?  TypeDesc            { get; set; } // nvarchar(60)
			[Column("is_disabled"),              Nullable] public bool?    IsDisabled          { get; set; } // bit
			[Column("create_date"),           NotNull    ] public DateTime CreateDate          { get; set; } // datetime
			[Column("modify_date"),           NotNull    ] public DateTime ModifyDate          { get; set; } // datetime
			[Column("default_database_name"),    Nullable] public string?  DefaultDatabaseName { get; set; } // sysname
			[Column("default_language_name"),    Nullable] public string?  DefaultLanguageName { get; set; } // sysname
			[Column("credential_id"),            Nullable] public int?     CredentialID        { get; set; } // int
			[Column("owning_principal_id"),      Nullable] public int?     OwningPrincipalID   { get; set; } // int
			[Column("is_fixed_role"),         NotNull    ] public bool     IsFixedRole         { get; set; } // bit
		}

		[Table(Schema="sys", Name="server_role_members", IsView=true)]
		public partial class ServerRoleMembers
		{
			[Column("role_principal_id"),   NotNull] public int RolePrincipalID   { get; set; } // int
			[Column("member_principal_id"), NotNull] public int MemberPrincipalID { get; set; } // int
		}

		[Table(Schema="sys", Name="servers", IsView=true)]
		public partial class Servers
		{
			[Column("server_id"),                                    NotNull    ] public int      ServerID                                { get; set; } // int
			[Column("name"),                                         NotNull    ] public string   Name                                    { get; set; } = null!; // sysname
			[Column("product"),                                      NotNull    ] public string   Product                                 { get; set; } = null!; // sysname
			[Column("provider"),                                     NotNull    ] public string   Provider                                { get; set; } = null!; // sysname
			[Column("data_source"),                                     Nullable] public string?  DataSource                              { get; set; } // nvarchar(4000)
			[Column("location"),                                        Nullable] public string?  Location                                { get; set; } // nvarchar(4000)
			[Column("provider_string"),                                 Nullable] public string?  ProviderString                          { get; set; } // nvarchar(4000)
			[Column("catalog"),                                         Nullable] public string?  Catalog                                 { get; set; } // sysname
			[Column("connect_timeout"),                                 Nullable] public int?     ConnectTimeout                          { get; set; } // int
			[Column("query_timeout"),                                   Nullable] public int?     QueryTimeout                            { get; set; } // int
			[Column("is_linked"),                                    NotNull    ] public bool     IsLinked                                { get; set; } // bit
			[Column("is_remote_login_enabled"),                      NotNull    ] public bool     IsRemoteLoginEnabled                    { get; set; } // bit
			[Column("is_rpc_out_enabled"),                           NotNull    ] public bool     IsRpcOutEnabled                         { get; set; } // bit
			[Column("is_data_access_enabled"),                       NotNull    ] public bool     IsDataAccessEnabled                     { get; set; } // bit
			[Column("is_collation_compatible"),                      NotNull    ] public bool     IsCollationCompatible                   { get; set; } // bit
			[Column("uses_remote_collation"),                        NotNull    ] public bool     UsesRemoteCollation                     { get; set; } // bit
			[Column("collation_name"),                                  Nullable] public string?  CollationName                           { get; set; } // sysname
			[Column("lazy_schema_validation"),                       NotNull    ] public bool     LazySchemaValidation                    { get; set; } // bit
			[Column("is_system"),                                    NotNull    ] public bool     IsSystem                                { get; set; } // bit
			[Column("is_publisher"),                                 NotNull    ] public bool     IsPublisher                             { get; set; } // bit
			[Column("is_subscriber"),                                   Nullable] public bool?    IsSubscriber                            { get; set; } // bit
			[Column("is_distributor"),                                  Nullable] public bool?    IsDistributor                           { get; set; } // bit
			[Column("is_nonsql_subscriber"),                            Nullable] public bool?    IsNonsqlSubscriber                      { get; set; } // bit
			[Column("is_remote_proc_transaction_promotion_enabled"),    Nullable] public bool?    IsRemoteProcTransactionPromotionEnabled { get; set; } // bit
			[Column("modify_date"),                                  NotNull    ] public DateTime ModifyDate                              { get; set; } // datetime
			[Column("is_rda_server"),                                   Nullable] public bool?    IsRdaServer                             { get; set; } // bit
		}

		/// <summary>
		/// Contains the set of SQL modules for server-level triggers of type TR. You can join this relation to sys.server_triggers. The tuple (object_id) is the key of the relation.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-server-sql-modules-transact-sql?view=sql-server-ver15'>sys.server_sql_modules</a>.
		/// </summary>
		[Table(Schema="sys", Name="server_sql_modules", IsView=true)]
		public partial class ServerSqlModules
		{
			/// <summary>
			/// This is a FOREIGN KEY reference back to the server-level trigger where this module is defined.
			/// </summary>
			[Column("object_id"),               NotNull    ] public int     ObjectID             { get; set; } // int
			/// <summary>
			/// SQL text that defines this module.<br/> NULL = Encrypted.
			/// </summary>
			[Column("definition"),                 Nullable] public string? Definition           { get; set; } // nvarchar(max)
			/// <summary>
			/// Module was created with ANSI NULLS set option set to ON.
			/// </summary>
			[Column("uses_ansi_nulls"),            Nullable] public bool?   UsesAnsiNulls        { get; set; } // bit
			/// <summary>
			/// Module was created with QUOTED IDENTIFIER set option set to ON.
			/// </summary>
			[Column("uses_quoted_identifier"),     Nullable] public bool?   UsesQuotedIdentifier { get; set; } // bit
			/// <summary>
			/// ID of the EXECUTE AS server principal.<br/> NULL by default or if EXECUTE AS CALLER<br/> ID of the specified principal if EXECUTE AS SELF EXECUTE AS principal-2 = EXECUTE AS OWNER.
			/// </summary>
			[Column("execute_as_principal_id"),    Nullable] public int?    ExecuteAsPrincipalID { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="ServerSqlModules")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains one row for each event for which a server-level (synchronous) trigger fires.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-server-trigger-events-transact-sql?view=sql-server-ver15'>sys.server_trigger_events</a>.
		/// </summary>
		[Table(Schema="sys", Name="server_trigger_events", IsView=true)]
		public partial class ServerTriggerEvents
		{
			[Column("object_id"),             NotNull    ] public int     ObjectID           { get; set; } // int
			[Column("type"),                  NotNull    ] public int     Type               { get; set; } // int
			[Column("type_desc"),             NotNull    ] public string  TypeDesc           { get; set; } = null!; // nvarchar(128)
			[Column("is_trigger_event"),         Nullable] public bool?   IsTriggerEvent     { get; set; } // bit
			/// <summary>
			/// Trigger is marked to be the first to fire for this event.
			/// </summary>
			[Column("is_first"),                 Nullable] public bool?   IsFirst            { get; set; } // bit
			/// <summary>
			/// Trigger is marked to be the last to fire for this event.
			/// </summary>
			[Column("is_last"),                  Nullable] public bool?   IsLast             { get; set; } // bit
			[Column("event_group_type"),         Nullable] public int?    EventGroupType     { get; set; } // int
			[Column("event_group_type_desc"),    Nullable] public string? EventGroupTypeDesc { get; set; } // nvarchar(128)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="ServerTriggerEvents")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains the set of all server-level DDL triggers with object_type of TR or TA. In the case of CLR triggers, the assembly must be loaded into the <b>master</b> database. All server-level DDL trigger names exist in a single, global scope.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-server-triggers-transact-sql?view=sql-server-ver15'>sys.server_triggers</a>.
		/// </summary>
		[Table(Schema="sys", Name="server_triggers", IsView=true)]
		public partial class ServerTriggers
		{
			/// <summary>
			/// Name of the trigger.
			/// </summary>
			[Column("name"),              NotNull    ] public string   Name            { get; set; } = null!; // sysname
			/// <summary>
			/// ID of the object.
			/// </summary>
			[Column("object_id"),         NotNull    ] public int      ObjectID        { get; set; } // int
			/// <summary>
			/// Class of parent. Is always:<br/> 100 = Server
			/// </summary>
			[Column("parent_class"),      NotNull    ] public byte     ParentClass     { get; set; } // tinyint
			/// <summary>
			/// Description of class of parent. Is always:<br/> SERVER.
			/// </summary>
			[Column("parent_class_desc"),    Nullable] public string?  ParentClassDesc { get; set; } // nvarchar(60)
			/// <summary>
			/// Always 0 for triggers on the SERVER.
			/// </summary>
			[Column("parent_id"),         NotNull    ] public int      ParentID        { get; set; } // int
			/// <summary>
			/// Object type:<br/> TA = Assembly (CLR) trigger<br/> TR = SQL trigger
			/// </summary>
			[Column("type"),              NotNull    ] public string   Type            { get; set; } = null!; // char(2)
			/// <summary>
			/// Description of the class of the object type.<br/> CLR_TRIGGER<br/> SQL_TRIGGER
			/// </summary>
			[Column("type_desc"),            Nullable] public string?  TypeDesc        { get; set; } // nvarchar(60)
			/// <summary>
			/// Date the trigger was created.
			/// </summary>
			[Column("create_date"),       NotNull    ] public DateTime CreateDate      { get; set; } // datetime
			/// <summary>
			/// Date the trigger was last modified by using an ALTER statement.
			/// </summary>
			[Column("modify_date"),       NotNull    ] public DateTime ModifyDate      { get; set; } // datetime
			/// <summary>
			/// Trigger created on behalf of the user by an internal SQL Server component.
			/// </summary>
			[Column("is_ms_shipped"),     NotNull    ] public bool     IsMsShipped     { get; set; } // bit
			/// <summary>
			/// 1 = Trigger is disabled.
			/// </summary>
			[Column("is_disabled"),       NotNull    ] public bool     IsDisabled      { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="ServerTriggers")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="service_broker_endpoints", IsView=true)]
		public partial class ServiceBrokerEndpoints
		{
			[Column("name"),                          NotNull    ] public string  Name                       { get; set; } = null!; // sysname
			[Column("endpoint_id"),                   NotNull    ] public int     EndpointID                 { get; set; } // int
			[Column("principal_id"),                     Nullable] public int?    PrincipalID                { get; set; } // int
			[Column("protocol"),                      NotNull    ] public byte    Protocol                   { get; set; } // tinyint
			[Column("protocol_desc"),                    Nullable] public string? ProtocolDesc               { get; set; } // nvarchar(60)
			[Column("type"),                          NotNull    ] public byte    Type                       { get; set; } // tinyint
			[Column("type_desc"),                        Nullable] public string? TypeDesc                   { get; set; } // nvarchar(60)
			[Column("state"),                            Nullable] public byte?   State                      { get; set; } // tinyint
			[Column("state_desc"),                       Nullable] public string? StateDesc                  { get; set; } // nvarchar(60)
			[Column("is_admin_endpoint"),             NotNull    ] public bool    IsAdminEndpoint            { get; set; } // bit
			[Column("is_message_forwarding_enabled"), NotNull    ] public bool    IsMessageForwardingEnabled { get; set; } // bit
			[Column("message_forwarding_size"),       NotNull    ] public int     MessageForwardingSize      { get; set; } // int
			[Column("connection_auth"),               NotNull    ] public byte    ConnectionAuth             { get; set; } // tinyint
			[Column("connection_auth_desc"),             Nullable] public string? ConnectionAuthDesc         { get; set; } // nvarchar(60)
			[Column("certificate_id"),                NotNull    ] public int     CertificateID              { get; set; } // int
			[Column("encryption_algorithm"),          NotNull    ] public byte    EncryptionAlgorithm        { get; set; } // tinyint
			[Column("encryption_algorithm_desc"),        Nullable] public string? EncryptionAlgorithmDesc    { get; set; } // nvarchar(60)
		}

		[Table(Schema="sys", Name="service_contract_message_usages", IsView=true)]
		public partial class ServiceContractMessageUsages
		{
			[Column("service_contract_id"),  NotNull] public int  ServiceContractID { get; set; } // int
			[Column("message_type_id"),      NotNull] public int  MessageTypeID     { get; set; } // int
			[Column("is_sent_by_initiator"), NotNull] public bool IsSentByInitiator { get; set; } // bit
			[Column("is_sent_by_target"),    NotNull] public bool IsSentByTarget    { get; set; } // bit
		}

		[Table(Schema="sys", Name="service_contracts", IsView=true)]
		public partial class ServiceContracts
		{
			[Column("name"),                NotNull    ] public string Name              { get; set; } = null!; // sysname
			[Column("service_contract_id"), NotNull    ] public int    ServiceContractID { get; set; } // int
			[Column("principal_id"),           Nullable] public int?   PrincipalID       { get; set; } // int
		}

		[Table(Schema="sys", Name="service_contract_usages", IsView=true)]
		public partial class ServiceContractUsages
		{
			[Column("service_id"),          NotNull] public int ServiceID         { get; set; } // int
			[Column("service_contract_id"), NotNull] public int ServiceContractID { get; set; } // int
		}

		[Table(Schema="sys", Name="service_message_types", IsView=true)]
		public partial class ServiceMessageTypes
		{
			[Column("name"),              NotNull    ] public string  Name            { get; set; } = null!; // sysname
			[Column("message_type_id"),   NotNull    ] public int     MessageTypeID   { get; set; } // int
			[Column("principal_id"),         Nullable] public int?    PrincipalID     { get; set; } // int
			[Column("validation"),        NotNull    ] public string  Validation      { get; set; } = null!; // char(2)
			[Column("validation_desc"),      Nullable] public string? ValidationDesc  { get; set; } // nvarchar(60)
			[Column("xml_collection_id"),    Nullable] public int?    XmlCollectionID { get; set; } // int
		}

		[Table(Schema="sys", Name="service_queues", IsView=true)]
		public partial class ServiceQueues
		{
			[Column("name"),                               NotNull    ] public string   Name                           { get; set; } = null!; // sysname
			[Column("object_id"),                          NotNull    ] public int      ObjectID                       { get; set; } // int
			[Column("principal_id"),                          Nullable] public int?     PrincipalID                    { get; set; } // int
			[Column("schema_id"),                          NotNull    ] public int      SchemaID                       { get; set; } // int
			[Column("parent_object_id"),                   NotNull    ] public int      ParentObjectID                 { get; set; } // int
			[Column("type"),                                  Nullable] public string?  Type                           { get; set; } // char(2)
			[Column("type_desc"),                             Nullable] public string?  TypeDesc                       { get; set; } // nvarchar(60)
			[Column("create_date"),                        NotNull    ] public DateTime CreateDate                     { get; set; } // datetime
			[Column("modify_date"),                        NotNull    ] public DateTime ModifyDate                     { get; set; } // datetime
			[Column("is_ms_shipped"),                      NotNull    ] public bool     IsMsShipped                    { get; set; } // bit
			[Column("is_published"),                       NotNull    ] public bool     IsPublished                    { get; set; } // bit
			[Column("is_schema_published"),                NotNull    ] public bool     IsSchemaPublished              { get; set; } // bit
			[Column("max_readers"),                           Nullable] public short?   MaxReaders                     { get; set; } // smallint
			[Column("activation_procedure"),                  Nullable] public string?  ActivationProcedure            { get; set; } // nvarchar(776)
			[Column("execute_as_principal_id"),               Nullable] public int?     ExecuteAsPrincipalID           { get; set; } // int
			[Column("is_activation_enabled"),              NotNull    ] public bool     IsActivationEnabled            { get; set; } // bit
			[Column("is_receive_enabled"),                 NotNull    ] public bool     IsReceiveEnabled               { get; set; } // bit
			[Column("is_enqueue_enabled"),                 NotNull    ] public bool     IsEnqueueEnabled               { get; set; } // bit
			[Column("is_retention_enabled"),               NotNull    ] public bool     IsRetentionEnabled             { get; set; } // bit
			[Column("is_poison_message_handling_enabled"),    Nullable] public bool?    IsPoisonMessageHandlingEnabled { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.OneToOne, KeyName="objects", BackReferenceName="ServiceQueue")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="service_queue_usages", IsView=true)]
		public partial class ServiceQueueUsages
		{
			[Column("service_id"),       NotNull] public int ServiceID      { get; set; } // int
			[Column("service_queue_id"), NotNull] public int ServiceQueueID { get; set; } // int
		}

		[Table(Schema="sys", Name="services", IsView=true)]
		public partial class Services
		{
			[Column("name"),             NotNull    ] public string Name           { get; set; } = null!; // sysname
			[Column("service_id"),       NotNull    ] public int    ServiceID      { get; set; } // int
			[Column("principal_id"),        Nullable] public int?   PrincipalID    { get; set; } // int
			[Column("service_queue_id"), NotNull    ] public int    ServiceQueueID { get; set; } // int
		}

		[Table(Schema="sys", Name="soap_endpoints", IsView=true)]
		public partial class SoapEndpoints
		{
			[Column("name"),                       NotNull    ] public string  Name                    { get; set; } = null!; // sysname
			[Column("endpoint_id"),                NotNull    ] public int     EndpointID              { get; set; } // int
			[Column("principal_id"),                  Nullable] public int?    PrincipalID             { get; set; } // int
			[Column("protocol"),                   NotNull    ] public byte    Protocol                { get; set; } // tinyint
			[Column("protocol_desc"),                 Nullable] public string? ProtocolDesc            { get; set; } // nvarchar(60)
			[Column("type"),                       NotNull    ] public byte    Type                    { get; set; } // tinyint
			[Column("type_desc"),                     Nullable] public string? TypeDesc                { get; set; } // nvarchar(60)
			[Column("state"),                         Nullable] public byte?   State                   { get; set; } // tinyint
			[Column("state_desc"),                    Nullable] public string? StateDesc               { get; set; } // nvarchar(60)
			[Column("is_admin_endpoint"),          NotNull    ] public bool    IsAdminEndpoint         { get; set; } // bit
			[Column("is_sql_language_enabled"),    NotNull    ] public bool    IsSqlLanguageEnabled    { get; set; } // bit
			[Column("wsdl_generator_procedure"),      Nullable] public string? WsdlGeneratorProcedure  { get; set; } // nvarchar(776)
			[Column("default_database"),              Nullable] public string? DefaultDatabase         { get; set; } // sysname
			[Column("default_namespace"),             Nullable] public string? DefaultNamespace        { get; set; } // nvarchar(384)
			[Column("default_result_schema"),         Nullable] public byte?   DefaultResultSchema     { get; set; } // tinyint
			[Column("default_result_schema_desc"),    Nullable] public string? DefaultResultSchemaDesc { get; set; } // nvarchar(60)
			[Column("is_xml_charset_enforced"),    NotNull    ] public bool    IsXmlCharsetEnforced    { get; set; } // bit
			[Column("is_session_enabled"),         NotNull    ] public bool    IsSessionEnabled        { get; set; } // bit
			[Column("session_timeout"),            NotNull    ] public int     SessionTimeout          { get; set; } // int
			[Column("login_type"),                    Nullable] public string? LoginType               { get; set; } // nvarchar(60)
			[Column("header_limit"),               NotNull    ] public int     HeaderLimit             { get; set; } // int
		}

		[Table(Schema="sys", Name="spatial_indexes", IsView=true)]
		public partial class SpatialIndexes
		{
			[Column("object_id"),                  NotNull    ] public int     ObjectID                { get; set; } // int
			[Column("name"),                          Nullable] public string? Name                    { get; set; } // sysname
			[Column("index_id"),                   NotNull    ] public int     IndexID                 { get; set; } // int
			[Column("type"),                       NotNull    ] public byte    Type                    { get; set; } // tinyint
			[Column("type_desc"),                     Nullable] public string? TypeDesc                { get; set; } // nvarchar(60)
			[Column("is_unique"),                     Nullable] public bool?   IsUnique                { get; set; } // bit
			[Column("data_space_id"),              NotNull    ] public int     DataSpaceID             { get; set; } // int
			[Column("ignore_dup_key"),                Nullable] public bool?   IgnoreDupKey            { get; set; } // bit
			[Column("is_primary_key"),                Nullable] public bool?   IsPrimaryKey            { get; set; } // bit
			[Column("is_unique_constraint"),          Nullable] public bool?   IsUniqueConstraint      { get; set; } // bit
			[Column("fill_factor"),                NotNull    ] public byte    FillFactor              { get; set; } // tinyint
			[Column("is_padded"),                     Nullable] public bool?   IsPadded                { get; set; } // bit
			[Column("is_disabled"),                   Nullable] public bool?   IsDisabled              { get; set; } // bit
			[Column("is_hypothetical"),               Nullable] public bool?   IsHypothetical          { get; set; } // bit
			[Column("is_ignored_in_optimization"),    Nullable] public bool?   IsIgnoredInOptimization { get; set; } // bit
			[Column("allow_row_locks"),               Nullable] public bool?   AllowRowLocks           { get; set; } // bit
			[Column("allow_page_locks"),              Nullable] public bool?   AllowPageLocks          { get; set; } // bit
			[Column("spatial_index_type"),         NotNull    ] public int     SpatialIndexType        { get; set; } // int
			[Column("spatial_index_type_desc"),       Nullable] public string? SpatialIndexTypeDesc    { get; set; } // nvarchar(60)
			[Column("tessellation_scheme"),           Nullable] public string? TessellationScheme      { get; set; } // nvarchar(60)
			[Column("has_filter"),                 NotNull    ] public bool    HasFilter               { get; set; } // bit
			[Column("filter_definition"),             Nullable] public string? FilterDefinition        { get; set; } // nvarchar(0)
			[Column("auto_created"),                  Nullable] public bool?   AutoCreated             { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="SpatialIndexes")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="spatial_index_tessellations", IsView=true)]
		public partial class SpatialIndexTessellations
		{
			[Column("object_id"),           NotNull    ] public int     ObjectID           { get; set; } // int
			[Column("index_id"),            NotNull    ] public int     IndexID            { get; set; } // int
			[Column("tessellation_scheme"),    Nullable] public string? TessellationScheme { get; set; } // nvarchar(60)
			[Column("bounding_box_xmin"),      Nullable] public double? BoundingBoxXmin    { get; set; } // float
			[Column("bounding_box_ymin"),      Nullable] public double? BoundingBoxYmin    { get; set; } // float
			[Column("bounding_box_xmax"),      Nullable] public double? BoundingBoxXmax    { get; set; } // float
			[Column("bounding_box_ymax"),      Nullable] public double? BoundingBoxYmax    { get; set; } // float
			[Column("level_1_grid"),           Nullable] public short?  Level1Grid         { get; set; } // smallint
			[Column("level_1_grid_desc"),      Nullable] public string? Level1GridDesc     { get; set; } // nvarchar(60)
			[Column("level_2_grid"),           Nullable] public short?  Level2Grid         { get; set; } // smallint
			[Column("level_2_grid_desc"),      Nullable] public string? Level2GridDesc     { get; set; } // nvarchar(60)
			[Column("level_3_grid"),           Nullable] public short?  Level3Grid         { get; set; } // smallint
			[Column("level_3_grid_desc"),      Nullable] public string? Level3GridDesc     { get; set; } // nvarchar(60)
			[Column("level_4_grid"),           Nullable] public short?  Level4Grid         { get; set; } // smallint
			[Column("level_4_grid_desc"),      Nullable] public string? Level4GridDesc     { get; set; } // nvarchar(60)
			[Column("cells_per_object"),       Nullable] public int?    CellsPerObject     { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="SpatialIndexTessellations")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="spatial_reference_systems", IsView=true)]
		public partial class SpatialReferenceSystems
		{
			[Column("spatial_reference_id"),            Nullable] public int?    SpatialReferenceID           { get; set; } // int
			[Column("authority_name"),                  Nullable] public string? AuthorityName                { get; set; } // nvarchar(128)
			[Column("authorized_spatial_reference_id"), Nullable] public int?    AuthorizedSpatialReferenceID { get; set; } // int
			[Column("well_known_text"),                 Nullable] public string? WellKnownText                { get; set; } // nvarchar(4000)
			[Column("unit_of_measure"),                 Nullable] public string? UnitOfMeasure                { get; set; } // nvarchar(128)
			[Column("unit_conversion_factor"),          Nullable] public double? UnitConversionFactor         { get; set; } // float
		}

		/// <summary>
		/// Contains a row for each dependency on a referenced entity as referenced in the Transact-SQL expression or statements that define some other referencing object.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-sql-dependencies-transact-sql?view=sql-server-ver15'>sys.sql_dependencies</a>.
		/// </summary>
		[Table(Schema="sys", Name="sql_dependencies", IsView=true)]
		public partial class SqlDependencies
		{
			/// <summary>
			/// Identifies the class of the referenced entity:<br/> 0 = Object or column (non-schema-bound references only)<br/> 1 = Object or column (schema-bound references)<br/> 2 = Types (schema-bound references)<br/> 3 = XML Schema collections (schema-bound references)<br/> 4 = Partition function (schema-bound references)
			/// </summary>
			[Column("class"),               NotNull    ] public byte    @class            { get; set; } // tinyint
			/// <summary>
			/// Description of class of referenced entity:<br/> <b>OBJECT_OR_COLUMN_REFERENCE_NON_SCHEMA_BOUND</b><br/> <b>OBJECT_OR_COLUMN_REFERENCE_SCHEMA_BOUND</b><br/> <b>TYPE_REFERENCE</b><br/> <b>XML_SCHEMA_COLLECTION_REFERENCE</b><br/> <b>PARTITION_FUNCTION_REFERENCE</b>
			/// </summary>
			[Column("class_desc"),             Nullable] public string? ClassDesc         { get; set; } // nvarchar(60)
			/// <summary>
			/// ID of the referencing object.
			/// </summary>
			[Column("object_id"),           NotNull    ] public int     ObjectID          { get; set; } // int
			/// <summary>
			/// If the referencing ID is a column, ID of referencing column; otherwise, 0.
			/// </summary>
			[Column("column_id"),           NotNull    ] public int     ColumnID          { get; set; } // int
			/// <summary>
			/// ID of the referenced entity, interpreted by value of class, according to:<br/> 0, 1 = Object ID of object or column.<br/> 2 = Type ID.<br/> 3 = XML Schema collection ID.
			/// </summary>
			[Column("referenced_major_id"), NotNull    ] public int     ReferencedMajorID { get; set; } // int
			/// <summary>
			/// Minor-ID of the referenced entity, interpreted by value of class, as shown in the following.<br/> When class =:<br/> 0, <b>referenced_minor_id</b> is a column ID; or if not a column, it is 0.<br/> 1, <b>referenced_minor_id</b> is a column ID; or if not a column, it is 0.<br/> Otherwise, <b>referenced_minor_id</b> = 0.
			/// </summary>
			[Column("referenced_minor_id"), NotNull    ] public int     ReferencedMinorID { get; set; } // int
			/// <summary>
			/// Object or column is selected.
			/// </summary>
			[Column("is_selected"),         NotNull    ] public bool    IsSelected        { get; set; } // bit
			/// <summary>
			/// Object or column is updated.
			/// </summary>
			[Column("is_updated"),          NotNull    ] public bool    IsUpdated         { get; set; } // bit
			/// <summary>
			/// Object is used in SELECT * clause (object-level only).
			/// </summary>
			[Column("is_select_all"),       NotNull    ] public bool    IsSelectAll       { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="SqlDependencies")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains one row for each by-name dependency on a user-defined entity in the current database. This includes dependences between natively compiled, scalar user-defined functions and other SQL Server modules. A dependency between two entities is created when one entity, called the <em>referenced entity</em>, appears by name in a persisted SQL expression of another entity, called the <em>referencing entity</em>. For example, when a table is referenced in the definition of a view, the view, as the referencing entity, depends on the table, the referenced entity. If the table is dropped, the view is unusable.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-sql-expression-dependencies-transact-sql?view=sql-server-ver15'>sys.sql_expression_dependencies</a>.
		/// </summary>
		[Table(Schema="sys", Name="sql_expression_dependencies", IsView=true)]
		public partial class SqlExpressionDependencies
		{
			/// <summary>
			/// ID of the referencing entity. Is not nullable.
			/// </summary>
			[Column("referencing_id"),            NotNull    ] public int     ReferencingID          { get; set; } // int
			/// <summary>
			/// Column ID when the referencing entity is a column; otherwise 0. Is not nullable.
			/// </summary>
			[Column("referencing_minor_id"),      NotNull    ] public int     ReferencingMinorID     { get; set; } // int
			/// <summary>
			/// Class of the referencing entity.<br/> 1 = Object or column<br/> 12 = Database DDL trigger<br/> 13 = Server DDL trigger<br/> Is not nullable.
			/// </summary>
			[Column("referencing_class"),            Nullable] public byte?   ReferencingClass       { get; set; } // tinyint
			/// <summary>
			/// Description of the class of referencing entity.<br/> OBJECT_OR_COLUMN<br/> DATABASE_DDL_TRIGGER<br/> SERVER_DDL_TRIGGER<br/> Is not nullable.
			/// </summary>
			[Column("referencing_class_desc"),       Nullable] public string? ReferencingClassDesc   { get; set; } // nvarchar(60)
			/// <summary>
			/// 1 = Referenced entity is schema-bound.<br/> 0 = Referenced entity is non-schema-bound.<br/> Is not nullable.
			/// </summary>
			[Column("is_schema_bound_reference"), NotNull    ] public bool    IsSchemaBoundReference { get; set; } // bit
			/// <summary>
			/// Class of the referenced entity.<br/> 1 = Object or column<br/> 6 = Type<br/> 10 = XML schema collection<br/> 21 = Partition function<br/> Is not nullable.
			/// </summary>
			[Column("referenced_class"),             Nullable] public byte?   ReferencedClass        { get; set; } // tinyint
			/// <summary>
			/// Description of class of referenced entity.<br/> OBJECT_OR_COLUMN<br/> TYPE<br/> XML_SCHEMA_COLLECTION<br/> PARTITION_FUNCTION<br/> Is not nullable.
			/// </summary>
			[Column("referenced_class_desc"),        Nullable] public string? ReferencedClassDesc    { get; set; } // nvarchar(60)
			/// <summary>
			/// Name of the server of the referenced entity.<br/> This column is populated for cross-server dependencies that are made by specifying a valid four-part name. For information about multipart names, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/language-elements/transact-sql-syntax-conventions-transact-sql?view=sql-server-ver15'>Transact-SQL Syntax Conventions (Transact-SQL)</a>.<br/> NULL for non-schema-bound entities for which the entity was referenced without specifying a four-part name.<br/> NULL for schema-bound entities because they must be in the same database and therefore can only be defined using a two-part (<em>schema.object</em>) name.
			/// </summary>
			[Column("referenced_server_name"),       Nullable] public string? ReferencedServerName   { get; set; } // sysname
			/// <summary>
			/// Name of the database of the referenced entity.<br/> This column is populated for cross-database or cross-server references that are made by specifying a valid three-part or four-part name.<br/> NULL for non-schema-bound references when specified using a one-part or two-part name.<br/> NULL for schema-bound entities because they must be in the same database and therefore can only be defined using a two-part (<em>schema.object</em>) name.
			/// </summary>
			[Column("referenced_database_name"),     Nullable] public string? ReferencedDatabaseName { get; set; } // sysname
			/// <summary>
			/// Schema in which the referenced entity belongs.<br/> NULL for non-schema-bound references in which the entity was referenced without specifying the schema name.<br/> Never NULL for schema-bound references because schema-bound entities must be defined and referenced by using a two-part name.
			/// </summary>
			[Column("referenced_schema_name"),       Nullable] public string? ReferencedSchemaName   { get; set; } // sysname
			/// <summary>
			/// Name of the referenced entity. Is not nullable.
			/// </summary>
			[Column("referenced_entity_name"),       Nullable] public string? ReferencedEntityName   { get; set; } // sysname
			/// <summary>
			/// ID of the referenced entity. The value of this column is never NULL for schema-bound references. The value of this column is always NULL for cross-server and cross-database references.<br/> NULL for references within the database if the ID cannot be determined. For non-schema-bound references, the ID cannot be resolved in the following cases:<br/> The referenced entity does not exist in the database.<br/> The schema of the referenced entity depends on the schema of the caller and is resolved at run time. In this case, is_caller_dependent is set to 1.
			/// </summary>
			[Column("referenced_id"),                Nullable] public int?    ReferencedID           { get; set; } // int
			/// <summary>
			/// ID of the referenced column when the referencing entity is a column; otherwise 0. Is not nullable.<br/> A referenced entity is a column when a column is identified by name in the referencing entity, or when the parent entity is used in a SELECT * statement.
			/// </summary>
			[Column("referenced_minor_id"),       NotNull    ] public int     ReferencedMinorID      { get; set; } // int
			/// <summary>
			/// Indicates that schema binding for the referenced entity occurs at runtime; therefore, resolution of the entity ID depends on the schema of the caller. This occurs when the referenced entity is a stored procedure, extended stored procedure, or a non-schema-bound user-defined function called in an EXECUTE statement.<br/> 1 = The referenced entity is caller dependent and is resolved at runtime. In this case, referenced_id is NULL.<br/> 0 = The referenced entity ID is not caller dependent.<br/> Always 0 for schema-bound references and for cross-database and cross-server references that explicitly specify a schema name. For example, a reference to an entity in the format <i>EXEC MyDatabase.MySchema.MyProc</i> is not caller dependent. However, a reference in the format <i>EXEC MyDatabase..MyProc</i> is caller dependent.
			/// </summary>
			[Column("is_caller_dependent"),       NotNull    ] public bool    IsCallerDependent      { get; set; } // bit
			/// <summary>
			/// Indicates the reference is ambiguous and can resolve at run time to a user-defined function, a user-defined type (UDT), or an xquery reference to a column of type <b>xml</b>.<br/> For example, assume that the statement <i>SELECT Sales.GetOrder() FROM Sales.MySales</i> is defined in a stored procedure. Until the stored procedure is executed, it is not known whether <i>Sales.GetOrder()</i> is a user-defined function in the <i>Sales</i> schema or column named <i>Sales</i> of type UDT with a method named <i>GetOrder()</i>.<br/> 1 = Reference is ambiguous.<br/> 0 = Reference is unambiguous or the entity can be successfully bound when the view is called.<br/> Always 0 for schema bound references.
			/// </summary>
			[Column("is_ambiguous"),              NotNull    ] public bool    IsAmbiguous            { get; set; } // bit
		}

		[Table(Schema="sys", Name="sql_feature_restrictions", IsView=true)]
		public partial class SqlFeatureRestrictions
		{
			[Column("class"),   NotNull    ] public string  @class  { get; set; } = null!; // varchar(7)
			[Column("object"),     Nullable] public string? @object { get; set; } // nvarchar(128)
			[Column("feature"), NotNull    ] public string  Feature { get; set; } = null!; // varchar(13)
		}

		[Table(Schema="sys", Name="sql_logins", IsView=true)]
		public partial class SqlLogins
		{
			[Column("name"),                  NotNull    ] public string   Name                { get; set; } = null!; // sysname
			[Column("principal_id"),          NotNull    ] public int      PrincipalID         { get; set; } // int
			[Column("sid"),                      Nullable] public byte[]?  Sid                 { get; set; } // varbinary(85)
			[Column("type"),                  NotNull    ] public string   Type                { get; set; } = null!; // char(1)
			[Column("type_desc"),                Nullable] public string?  TypeDesc            { get; set; } // nvarchar(60)
			[Column("is_disabled"),              Nullable] public bool?    IsDisabled          { get; set; } // bit
			[Column("create_date"),           NotNull    ] public DateTime CreateDate          { get; set; } // datetime
			[Column("modify_date"),           NotNull    ] public DateTime ModifyDate          { get; set; } // datetime
			[Column("default_database_name"),    Nullable] public string?  DefaultDatabaseName { get; set; } // sysname
			[Column("default_language_name"),    Nullable] public string?  DefaultLanguageName { get; set; } // sysname
			[Column("credential_id"),            Nullable] public int?     CredentialID        { get; set; } // int
			[Column("is_policy_checked"),        Nullable] public bool?    IsPolicyChecked     { get; set; } // bit
			[Column("is_expiration_checked"),    Nullable] public bool?    IsExpirationChecked { get; set; } // bit
			[Column("password_hash"),            Nullable] public byte[]?  PasswordHash        { get; set; } // varbinary(256)
		}

		/// <summary>
		/// Returns a row for each object that is an SQL language-defined module in SQL Server, including natively compiled scalar user-defined function. Objects of type P, RF, V, TR, FN, IF, TF, and R have an associated SQL module. Stand-alone defaults, objects of type D, also have an SQL module definition in this view. For a description of these types, see the <i>type</i> column in the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-objects-transact-sql?view=sql-server-ver15'>sys.objects</a> catalog view.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-sql-modules-transact-sql?view=sql-server-ver15'>sys.sql_modules</a>.
		/// </summary>
		[Table(Schema="sys", Name="sql_modules", IsView=true)]
		public partial class SqlModules
		{
			/// <summary>
			/// ID of the object of the containing object. Is unique within a database.
			/// </summary>
			[Column("object_id"),               NotNull    ] public int     ObjectID              { get; set; } // int
			/// <summary>
			/// SQL text that defines this module. This value can also be obtained using the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/functions/object-definition-transact-sql?view=sql-server-ver15'>OBJECT_DEFINITION</a> built-in function.<br/> NULL = Encrypted.
			/// </summary>
			[Column("definition"),                 Nullable] public string? Definition            { get; set; } // nvarchar(max)
			/// <summary>
			/// Module was created with SET ANSI_NULLS ON.<br/> Will always be = 0 for rules and defaults.
			/// </summary>
			[Column("uses_ansi_nulls"),            Nullable] public bool?   UsesAnsiNulls         { get; set; } // bit
			/// <summary>
			/// Module was created with SET QUOTED_IDENTIFIER ON.
			/// </summary>
			[Column("uses_quoted_identifier"),     Nullable] public bool?   UsesQuotedIdentifier  { get; set; } // bit
			/// <summary>
			/// Module was created with SCHEMABINDING option.<br/> Always contains a value of 1 for natively compiled stored procedures.
			/// </summary>
			[Column("is_schema_bound"),            Nullable] public bool?   IsSchemaBound         { get; set; } // bit
			/// <summary>
			/// 1 = Schema-bound module definition depends on the default-collation of the database for correct evaluation; otherwise, 0. Such a dependency prevents changing the database&apos;s default collation.
			/// </summary>
			[Column("uses_database_collation"),    Nullable] public bool?   UsesDatabaseCollation { get; set; } // bit
			/// <summary>
			/// Procedure was created WITH RECOMPILE option.
			/// </summary>
			[Column("is_recompiled"),              Nullable] public bool?   IsRecompiled          { get; set; } // bit
			/// <summary>
			/// Module was declared to produce a <i>NULL</i> output on any <i>NULL</i> input.
			/// </summary>
			[Column("null_on_null_input"),         Nullable] public bool?   NullOnNullInput       { get; set; } // bit
			/// <summary>
			/// ID of the EXECUTE AS database principal.<br/> <i>NULL</i> by default or if EXECUTE AS CALLER.<br/> ID of the specified principal if EXECUTE AS SELF or EXECUTE AS &lt;principal&gt;.<br/> -2 = EXECUTE AS OWNER.
			/// </summary>
			[Column("execute_as_principal_id"),    Nullable] public int?    ExecuteAsPrincipalID  { get; set; } // Int
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2014 (12.x) through SQL Server 2014 (12.x).<br/> 0 = not natively compiled<br/> 1 = is natively compiled<br/> The default value is 0.
			/// </summary>
			[Column("uses_native_compilation"),    Nullable] public bool?   UsesNativeCompilation { get; set; } // bit
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2019 (15.x) and later.<br/><br/>Indicates whether inlining is turned on for the module currently. <br/><br/>0 = inlining is turned off<br/> 1 = inlining is turned on.<br/> For scalar user-defined functions (UDFs), the value will be 1 if inlining is turned on (explicitly or implicitly). The value will always be 1 for inline table-valued functions (TVFs), and 0 for other module types.<br/>
			/// </summary>
			[Column("inline_type"),                Nullable] public bool?   InlineType            { get; set; } // bit
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2019 (15.x) and later.<br/><br/>Indicates whether the module is inlineable or not. Inlineability is based on the conditions specified <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../user-defined-functions/scalar-udf-inlining?view=sql-server-ver15#inlineable-scalar-udfs-requirements'>here</a>.<br/> 0 = not inlineable<br/> 1 = is inlineable. <br/> For scalar user-defined functions (UDFs), the value will be 1 if the UDF is inlineable, and 0 otherwise. It always contains a value of 1 for inline table-valued functions (TVFs), and 0 for all other module types.<br/>
			/// </summary>
			[Column("is_inlineable"),              Nullable] public bool?   IsInlineable          { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="SqlModules")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains a row for each statistics object that exists for the tables, indexes, and indexed views in the database in SQL Server. Every index will have a corresponding statistics row with the same name and ID (<b>index_id</b> = <b>stats_id</b>), but not every statistics row has a corresponding index.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-stats-transact-sql?view=sql-server-ver15'>sys.stats</a>.
		/// </summary>
		[Table(Schema="sys", Name="stats", IsView=true)]
		public partial class Stats
		{
			/// <summary>
			/// ID of the object to which these statistics belong.
			/// </summary>
			[Column("object_id"),                    NotNull    ] public int     ObjectID                  { get; set; } // int
			/// <summary>
			/// Name of the statistics. Is unique within the object.
			/// </summary>
			[Column("name"),                            Nullable] public string? Name                      { get; set; } // sysname
			/// <summary>
			/// ID of the statistics. Is unique within the object.<br/><br/>If statistics correspond to an index, the <em>stats_id</em> value is the same as the <em>index_id</em> value in the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-indexes-transact-sql?view=sql-server-ver15'>sys.indexes</a> catalog view.
			/// </summary>
			[Column("stats_id"),                     NotNull    ] public int     StatsID                   { get; set; } // int
			/// <summary>
			/// Indicates whether the statistics were automatically created by SQL Server.<br/> 0 = Statistics were not automatically created by SQL Server.<br/> 1 = Statistics were automatically created by SQL Server.
			/// </summary>
			[Column("auto_created"),                    Nullable] public bool?   AutoCreated               { get; set; } // bit
			/// <summary>
			/// Indicates whether the statistics were created by a user.<br/> 0 = Statistics were not created by a user.<br/> 1 = Statistics were created by a user.
			/// </summary>
			[Column("user_created"),                    Nullable] public bool?   UserCreated               { get; set; } // bit
			/// <summary>
			/// Indicates whether the statistics were created with the <b>NORECOMPUTE</b> option.<br/> 0 = Statistics were not created with the <b>NORECOMPUTE</b> option.<br/> 1 = Statistics were created with the <b>NORECOMPUTE</b> option.
			/// </summary>
			[Column("no_recompute"),                    Nullable] public bool?   NoRecompute               { get; set; } // bit
			/// <summary>
			/// 0 = Statistics do not have a filter and are computed on all rows.<br/> 1 = Statistics have a filter and are computed only on rows that satisfy the filter definition.
			/// </summary>
			[Column("has_filter"),                      Nullable] public bool?   HasFilter                 { get; set; } // bit
			/// <summary>
			/// Expression for the subset of rows included in filtered statistics.<br/> NULL = Non-filtered statistics.
			/// </summary>
			[Column("filter_definition"),               Nullable] public string? FilterDefinition          { get; set; } // nvarchar(max)
			/// <summary>
			/// Indicates whether the statistics is temporary. Temporary statistics support Always On availability groups secondary databases that are enabled for read-only access.<br/> 0 = The statistics is not temporary.<br/> 1 = The statistics is temporary.<br/><br/><b>Applies to</b>: SQL Server (Starting with SQL Server 2012 (11.x))
			/// </summary>
			[Column("is_temporary"),                    Nullable] public bool?   IsTemporary               { get; set; } // bit
			/// <summary>
			/// Indicate whether the statistics are created as incremental statistics.<br/> 0 = The statistics are not incremental.<br/> 1 = The statistics are incremental.<br/><br/><b>Applies to</b>: SQL Server (Starting with SQL Server 2014 (12.x))
			/// </summary>
			[Column("is_incremental"),                  Nullable] public bool?   IsIncremental             { get; set; } // bit
			/// <summary>
			/// Indicates whether the statistics were created or updated with the PERSIST_SAMPLE_PERCENT option.<br/> <b>0</b> = Statistics are not persisting the sample percentage.<br/> 1 = Statistics were created or updated with the PERSIST_SAMPLE_PERCENT option.<br/><br/><b>Applies to</b>: SQL Server (Starting with SQL Server 2019 (15.x))
			/// </summary>
			[Column("has_persisted_sample"),            Nullable] public bool?   HasPersistedSample        { get; set; } // bit
			/// <summary>
			/// Indicates the method by which statistics are created.<br/><br/><b>0</b> = Sort based statistics<br/><br/>1 = Internal use only<br/><br/><b>Applies to</b>: SQL Server (Starting with SQL Server 2019 (15.x))
			/// </summary>
			[Column("stats_generation_method"),      NotNull    ] public int     StatsGenerationMethod     { get; set; } // int
			/// <summary>
			/// The text description of the method by which statistics are created.<br/><br/>Sort based statistics<br/><br/>Internal use only<br/><br/><b>Applies to</b>: SQL Server (Starting with SQL Server 2019 (15.x))
			/// </summary>
			[Column("stats_generation_method_desc"), NotNull    ] public string  StatsGenerationMethodDesc { get; set; } = null!; // varchar(255)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="Stats")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains a row for each column that is part of <b>sys.stats</b> statistics.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-stats-columns-transact-sql?view=sql-server-ver15'>sys.stats_columns</a>.
		/// </summary>
		[Table(Schema="sys", Name="stats_columns", IsView=true)]
		public partial class StatsColumns
		{
			/// <summary>
			/// ID of the object of which this column is part.
			/// </summary>
			[Column("object_id"),       NotNull    ] public int  ObjectID      { get; set; } // int
			/// <summary>
			/// ID of the statistics of which this column is part.<br/><br/>If statistics correspond to an index, the <em>stats_id</em> value is the same as the <em>index_id</em> value in the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-indexes-transact-sql?view=sql-server-ver15'>sys.indexes</a> catalog view.
			/// </summary>
			[Column("stats_id"),        NotNull    ] public int  StatsID       { get; set; } // int
			/// <summary>
			/// 1-based ordinal within set of stats columns.
			/// </summary>
			[Column("stats_column_id"),    Nullable] public int? StatsColumnID { get; set; } // int
			/// <summary>
			/// ID of the column from <b>sys.columns</b>.
			/// </summary>
			[Column("column_id"),          Nullable] public int? ColumnID      { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="StatsColumns")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="symmetric_keys", IsView=true)]
		public partial class SymmetricKeys
		{
			[Column("name"),                         NotNull    ] public string   Name                       { get; set; } = null!; // sysname
			[Column("principal_id"),                    Nullable] public int?     PrincipalID                { get; set; } // int
			[Column("symmetric_key_id"),             NotNull    ] public int      SymmetricKeyID             { get; set; } // int
			[Column("key_length"),                   NotNull    ] public int      KeyLength                  { get; set; } // int
			[Column("key_algorithm"),                NotNull    ] public string   KeyAlgorithm               { get; set; } = null!; // char(2)
			[Column("algorithm_desc"),                  Nullable] public string?  AlgorithmDesc              { get; set; } // nvarchar(60)
			[Column("create_date"),                  NotNull    ] public DateTime CreateDate                 { get; set; } // datetime
			[Column("modify_date"),                  NotNull    ] public DateTime ModifyDate                 { get; set; } // datetime
			[Column("key_guid"),                        Nullable] public Guid?    KeyGuid                    { get; set; } // uniqueidentifier
			[Column("key_thumbprint"),                  Nullable] public object?  KeyThumbprint              { get; set; } // sql_variant
			[Column("provider_type"),                   Nullable] public string?  ProviderType               { get; set; } // nvarchar(60)
			[Column("cryptographic_provider_guid"),     Nullable] public Guid?    CryptographicProviderGuid  { get; set; } // uniqueidentifier
			[Column("cryptographic_provider_algid"),    Nullable] public object?  CryptographicProviderAlgid { get; set; } // sql_variant
		}

		/// <summary>
		/// Contains a row for each synonym object that is <b>sys.objects.type</b> = SN.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-synonyms-transact-sql?view=sql-server-ver15'>sys.synonyms</a>.
		/// </summary>
		[Table(Schema="sys", Name="synonyms", IsView=true)]
		public partial class Synonyms
		{
			[Column("name"),                NotNull    ] public string   Name              { get; set; } = null!; // sysname
			[Column("object_id"),           NotNull    ] public int      ObjectID          { get; set; } // int
			[Column("principal_id"),           Nullable] public int?     PrincipalID       { get; set; } // int
			[Column("schema_id"),           NotNull    ] public int      SchemaID          { get; set; } // int
			[Column("parent_object_id"),    NotNull    ] public int      ParentObjectID    { get; set; } // int
			[Column("type"),                   Nullable] public string?  Type              { get; set; } // char(2)
			[Column("type_desc"),              Nullable] public string?  TypeDesc          { get; set; } // nvarchar(60)
			[Column("create_date"),         NotNull    ] public DateTime CreateDate        { get; set; } // datetime
			[Column("modify_date"),         NotNull    ] public DateTime ModifyDate        { get; set; } // datetime
			[Column("is_ms_shipped"),       NotNull    ] public bool     IsMsShipped       { get; set; } // bit
			[Column("is_published"),        NotNull    ] public bool     IsPublished       { get; set; } // bit
			[Column("is_schema_published"), NotNull    ] public bool     IsSchemaPublished { get; set; } // bit
			/// <summary>
			/// Fully quoted name of the object to which the user of this synonym is redirected.
			/// </summary>
			[Column("base_object_name"),       Nullable] public string?  BaseObjectName    { get; set; } // nvarchar(1035)

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.OneToOne, KeyName="objects", BackReferenceName="Synonym")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains a row for each column of system objects that have columns.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-system-columns-transact-sql?view=sql-server-ver15'>sys.system_columns</a>.
		/// </summary>
		[Table(Schema="sys", Name="system_columns", IsView=true)]
		public partial class SystemColumns
		{
			/// <summary>
			/// ID of the object to which this column belongs.
			/// </summary>
			[Column("object_id"),                           NotNull    ] public int     ObjectID                        { get; set; } // int
			/// <summary>
			/// Name of the column. Is unique within the object.
			/// </summary>
			[Column("name"),                                   Nullable] public string? Name                            { get; set; } // sysname
			/// <summary>
			/// ID of the column. Is unique within the object.<br/> Column IDs might not be sequential.
			/// </summary>
			[Column("column_id"),                           NotNull    ] public int     ColumnID                        { get; set; } // int
			/// <summary>
			/// ID of the system-type of the column
			/// </summary>
			[Column("system_type_id"),                      NotNull    ] public byte    SystemTypeID                    { get; set; } // tinyint
			/// <summary>
			/// ID of the type of the column as defined by the user.<br/> To return the name of the type, join to the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-types-transact-sql?view=sql-server-ver15'>sys.types</a> catalog view on this column.
			/// </summary>
			[Column("user_type_id"),                        NotNull    ] public int     UserTypeID                      { get; set; } // int
			/// <summary>
			/// Maximum length (in bytes) of column.<br/> -1 = Column data type is <b>varchar(max)</b>, <b>nvarchar(max)</b>, <b>varbinary(max)</b>, or <b>xml</b>.<br/> For <b>text</b> columns, the <b>max_length</b> value will be 16 or the value set by <b>sp_tableoption</b> &apos;text in row&apos;.
			/// </summary>
			[Column("max_length"),                          NotNull    ] public short   MaxLength                       { get; set; } // smallint
			/// <summary>
			/// Precision of the column if numeric-based; otherwise, 0.
			/// </summary>
			[Column("precision"),                           NotNull    ] public byte    Precision                       { get; set; } // tinyint
			/// <summary>
			/// Scale of the column if numeric-based; otherwise, 0.
			/// </summary>
			[Column("scale"),                               NotNull    ] public byte    Scale                           { get; set; } // tinyint
			/// <summary>
			/// Name of the collation of the column if character-based; otherwise, NULL.
			/// </summary>
			[Column("collation_name"),                         Nullable] public string? CollationName                   { get; set; } // sysname
			/// <summary>
			/// 1 = Column is nullable.
			/// </summary>
			[Column("is_nullable"),                            Nullable] public bool?   IsNullable                      { get; set; } // bit
			/// <summary>
			/// 1 = Column uses ANSI_PADDING ON behavior if character, binary, or variant.<br/> 0 = Column is not character, binary, or variant.
			/// </summary>
			[Column("is_ansi_padded"),                      NotNull    ] public bool    IsAnsiPadded                    { get; set; } // bit
			/// <summary>
			/// 1 = Column is a declared ROWGUIDCOL.
			/// </summary>
			[Column("is_rowguidcol"),                       NotNull    ] public bool    IsRowguidcol                    { get; set; } // bit
			/// <summary>
			/// 1 = Column has identity values.
			/// </summary>
			[Column("is_identity"),                         NotNull    ] public bool    IsIdentity                      { get; set; } // bit
			/// <summary>
			/// 1 = Column is a computed column.
			/// </summary>
			[Column("is_computed"),                         NotNull    ] public bool    IsComputed                      { get; set; } // bit
			/// <summary>
			/// 1 = Column is declared to use filestream storage.
			/// </summary>
			[Column("is_filestream"),                       NotNull    ] public bool    IsFilestream                    { get; set; } // bit
			/// <summary>
			/// 1 = Column is replicated.
			/// </summary>
			[Column("is_replicated"),                       NotNull    ] public bool    IsReplicated                    { get; set; } // bit
			/// <summary>
			/// 1 = Column has a non-SQL Server subscriber.
			/// </summary>
			[Column("is_non_sql_subscribed"),               NotNull    ] public bool    IsNonSqlSubscribed              { get; set; } // bit
			/// <summary>
			/// 1 = Column is merge-published.
			/// </summary>
			[Column("is_merge_published"),                  NotNull    ] public bool    IsMergePublished                { get; set; } // bit
			/// <summary>
			/// 1 = Column is replicated by using SSIS.
			/// </summary>
			[Column("is_dts_replicated"),                   NotNull    ] public bool    IsDtsReplicated                 { get; set; } // bit
			/// <summary>
			/// 1 = Content is a complete XML document.<br/> 0 = Content is a document fragment, or the column data type is not <b>xml</b>.
			/// </summary>
			[Column("is_xml_document"),                     NotNull    ] public bool    IsXmlDocument                   { get; set; } // bit
			/// <summary>
			/// Non-zero if the column data type is <b>xml</b> and the XML is typed. The value will be the ID of the collection containing the validating XML schema namespace of the column.<br/> 0 = No XML schema collection.
			/// </summary>
			[Column("xml_collection_id"),                   NotNull    ] public int     XmlCollectionID                 { get; set; } // int
			/// <summary>
			/// ID of the default object, regardless of whether it is a stand-alone <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../system-stored-procedures/sp-bindefault-transact-sql?view=sql-server-ver15'>sys.sp_bindefault</a>, or an inline, column-level DEFAULT constraint. The <b>parent_object_id</b> column of an inline column-level default object is a reference back to the table itself. Or, 0 if there is no default.
			/// </summary>
			[Column("default_object_id"),                   NotNull    ] public int     DefaultObjectID                 { get; set; } // int
			/// <summary>
			/// ID of the stand-alone rule bound to the column by using <b>sys.sp_bindrule</b>.<br/> 0 = No stand-alone rule.<br/> For column-level CHECK constraints, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-check-constraints-transact-sql?view=sql-server-ver15'>sys.check_constraints (Transact-SQL)</a>.
			/// </summary>
			[Column("rule_object_id"),                      NotNull    ] public int     RuleObjectID                    { get; set; } // int
			/// <summary>
			/// 1 = Column is a sparse column. For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../tables/use-sparse-columns?view=sql-server-ver15'>Use Sparse Columns</a>.
			/// </summary>
			[Column("is_sparse"),                           NotNull    ] public bool    IsSparse                        { get; set; } // bit
			/// <summary>
			/// 1 = Column is a column set. For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../tables/use-column-sets?view=sql-server-ver15'>Use Column Sets</a>.
			/// </summary>
			[Column("is_column_set"),                       NotNull    ] public bool    IsColumnSet                     { get; set; } // bit
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database. 7, 8, 9, 10 only applies to SQL Database.<br/> Identifies when the column value is generated (will always be 0 for columns in system tables):<br/> 0 = NOT_APPLICABLE<br/> 1 = AS_ROW_START<br/> 2 = AS_ROW_END<br/>7 = AS_TRANSACTION_ID_START<br/>8 = AS_TRANSACTION_ID_END<br/>9 = AS_SEQUENCE_NUMBER_START<br/>10 = AS_SEQUENCE_NUMBER_END<br/> For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../tables/temporal-tables?view=sql-server-ver15'>Temporal Tables (Relational databases)</a>.
			/// </summary>
			[Column("generated_always_type"),                  Nullable] public byte?   GeneratedAlwaysType             { get; set; } // tinyint
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> Textual description of <i>generated_always_type</i>&apos;s value (always NOT_APPLICABLE for columns in system tables) <br/> NOT_APPLICABLE<br/> AS_ROW_START<br/> AS_ROW_END<br/><br/><b>Applies to</b>: SQL Database<br/><br/>AS_TRANSACTION_ID_START<br/>AS_TRANSACTION_ID_END<br/>AS_SEQUENCE_NUMBER_START<br/>AS_SEQUENCE_NUMBER_END
			/// </summary>
			[Column("generated_always_type_desc"),             Nullable] public string? GeneratedAlwaysTypeDesc         { get; set; } // nvarchar(60)
			[Column("encryption_type"),                        Nullable] public int?    EncryptionType                  { get; set; } // int
			[Column("encryption_type_desc"),                   Nullable] public string? EncryptionTypeDesc              { get; set; } // nvarchar(64)
			[Column("encryption_algorithm_name"),              Nullable] public string? EncryptionAlgorithmName         { get; set; } // nvarchar(128)
			[Column("column_encryption_key_id"),               Nullable] public int?    ColumnEncryptionKeyID           { get; set; } // int
			[Column("column_encryption_key_database_name"),    Nullable] public string? ColumnEncryptionKeyDatabaseName { get; set; } // sysname
			[Column("is_hidden"),                           NotNull    ] public bool    IsHidden                        { get; set; } // bit
			[Column("is_masked"),                           NotNull    ] public bool    IsMasked                        { get; set; } // bit
			[Column("graph_type"),                             Nullable] public int?    GraphType                       { get; set; } // int
			[Column("graph_type_desc"),                        Nullable] public string? GraphTypeDesc                   { get; set; } // nvarchar(60)

			#region Associations

			/// <summary>
			/// system_objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="system_objects", BackReferenceName="SystemColumns")]
			public SystemSchema.SystemObjects SystemObject { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="system_components_surface_area_configuration", IsView=true)]
		public partial class SystemComponentsSurfaceAreaConfiguration
		{
			[Column("component_name"),    Nullable] public string? ComponentName { get; set; } // sysname
			[Column("database_name"),     Nullable] public string? DatabaseName  { get; set; } // sysname
			[Column("schema_name"),       Nullable] public string? SchemaName    { get; set; } // nvarchar(128)
			[Column("object_name"),    NotNull    ] public string  ObjectName    { get; set; } = null!; // nvarchar(128)
			[Column("state"),             Nullable] public byte?   State         { get; set; } // tinyint
			[Column("type"),           NotNull    ] public string  Type          { get; set; } = null!; // char(2)
			[Column("type_desc"),         Nullable] public string? TypeDesc      { get; set; } // nvarchar(60)
		}

		[Table(Schema="sys", Name="system_internals_allocation_units", IsView=true)]
		public partial class SystemInternalsAllocationUnits
		{
			[Column("allocation_unit_id"), NotNull    ] public long    AllocationUnitID { get; set; } // bigint
			[Column("type"),               NotNull    ] public byte    Type             { get; set; } // tinyint
			[Column("type_desc"),             Nullable] public string? TypeDesc         { get; set; } // nvarchar(60)
			[Column("container_id"),       NotNull    ] public long    ContainerID      { get; set; } // bigint
			[Column("filegroup_id"),       NotNull    ] public short   FilegroupID      { get; set; } // smallint
			[Column("total_pages"),        NotNull    ] public long    TotalPages       { get; set; } // bigint
			[Column("used_pages"),         NotNull    ] public long    UsedPages        { get; set; } // bigint
			[Column("data_pages"),         NotNull    ] public long    DataPages        { get; set; } // bigint
			[Column("first_page"),         NotNull    ] public byte[]  FirstPage        { get; set; } = null!; // binary(6)
			[Column("root_page"),          NotNull    ] public byte[]  RootPage         { get; set; } = null!; // binary(6)
			[Column("first_iam_page"),     NotNull    ] public byte[]  FirstIamPage     { get; set; } = null!; // binary(6)
		}

		[Table(Schema="sys", Name="system_internals_partition_columns", IsView=true)]
		public partial class SystemInternalsPartitionColumns
		{
			[Column("partition_id"),              NotNull    ] public long    PartitionID            { get; set; } // bigint
			[Column("partition_column_id"),       NotNull    ] public int     PartitionColumnID      { get; set; } // int
			[Column("modified_count"),            NotNull    ] public long    ModifiedCount          { get; set; } // bigint
			[Column("max_inrow_length"),             Nullable] public short?  MaxInrowLength         { get; set; } // smallint
			[Column("is_replicated"),                Nullable] public bool?   IsReplicated           { get; set; } // bit
			[Column("is_logged_for_replication"),    Nullable] public bool?   IsLoggedForReplication { get; set; } // bit
			[Column("is_dropped"),                   Nullable] public bool?   IsDropped              { get; set; } // bit
			[Column("system_type_id"),               Nullable] public byte?   SystemTypeID           { get; set; } // tinyint
			[Column("max_length"),                   Nullable] public short?  MaxLength              { get; set; } // smallint
			[Column("precision"),                    Nullable] public byte?   Precision              { get; set; } // tinyint
			[Column("scale"),                        Nullable] public byte?   Scale                  { get; set; } // tinyint
			[Column("collation_name"),               Nullable] public string? CollationName          { get; set; } // sysname
			[Column("is_filestream"),                Nullable] public bool?   IsFilestream           { get; set; } // bit
			[Column("key_ordinal"),               NotNull    ] public short   KeyOrdinal             { get; set; } // smallint
			[Column("is_nullable"),                  Nullable] public bool?   IsNullable             { get; set; } // bit
			[Column("is_descending_key"),            Nullable] public bool?   IsDescendingKey        { get; set; } // bit
			[Column("is_uniqueifier"),               Nullable] public bool?   IsUniqueifier          { get; set; } // bit
			[Column("leaf_offset"),                  Nullable] public short?  LeafOffset             { get; set; } // smallint
			[Column("internal_offset"),              Nullable] public short?  InternalOffset         { get; set; } // smallint
			[Column("leaf_bit_position"),            Nullable] public byte?   LeafBitPosition        { get; set; } // tinyint
			[Column("internal_bit_position"),        Nullable] public byte?   InternalBitPosition    { get; set; } // tinyint
			[Column("leaf_null_bit"),                Nullable] public short?  LeafNullBit            { get; set; } // smallint
			[Column("internal_null_bit"),            Nullable] public short?  InternalNullBit        { get; set; } // smallint
			[Column("is_anti_matter"),               Nullable] public bool?   IsAntiMatter           { get; set; } // bit
			[Column("partition_column_guid"),        Nullable] public Guid?   PartitionColumnGuid    { get; set; } // uniqueidentifier
			[Column("is_sparse"),                    Nullable] public bool?   IsSparse               { get; set; } // bit
			[Column("has_default"),               NotNull    ] public bool    HasDefault             { get; set; } // bit
			[Column("default_value"),                Nullable] public object? DefaultValue           { get; set; } // sql_variant
		}

		[Table(Schema="sys", Name="system_internals_partitions", IsView=true)]
		public partial class SystemInternalsPartitions
		{
			[Column("partition_id"),                NotNull    ] public long  PartitionID              { get; set; } // bigint
			[Column("object_id"),                   NotNull    ] public int   ObjectID                 { get; set; } // int
			[Column("index_id"),                    NotNull    ] public int   IndexID                  { get; set; } // int
			[Column("partition_number"),            NotNull    ] public int   PartitionNumber          { get; set; } // int
			[Column("rows"),                        NotNull    ] public long  Rows                     { get; set; } // bigint
			[Column("filestream_filegroup_id"),     NotNull    ] public short FilestreamFilegroupID    { get; set; } // smallint
			[Column("is_orphaned"),                    Nullable] public bool? IsOrphaned               { get; set; } // bit
			[Column("dropped_lob_column_state"),       Nullable] public byte? DroppedLobColumnState    { get; set; } // tinyint
			[Column("is_unique"),                      Nullable] public bool? IsUnique                 { get; set; } // bit
			[Column("is_replicated"),                  Nullable] public bool? IsReplicated             { get; set; } // bit
			[Column("is_logged_for_replication"),      Nullable] public bool? IsLoggedForReplication   { get; set; } // bit
			[Column("is_sereplicated"),             NotNull    ] public bool  IsSereplicated           { get; set; } // bit
			[Column("max_null_bit_used"),           NotNull    ] public short MaxNullBitUsed           { get; set; } // smallint
			[Column("max_leaf_length"),             NotNull    ] public int   MaxLeafLength            { get; set; } // int
			[Column("min_leaf_length"),             NotNull    ] public short MinLeafLength            { get; set; } // smallint
			[Column("max_internal_length"),         NotNull    ] public short MaxInternalLength        { get; set; } // smallint
			[Column("min_internal_length"),         NotNull    ] public short MinInternalLength        { get; set; } // smallint
			[Column("allows_nullable_keys"),           Nullable] public bool? AllowsNullableKeys       { get; set; } // bit
			[Column("allow_row_locks"),                Nullable] public bool? AllowRowLocks            { get; set; } // bit
			[Column("allow_page_locks"),               Nullable] public bool? AllowPageLocks           { get; set; } // bit
			[Column("is_data_row_format"),             Nullable] public bool? IsDataRowFormat          { get; set; } // bit
			[Column("is_not_versioned"),               Nullable] public bool? IsNotVersioned           { get; set; } // bit
			[Column("filestream_guid"),                Nullable] public Guid? FilestreamGuid           { get; set; } // uniqueidentifier
			[Column("ownertype"),                   NotNull    ] public byte  Ownertype                { get; set; } // tinyint
			[Column("is_columnstore"),                 Nullable] public bool? IsColumnstore            { get; set; } // bit
			[Column("optimize_for_sequential_key"),    Nullable] public bool? OptimizeForSequentialKey { get; set; } // bit

			#region Associations

			/// <summary>
			/// system_objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="system_objects", BackReferenceName="SystemInternalsPartitions")]
			public SystemSchema.SystemObjects SystemObject { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains one row for all schema-scoped system objects that are included with Microsoft SQL Server. All system objects are contained in the schemas named sys or INFORMATION_SCHEMA.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-system-objects-transact-sql?view=sql-server-ver15'>sys.system_objects</a>.
		/// </summary>
		[Table(Schema="sys", Name="system_objects", IsView=true)]
		public partial class SystemObjects
		{
			/// <summary>
			/// Object name.
			/// </summary>
			[Column("name"),                NotNull    ] public string   Name              { get; set; } = null!; // sysname
			/// <summary>
			/// Object identification number. Is unique within a database.
			/// </summary>
			[Column("object_id"),           NotNull    ] public int      ObjectID          { get; set; } // int
			/// <summary>
			/// ID of the individual owner if different from the schema owner. By default, schema-contained objects are owned by the schema owner. However, another owner can be specified by using the ALTER AUTHORIZATION statement to change ownership.<br/> Is NULL if there is no other individual owner.<br/> Is NULL if the object type is one of the following:<br/> C = CHECK constraint<br/> D = DEFAULT (constraint or stand-alone)<br/> F = FOREIGN KEY constraint<br/> PK = PRIMARY KEY constraint<br/> R = Rule (old-style, stand-alone)<br/> TA = Assembly (CLR) trigger<br/> TR = SQL trigger<br/> UQ = UNIQUE constraint
			/// </summary>
			[Column("principal_id"),           Nullable] public int?     PrincipalID       { get; set; } // int
			/// <summary>
			/// ID of the schema that the object is contained in.<br/> For all schema-scoped system objects that included with SQL Server, this value will always be in (schema_id(&apos;sys&apos;), schema_id(&apos;INFORMATION_SCHEMA&apos;))
			/// </summary>
			[Column("schema_id"),           NotNull    ] public int      SchemaID          { get; set; } // int
			/// <summary>
			/// ID of the object to which this object belongs.<br/> 0 = Not a child object.
			/// </summary>
			[Column("parent_object_id"),       Nullable] public int?     ParentObjectID    { get; set; } // int
			/// <summary>
			/// Object type:<br/> AF = Aggregate function (CLR)<br/> C = CHECK constraint<br/> D = DEFAULT (constraint or stand-alone)<br/> F = FOREIGN KEY constraint<br/> FN = SQL scalar function<br/> FS = Assembly (CLR) scalar-function<br/> FT = Assembly (CLR) table-valued function<br/> IF = SQL inline table-valued function<br/> IT = Internal table<br/> P = SQL Stored Procedure<br/> PC = Assembly (CLR) stored-procedure<br/> PG = Plan guide<br/> PK = PRIMARY KEY constraint<br/> R = Rule (old-style, stand-alone)<br/> RF = Replication-filter-procedure<br/> S = System base table<br/> SN = Synonym<br/> SQ = Service queue<br/> TA = Assembly (CLR) DML trigger<br/> TF = SQL table-valued-function<br/> TR = SQL DML trigger<br/> TT = Table type<br/> U = Table (user-defined)<br/> UQ = UNIQUE constraint<br/> V = View<br/> X = Extended stored procedure
			/// </summary>
			[Column("type"),                NotNull    ] public string   Type              { get; set; } = null!; // char(2)
			/// <summary>
			/// Description of the object type. AGGREGATE_FUNCTION<br/> CHECK_CONSTRAINT<br/> DEFAULT_CONSTRAINT<br/> FOREIGN_KEY_CONSTRAINT<br/> SQL_SCALAR_FUNCTION<br/> CLR_SCALAR_FUNCTION<br/> CLR_TABLE_VALUED_FUNCTION<br/> SQL_INLINE_TABLE_VALUED_FUNCTION<br/> INTERNAL_TABLE<br/> SQL_STORED_PROCEDURE<br/> CLR_STORED_PROCEDURE<br/> PLAN_GUIDE<br/> PRIMARY_KEY_CONSTRAINT<br/> RULE<br/> REPLICATION_FILTER_PROCEDURE<br/> SYSTEM_TABLE<br/> SYNONYM<br/> SERVICE_QUEUE<br/> CLR_TRIGGER<br/> SQL_TABLE_VALUED_FUNCTION<br/> SQL_TRIGGER<br/> TABLE_TYPE<br/> USER_TABLE<br/> UNIQUE_CONSTRAINT<br/> VIEW<br/> EXTENDED_STORED_PROCEDURE
			/// </summary>
			[Column("type_desc"),              Nullable] public string?  TypeDesc          { get; set; } // nvarchar(60)
			/// <summary>
			/// Date the object was created.
			/// </summary>
			[Column("create_date"),         NotNull    ] public DateTime CreateDate        { get; set; } // datetime
			/// <summary>
			/// Date the object was last modified by using an ALTER statement. If the object is a table or a view, modify_date also changes when a clustered index on the table or view is created or altered.
			/// </summary>
			[Column("modify_date"),         NotNull    ] public DateTime ModifyDate        { get; set; } // datetime
			/// <summary>
			/// Object is created by an internal Microsoft SQL Server component.
			/// </summary>
			[Column("is_ms_shipped"),          Nullable] public bool?    IsMsShipped       { get; set; } // bit
			/// <summary>
			/// Object is published.
			/// </summary>
			[Column("is_published"),           Nullable] public bool?    IsPublished       { get; set; } // bit
			/// <summary>
			/// Only the schema of the object is published.
			/// </summary>
			[Column("is_schema_published"),    Nullable] public bool?    IsSchemaPublished { get; set; } // bit

			#region Associations

			/// <summary>
			/// system_columns
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.SystemColumns> SystemColumns { get; set; } = null!;

			/// <summary>
			/// system_internals_partitions
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.SystemInternalsPartitions> SystemInternalsPartitions { get; set; } = null!;

			/// <summary>
			/// system_parameters
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.SystemParameters> SystemParameters { get; set; } = null!;

			/// <summary>
			/// system_sql_modules
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
			public IList<SystemSchema.SystemSqlModules> SystemSqlModules { get; set; } = null!;

			/// <summary>
			/// system_views
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToOne, IsBackReference=true)]
			public SystemSchema.SystemViews? SystemView { get; set; }

			#endregion
		}

		/// <summary>
		/// Contains one row for each system object that has parameters.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-system-parameters-transact-sql?view=sql-server-ver15'>sys.system_parameters</a>.
		/// </summary>
		[Table(Schema="sys", Name="system_parameters", IsView=true)]
		public partial class SystemParameters
		{
			/// <summary>
			/// ID of the object to which this parameter belongs.
			/// </summary>
			[Column("object_id"),                           NotNull    ] public int     ObjectID                        { get; set; } // int
			/// <summary>
			/// Name of the parameter. Is unique within the object.<br/> If the object is a scalar function, the parameter name is an empty string in the row representing the return value.
			/// </summary>
			[Column("name"),                                   Nullable] public string? Name                            { get; set; } // sysname
			/// <summary>
			/// ID of the parameter. Is unique within the object. If the object is a scalar function, <b>parameter_id</b> = 0 represents the return value.
			/// </summary>
			[Column("parameter_id"),                        NotNull    ] public int     ParameterID                     { get; set; } // int
			/// <summary>
			/// ID of the system type of the parameter.
			/// </summary>
			[Column("system_type_id"),                      NotNull    ] public byte    SystemTypeID                    { get; set; } // tinyint
			/// <summary>
			/// ID of the type of the parameter as defined by the user.<br/> To return the name of the type, join to the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-types-transact-sql?view=sql-server-ver15'>sys.types</a> catalog view on this column.
			/// </summary>
			[Column("user_type_id"),                        NotNull    ] public int     UserTypeID                      { get; set; } // int
			/// <summary>
			/// Maximum length of the parameter, in bytes. Value will be -1 for when column data type is <b>varchar(max)</b>, <b>nvarchar(max)</b>, <b>varbinary(max)</b>, or <b>xml</b>.
			/// </summary>
			[Column("max_length"),                          NotNull    ] public short   MaxLength                       { get; set; } // smallint
			/// <summary>
			/// Precision of the parameter if numeric-based; otherwise, 0.
			/// </summary>
			[Column("precision"),                           NotNull    ] public byte    Precision                       { get; set; } // tinyint
			/// <summary>
			/// Scale of the parameter if numeric-based; otherwise, 0.
			/// </summary>
			[Column("scale"),                               NotNull    ] public byte    Scale                           { get; set; } // tinyint
			/// <summary>
			/// 1 = Parameter is output (or return); otherwise, 0.
			/// </summary>
			[Column("is_output"),                           NotNull    ] public bool    IsOutput                        { get; set; } // bit
			/// <summary>
			/// 1 = Parameter is a cursor-reference parameter.
			/// </summary>
			[Column("is_cursor_ref"),                       NotNull    ] public bool    IsCursorRef                     { get; set; } // bit
			/// <summary>
			/// 1 = Parameter has default value.<br/> SQL Server only maintains default values for CLR objects in this catalog view; therefore, this column will always have a value of 0 for Transact-SQL objects. To view the default value of a parameter in a Transact-SQL object, query the <b>definition</b> column of the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-sql-modules-transact-sql?view=sql-server-ver15'>sys.sql_modules</a> catalog view, or use the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/functions/object-definition-transact-sql?view=sql-server-ver15'>OBJECT_DEFINITION</a> system function.
			/// </summary>
			[Column("has_default_value"),                   NotNull    ] public bool    HasDefaultValue                 { get; set; } // bit
			/// <summary>
			/// 1 = Content is a complete XML document.<br/> 0 = Content is a document fragment or the data type of the column is not <b>xml</b>.
			/// </summary>
			[Column("is_xml_document"),                     NotNull    ] public bool    IsXmlDocument                   { get; set; } // bit
			/// <summary>
			/// If <b>has_default_value</b> is 1, the value of this column is the value of the default for the parameter; otherwise <i>NULL</i>.
			/// </summary>
			[Column("default_value"),                          Nullable] public object? DefaultValue                    { get; set; } // sql_variant
			/// <summary>
			/// Non-zero if the data type of the parameter is <b>xml</b> and the XML is typed. The value is the ID of the collection that contains the validating XML schema namespace for the parameter.<br/> 0 = There is no XML schema collection.
			/// </summary>
			[Column("xml_collection_id"),                   NotNull    ] public int     XmlCollectionID                 { get; set; } // int
			/// <summary>
			/// 1 =  Parameter is READONLY; otherwise, 0.
			/// </summary>
			[Column("is_readonly"),                         NotNull    ] public bool    IsReadonly                      { get; set; } // bit
			/// <summary>
			/// 1 = Parameter is nullable. (the default).<br/> 0 = Parameter is not nullable, for more efficient execution of natively-compiled stored procedures.
			/// </summary>
			[Column("is_nullable"),                            Nullable] public bool?   IsNullable                      { get; set; } // bit
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> Encryption type:<br/> 1 = Deterministic encryption<br/> 2 = Randomized encryption
			/// </summary>
			[Column("encryption_type"),                        Nullable] public int?    EncryptionType                  { get; set; } // int
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> Encryption type description:<br/> RANDOMIZED<br/> DETERMINISTIC
			/// </summary>
			[Column("encryption_type_desc"),                   Nullable] public string? EncryptionTypeDesc              { get; set; } // nvarchar(64)
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> Name of encryption algorithm.<br/> Only AEAD_AES_256_CBC_HMAC_SHA_512 is supported.
			/// </summary>
			[Column("encryption_algorithm_name"),              Nullable] public string? EncryptionAlgorithmName         { get; set; } // sysname
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> ID of the CEK.
			/// </summary>
			[Column("column_encryption_key_id"),               Nullable] public int?    ColumnEncryptionKeyID           { get; set; } // int
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, SQL Database.<br/> The name of the database where the column encryption key exists if different than the database of the column. <i>NULL</i> if the key exists in the same database as the column.
			/// </summary>
			[Column("column_encryption_key_database_name"),    Nullable] public string? ColumnEncryptionKeyDatabaseName { get; set; } // sysname

			#region Associations

			/// <summary>
			/// system_objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="system_objects", BackReferenceName="SystemParameters")]
			public SystemSchema.SystemObjects SystemObject { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Returns one row per system object that contains an SQL language-defined module. System objects of type FN, IF, P, PC, TF, V have an associated SQL module. To identify the containing object, you can join this view to <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-system-objects-transact-sql?view=sql-server-ver15'>sys.system_objects</a>.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-system-sql-modules-transact-sql?view=sql-server-ver15'>sys.system_sql_modules</a>.
		/// </summary>
		[Table(Schema="sys", Name="system_sql_modules", IsView=true)]
		public partial class SystemSqlModules
		{
			/// <summary>
			/// Object identification number of the containing object, unique within a database.
			/// </summary>
			[Column("object_id"),               NotNull    ] public int     ObjectID              { get; set; } // int
			/// <summary>
			/// SQL text that defines this module.
			/// </summary>
			[Column("definition"),                 Nullable] public string? Definition            { get; set; } // nvarchar(max)
			/// <summary>
			/// 1 = Module was created with the SET ANSI_NULLS database option ON.<br/> Always returns 1.
			/// </summary>
			[Column("uses_ansi_nulls"),         NotNull    ] public bool    UsesAnsiNulls         { get; set; } // bit
			/// <summary>
			/// 1 = Module was created with SET QUOTED_IDENTIFIER ON.<br/> Always returns 1.
			/// </summary>
			[Column("uses_quoted_identifier"),  NotNull    ] public bool    UsesQuotedIdentifier  { get; set; } // bit
			/// <summary>
			/// 0 = Module was not created with the SCHEMABINDING option.<br/> Always returns 0.
			/// </summary>
			[Column("is_schema_bound"),         NotNull    ] public bool    IsSchemaBound         { get; set; } // bit
			/// <summary>
			/// 0 = Module does not depend on the default collation of the database.<br/> Always returns 0.
			/// </summary>
			[Column("uses_database_collation"), NotNull    ] public bool    UsesDatabaseCollation { get; set; } // bit
			/// <summary>
			/// 0 = Procedure was not created by using the WITH RECOMPILE option.<br/> Always returns 0.
			/// </summary>
			[Column("is_recompiled"),           NotNull    ] public bool    IsRecompiled          { get; set; } // bit
			/// <summary>
			/// 0 = Module was not created to produce a NULL output on any NULL input.<br/> Always returns 0.
			/// </summary>
			[Column("null_on_null_input"),      NotNull    ] public bool    NullOnNullInput       { get; set; } // bit
			/// <summary>
			/// Always returns NULL
			/// </summary>
			[Column("execute_as_principal_id"),    Nullable] public int?    ExecuteAsPrincipalID  { get; set; } // int
			[Column("uses_native_compilation"), NotNull    ] public bool    UsesNativeCompilation { get; set; } // bit
			[Column("inline_type"),             NotNull    ] public bool    InlineType            { get; set; } // bit
			[Column("is_inlineable"),           NotNull    ] public bool    IsInlineable          { get; set; } // bit

			#region Associations

			/// <summary>
			/// system_objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="system_objects", BackReferenceName="SystemSqlModules")]
			public SystemSchema.SystemObjects SystemObject { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Contains one row for each system view that is shipped with SQL Server. All system views are contained in the schemas named <b>sys</b> or <b>INFORMATION_SCHEMA</b>.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-system-views-transact-sql?view=sql-server-ver15'>sys.system_views</a>.
		/// </summary>
		[Table(Schema="sys", Name="system_views", IsView=true)]
		public partial class SystemViews
		{
			[Column("name"),                        NotNull    ] public string   Name                     { get; set; } = null!; // sysname
			[Column("object_id"),                   NotNull    ] public int      ObjectID                 { get; set; } // int
			[Column("principal_id"),                   Nullable] public int?     PrincipalID              { get; set; } // int
			[Column("schema_id"),                   NotNull    ] public int      SchemaID                 { get; set; } // int
			[Column("parent_object_id"),               Nullable] public int?     ParentObjectID           { get; set; } // int
			[Column("type"),                        NotNull    ] public string   Type                     { get; set; } = null!; // char(2)
			[Column("type_desc"),                      Nullable] public string?  TypeDesc                 { get; set; } // nvarchar(60)
			[Column("create_date"),                 NotNull    ] public DateTime CreateDate               { get; set; } // datetime
			[Column("modify_date"),                 NotNull    ] public DateTime ModifyDate               { get; set; } // datetime
			[Column("is_ms_shipped"),                  Nullable] public bool?    IsMsShipped              { get; set; } // bit
			[Column("is_published"),                   Nullable] public bool?    IsPublished              { get; set; } // bit
			[Column("is_schema_published"),            Nullable] public bool?    IsSchemaPublished        { get; set; } // bit
			/// <summary>
			/// 1 = View is replicated.
			/// </summary>
			[Column("is_replicated"),               NotNull    ] public bool     IsReplicated             { get; set; } // bit
			/// <summary>
			/// 1 = View has a replication filter.
			/// </summary>
			[Column("has_replication_filter"),      NotNull    ] public bool     HasReplicationFilter     { get; set; } // bit
			/// <summary>
			/// 1 = VIEW_METADATA option specified for view. For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/create-view-transact-sql?view=sql-server-ver15'>CREATE VIEW (Transact-SQL)</a>.
			/// </summary>
			[Column("has_opaque_metadata"),         NotNull    ] public bool     HasOpaqueMetadata        { get; set; } // bit
			/// <summary>
			/// 1 = Table contains persisted data that depends on an assembly whose definition changed during the last ALTER ASSEMBLY. Will be reset to 0 after the next successful DBCC CHECKDB or DBCC CHECKTABLE.
			/// </summary>
			[Column("has_unchecked_assembly_data"), NotNull    ] public bool     HasUncheckedAssemblyData { get; set; } // bit
			/// <summary>
			/// 1 = WITH CHECK OPTION was specified in the view definition.
			/// </summary>
			[Column("with_check_option"),           NotNull    ] public bool     WithCheckOption          { get; set; } // bit
			/// <summary>
			/// 1 = View was created automatically by the system to store correlation information between <b>datetime</b> columns. Creation of this view was enabled by setting DATE_CORRELATION_OPTIMIZATION to ON.
			/// </summary>
			[Column("is_date_correlation_view"),    NotNull    ] public bool     IsDateCorrelationView    { get; set; } // bit
			[Column("is_tracked_by_cdc"),           NotNull    ] public bool     IsTrackedByCdc           { get; set; } // bit
			[Column("has_snapshot"),                NotNull    ] public bool     HasSnapshot              { get; set; } // bit

			#region Associations

			/// <summary>
			/// system_objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.OneToOne, KeyName="system_objects", BackReferenceName="SystemView")]
			public SystemSchema.SystemObjects SystemObject { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Returns a row for each user table in SQL Server.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-tables-transact-sql?view=sql-server-ver15'>sys.tables</a>.
		/// </summary>
		[Table(Schema="sys", Name="tables", IsView=true)]
		public partial class Tables
		{
			[Column("name"),                               NotNull    ] public string   Name                           { get; set; } = null!; // sysname
			[Column("object_id"),                          NotNull    ] public int      ObjectID                       { get; set; } // int
			[Column("principal_id"),                          Nullable] public int?     PrincipalID                    { get; set; } // int
			[Column("schema_id"),                          NotNull    ] public int      SchemaID                       { get; set; } // int
			[Column("parent_object_id"),                   NotNull    ] public int      ParentObjectID                 { get; set; } // int
			[Column("type"),                                  Nullable] public string?  Type                           { get; set; } // char(2)
			[Column("type_desc"),                             Nullable] public string?  TypeDesc                       { get; set; } // nvarchar(60)
			[Column("create_date"),                        NotNull    ] public DateTime CreateDate                     { get; set; } // datetime
			[Column("modify_date"),                        NotNull    ] public DateTime ModifyDate                     { get; set; } // datetime
			[Column("is_ms_shipped"),                      NotNull    ] public bool     IsMsShipped                    { get; set; } // bit
			[Column("is_published"),                       NotNull    ] public bool     IsPublished                    { get; set; } // bit
			[Column("is_schema_published"),                NotNull    ] public bool     IsSchemaPublished              { get; set; } // bit
			/// <summary>
			/// A nonzero value is the ID of the data space (filegroup or partition scheme) that holds the large object binary (LOB) data for this table. Examples of LOB data types include <b>varbinary(max)</b>, <b>varchar(max)</b>, <b>geography</b>, or <b>xml</b>.<br/> 0 = The table does not LOB data.
			/// </summary>
			[Column("lob_data_space_id"),                  NotNull    ] public int      LobDataSpaceID                 { get; set; } // int
			/// <summary>
			/// Is the data space ID for a FILESTREAM filegroup or a partition scheme that consists of FILESTREAM filegroups.<br/> To report the name of a FILESTREAM filegroup, execute the query <i>SELECT FILEGROUP_NAME (filestream_data_space_id) FROM sys.tables</i>.<br/> sys.tables can be joined to the following views on filestream_data_space_id = data_space_id.<br/> - sys.filegroups<br/> - sys.partition_schemes<br/> - sys.indexes<br/> - sys.allocation_units<br/> - sys.fulltext_catalogs<br/> - sys.data_spaces<br/> - sys.destination_data_spaces<br/> - sys.master_files<br/> - sys.database_files<br/> - backupfilegroup (join on filegroup_id)
			/// </summary>
			[Column("filestream_data_space_id"),              Nullable] public int?     FilestreamDataSpaceID          { get; set; } // int
			/// <summary>
			/// Maximum column ID ever used by this table.
			/// </summary>
			[Column("max_column_id_used"),                 NotNull    ] public int      MaxColumnIdUsed                { get; set; } // int
			/// <summary>
			/// Table is locked on bulk load. For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../system-stored-procedures/sp-tableoption-transact-sql?view=sql-server-ver15'>sp_tableoption (Transact-SQL)</a>.
			/// </summary>
			[Column("lock_on_bulk_load"),                  NotNull    ] public bool     LockOnBulkLoad                 { get; set; } // bit
			/// <summary>
			/// Table was created with the SET ANSI_NULLS database option ON.
			/// </summary>
			[Column("uses_ansi_nulls"),                       Nullable] public bool?    UsesAnsiNulls                  { get; set; } // bit
			/// <summary>
			/// 1 = Table is published using snapshot replication or transactional replication.
			/// </summary>
			[Column("is_replicated"),                         Nullable] public bool?    IsReplicated                   { get; set; } // bit
			/// <summary>
			/// 1 = Table has a replication filter.
			/// </summary>
			[Column("has_replication_filter"),                Nullable] public bool?    HasReplicationFilter           { get; set; } // bit
			/// <summary>
			/// 1 = Table is published using merge replication.
			/// </summary>
			[Column("is_merge_published"),                    Nullable] public bool?    IsMergePublished               { get; set; } // bit
			/// <summary>
			/// 1 = Table is subscribed using an immediate updating subscription.
			/// </summary>
			[Column("is_sync_tran_subscribed"),               Nullable] public bool?    IsSyncTranSubscribed           { get; set; } // bit
			/// <summary>
			/// 1 = Table contains persisted data that depends on an assembly whose definition changed during the last ALTER ASSEMBLY. Will be reset to 0 after the next successful DBCC CHECKDB or DBCC CHECKTABLE.
			/// </summary>
			[Column("has_unchecked_assembly_data"),        NotNull    ] public bool     HasUncheckedAssemblyData       { get; set; } // bit
			/// <summary>
			/// The maximum bytes allowed for text in row.<br/> 0 = Text in row option is not set. For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../system-stored-procedures/sp-tableoption-transact-sql?view=sql-server-ver15'>sp_tableoption (Transact-SQL)</a>.
			/// </summary>
			[Column("text_in_row_limit"),                     Nullable] public int?     TextInRowLimit                 { get; set; } // int
			/// <summary>
			/// 1 = Large value types are stored out-of-row. For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../system-stored-procedures/sp-tableoption-transact-sql?view=sql-server-ver15'>sp_tableoption (Transact-SQL)</a>.
			/// </summary>
			[Column("large_value_types_out_of_row"),          Nullable] public bool?    LargeValueTypesOutOfRow        { get; set; } // bit
			/// <summary>
			/// 1 = Table is enabled for change data capture. For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../system-stored-procedures/sys-sp-cdc-enable-table-transact-sql?view=sql-server-ver15'>sys.sp_cdc_enable_table (Transact-SQL)</a>.
			/// </summary>
			[Column("is_tracked_by_cdc"),                     Nullable] public bool?    IsTrackedByCdc                 { get; set; } // bit
			/// <summary>
			/// The value of the LOCK_ESCALATION option for the table:<br/> 0 = TABLE<br/> 1 = DISABLE<br/> 2 = AUTO
			/// </summary>
			[Column("lock_escalation"),                       Nullable] public byte?    LockEscalation                 { get; set; } // tinyint
			/// <summary>
			/// A text description of the lock_escalation option for the table. Possible values are: TABLE, AUTO, and DISABLE.
			/// </summary>
			[Column("lock_escalation_desc"),                  Nullable] public string?  LockEscalationDesc             { get; set; } // nvarchar(60)
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2012 (11.x) and later and Azure SQL Database.<br/> 1 = Table is a FileTable.<br/> For more information about FileTables, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../blob/filetables-sql-server?view=sql-server-ver15'>FileTables (SQL Server)</a>.
			/// </summary>
			[Column("is_filetable"),                          Nullable] public bool?    IsFiletable                    { get; set; } // bit
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2014 (12.x) and later and Azure SQL Database.<br/> The following are the possible values:<br/> 0 = not memory optimized.<br/> 1 = is memory optimized.<br/> A value of 0 is the default value.<br/> Memory optimized tables are in-memory user tables, the schema of which is persisted on disk similar to other user tables. Memory optimized tables can be accessed from natively compiled stored procedures.
			/// </summary>
			[Column("is_memory_optimized"),                   Nullable] public bool?    IsMemoryOptimized              { get; set; } // bit
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2014 (12.x) and later and Azure SQL Database.<br/> The following are possible values:<br/> 0 = SCHEMA_AND_DATA<br/> 1 = SCHEMA_ONLY<br/> The value of 0 is the default value.
			/// </summary>
			[Column("durability"),                            Nullable] public byte?    Durability                     { get; set; } // tinyint
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2014 (12.x) and later and Azure SQL Database.<br/> The following are the possible values:<br/> SCHEMA_ONLY<br/> SCHEMA_AND_DATA<br/> The value of SCHEMA_AND_DATA indicates that the table is a durable, in-memory table. SCHEMA_AND_DATA is the default value for memory optimized tables. The value of SCHEMA_ONLY indicates that the table data will not be persisted upon restart of the database with memory optimized objects.
			/// </summary>
			[Column("durability_desc"),                       Nullable] public string?  DurabilityDesc                 { get; set; } // nvarchar(60)
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later and Azure SQL Database.<br/> The numeric value representing the type of table:<br/> 0 = NON_TEMPORAL_TABLE<br/> 1 = HISTORY_TABLE (associated with a temporal table)<br/> 2 = SYSTEM_VERSIONED_TEMPORAL_TABLE
			/// </summary>
			[Column("temporal_type"),                         Nullable] public byte?    TemporalType                   { get; set; } // tinyint
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later and Azure SQL Database.<br/> The text description of the type of table:<br/> NON_TEMPORAL_TABLE<br/> HISTORY_TABLE<br/> SYSTEM_VERSIONED_TEMPORAL_TABLE
			/// </summary>
			[Column("temporal_type_desc"),                    Nullable] public string?  TemporalTypeDesc               { get; set; } // nvarchar(60)
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later and Azure SQL Database.<br/> When temporal_type = 2 or ledger_type = 2 returns object_id of the table that maintains historical data for a temporal table, otherwise returns NULL.
			/// </summary>
			[Column("history_table_id"),                      Nullable] public int?     HistoryTableID                 { get; set; } // int
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later and Azure SQL Database<br/> Indicates whether the table is Stretch-enabled.<br/> 0 = The table is not Stretch-enabled.<br/> 1 = The table is Stretch-enabled.<br/> For more info, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../sql-server/stretch-database/stretch-database?view=sql-server-ver15'>Stretch Database</a>.
			/// </summary>
			[Column("is_remote_data_archive_enabled"),        Nullable] public bool?    IsRemoteDataArchiveEnabled     { get; set; } // bit
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2016 (13.x) and later, Azure SQL Database, and Azure Synapse Analytics.<br/> Indicates table is an external table.<br/> 0 = The table is not an external table.<br/> 1 = The table is an external table.
			/// </summary>
			[Column("is_external"),                        NotNull    ] public bool     IsExternal                     { get; set; } // bit
			/// <summary>
			/// <b>Applies to</b>: Azure SQL Database. <br/><br/>The numeric value representing duration of the temporal history retention period in units specified with history_retention_period_unit.
			/// </summary>
			[Column("history_retention_period"),              Nullable] public int?     HistoryRetentionPeriod         { get; set; } // int
			/// <summary>
			/// <b>Applies to</b>: Azure SQL Database. <br/><br/>The numeric value representing type of temporal history retention period unit. <br/><br/>-1: INFINITE <br/><br/>3: DAY <br/><br/>4: WEEK <br/><br/>5: MONTH <br/><br/>6: YEAR
			/// </summary>
			[Column("history_retention_period_unit"),         Nullable] public int?     HistoryRetentionPeriodUnit     { get; set; } // int
			/// <summary>
			/// <b>Applies to</b>: Azure SQL Database. <br/><br/>The text description of type of temporal history retention period unit. <br/><br/>INFINITE <br/><br/>DAY <br/><br/>WEEK <br/><br/>MONTH <br/><br/>YEAR
			/// </summary>
			[Column("history_retention_period_unit_desc"),    Nullable] public string?  HistoryRetentionPeriodUnitDesc { get; set; } // nvarchar(10)
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2017 (14.x) and Azure SQL Database. <br/><br/>1 = This is a graph Node table. <br/><br/>0 = This is not a graph Node table.
			/// </summary>
			[Column("is_node"),                               Nullable] public bool?    IsNode                         { get; set; } // bit
			/// <summary>
			/// <b>Applies to</b>: Azure SQL Database. <br/><br/>1 = This is a graph Edge table. <br/><br/>0 = This is not a graph Edge table.
			/// </summary>
			[Column("is_edge"),                               Nullable] public bool?    IsEdge                         { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.OneToOne, KeyName="objects", BackReferenceName="Table")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Displays properties of user-defined table types in SQL Server. A table type is a type from which table variables or table-valued parameters could be declared. Each table type has a <b>type_table_object_id</b> that is a foreign key into the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-objects-transact-sql?view=sql-server-ver15'>sys.objects</a> catalog view. You can use this ID column to query various catalog views, in a way that is similar to an <b>object_id</b> column of a regular table, to discover the structure of the table type such as its columns and constraints.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-table-types-transact-sql?view=sql-server-ver15'>sys.table_types</a>.
		/// </summary>
		[Table(Schema="sys", Name="table_types", IsView=true)]
		public partial class TableTypes
		{
			[Column("name"),                 NotNull    ] public string  Name              { get; set; } = null!; // sysname
			[Column("system_type_id"),       NotNull    ] public byte    SystemTypeID      { get; set; } // tinyint
			[Column("user_type_id"),         NotNull    ] public int     UserTypeID        { get; set; } // int
			[Column("schema_id"),            NotNull    ] public int     SchemaID          { get; set; } // int
			[Column("principal_id"),            Nullable] public int?    PrincipalID       { get; set; } // int
			[Column("max_length"),           NotNull    ] public short   MaxLength         { get; set; } // smallint
			[Column("precision"),            NotNull    ] public byte    Precision         { get; set; } // tinyint
			[Column("scale"),                NotNull    ] public byte    Scale             { get; set; } // tinyint
			[Column("collation_name"),          Nullable] public string? CollationName     { get; set; } // sysname
			[Column("is_nullable"),             Nullable] public bool?   IsNullable        { get; set; } // bit
			[Column("is_user_defined"),      NotNull    ] public bool    IsUserDefined     { get; set; } // bit
			[Column("is_assembly_type"),     NotNull    ] public bool    IsAssemblyType    { get; set; } // bit
			[Column("default_object_id"),    NotNull    ] public int     DefaultObjectID   { get; set; } // int
			[Column("rule_object_id"),       NotNull    ] public int     RuleObjectID      { get; set; } // int
			[Column("is_table_type"),        NotNull    ] public bool    IsTableType       { get; set; } // bit
			/// <summary>
			/// Object identification number. This number is unique within a database.
			/// </summary>
			[Column("type_table_object_id"), NotNull    ] public int     TypeTableObjectID { get; set; } // int
			/// <summary>
			/// <b>Applies to</b>: SQL Server 2014 (12.x) and later.<br/> The following are the possible values:<br/> 0 = is not memory optimized<br/> 1 = is memory optimized<br/> A value of 0 is the default value.<br/> Table types are always created with DURABILITY = SCHEMA_ONLY. Only the schema is persisted on disk.
			/// </summary>
			[Column("is_memory_optimized"),     Nullable] public bool?   IsMemoryOptimized { get; set; } // bit
		}

		[Table(Schema="sys", Name="tcp_endpoints", IsView=true)]
		public partial class TcpEndpoints
		{
			[Column("name"),              NotNull    ] public string  Name            { get; set; } = null!; // sysname
			[Column("endpoint_id"),       NotNull    ] public int     EndpointID      { get; set; } // int
			[Column("principal_id"),         Nullable] public int?    PrincipalID     { get; set; } // int
			[Column("protocol"),          NotNull    ] public byte    Protocol        { get; set; } // tinyint
			[Column("protocol_desc"),        Nullable] public string? ProtocolDesc    { get; set; } // nvarchar(60)
			[Column("type"),              NotNull    ] public byte    Type            { get; set; } // tinyint
			[Column("type_desc"),            Nullable] public string? TypeDesc        { get; set; } // nvarchar(60)
			[Column("state"),                Nullable] public byte?   State           { get; set; } // tinyint
			[Column("state_desc"),           Nullable] public string? StateDesc       { get; set; } // nvarchar(60)
			[Column("is_admin_endpoint"), NotNull    ] public bool    IsAdminEndpoint { get; set; } // bit
			[Column("port"),              NotNull    ] public int     Port            { get; set; } // int
			[Column("is_dynamic_port"),   NotNull    ] public bool    IsDynamicPort   { get; set; } // bit
			[Column("ip_address"),           Nullable] public string? IpAddress       { get; set; } // varchar(45)
		}

		[Table(Schema="sys", Name="time_zone_info", IsView=true)]
		public partial class TimeZoneInfo
		{
			[Column("name"),               NotNull] public string Name             { get; set; } = null!; // nvarchar(128)
			[Column("current_utc_offset"), NotNull] public string CurrentUtcOffset { get; set; } = null!; // nvarchar(6)
			[Column("is_currently_dst"),   NotNull] public bool   IsCurrentlyDst   { get; set; } // bit
		}

		[Table(Schema="sys", Name="trace_categories", IsView=true)]
		public partial class TraceCategories
		{
			[Column("category_id"), NotNull    ] public short   CategoryID { get; set; } // smallint
			[Column("name"),           Nullable] public string? Name       { get; set; } // nvarchar(128)
			[Column("type"),        NotNull    ] public byte    Type       { get; set; } // tinyint
		}

		[Table(Schema="sys", Name="trace_columns", IsView=true)]
		public partial class TraceColumns
		{
			[Column("trace_column_id"),  NotNull    ] public short   TraceColumnID  { get; set; } // smallint
			[Column("name"),                Nullable] public string? Name           { get; set; } // nvarchar(128)
			[Column("type_name"),           Nullable] public string? TypeName       { get; set; } // nvarchar(128)
			[Column("max_size"),            Nullable] public int?    MaxSize        { get; set; } // int
			[Column("is_filterable"),    NotNull    ] public bool    IsFilterable   { get; set; } // bit
			[Column("is_repeatable"),    NotNull    ] public bool    IsRepeatable   { get; set; } // bit
			[Column("is_repeated_base"), NotNull    ] public bool    IsRepeatedBase { get; set; } // bit
		}

		[Table(Schema="sys", Name="trace_event_bindings", IsView=true)]
		public partial class TraceEventBindings
		{
			[Column("trace_event_id"),  NotNull] public short TraceEventID  { get; set; } // smallint
			[Column("trace_column_id"), NotNull] public short TraceColumnID { get; set; } // smallint
		}

		[Table(Schema="sys", Name="trace_events", IsView=true)]
		public partial class TraceEvents
		{
			[Column("trace_event_id"), NotNull    ] public short   TraceEventID { get; set; } // smallint
			[Column("category_id"),    NotNull    ] public short   CategoryID   { get; set; } // smallint
			[Column("name"),              Nullable] public string? Name         { get; set; } // nvarchar(128)
		}

		[Table(Schema="sys", Name="traces", IsView=true)]
		public partial class Traces
		{
			[Column("id"),                  NotNull    ] public int       Id                { get; set; } // int
			[Column("status"),              NotNull    ] public int       Status            { get; set; } // int
			[Column("path"),                   Nullable] public string?   Path              { get; set; } // nvarchar(260)
			[Column("max_size"),               Nullable] public long?     MaxSize           { get; set; } // bigint
			[Column("stop_time"),              Nullable] public DateTime? StopTime          { get; set; } // datetime
			[Column("max_files"),              Nullable] public int?      MaxFiles          { get; set; } // int
			[Column("is_rowset"),              Nullable] public bool?     IsRowset          { get; set; } // bit
			[Column("is_rollover"),            Nullable] public bool?     IsRollover        { get; set; } // bit
			[Column("is_shutdown"),            Nullable] public bool?     IsShutdown        { get; set; } // bit
			[Column("is_default"),             Nullable] public bool?     IsDefault         { get; set; } // bit
			[Column("buffer_count"),           Nullable] public int?      BufferCount       { get; set; } // int
			[Column("buffer_size"),            Nullable] public int?      BufferSize        { get; set; } // int
			[Column("file_position"),          Nullable] public long?     FilePosition      { get; set; } // bigint
			[Column("reader_spid"),            Nullable] public int?      ReaderSpid        { get; set; } // int
			[Column("start_time"),             Nullable] public DateTime? StartTime         { get; set; } // datetime
			[Column("last_event_time"),        Nullable] public DateTime? LastEventTime     { get; set; } // datetime
			[Column("event_count"),            Nullable] public long?     EventCount        { get; set; } // bigint
			[Column("dropped_event_count"),    Nullable] public int?      DroppedEventCount { get; set; } // int
		}

		[Table(Schema="sys", Name="trace_subclass_values", IsView=true)]
		public partial class TraceSubclassValues
		{
			[Column("trace_event_id"),  NotNull    ] public short   TraceEventID  { get; set; } // smallint
			[Column("trace_column_id"), NotNull    ] public short   TraceColumnID { get; set; } // smallint
			[Column("subclass_name"),      Nullable] public string? SubclassName  { get; set; } // nvarchar(128)
			[Column("subclass_value"),     Nullable] public short?  SubclassValue { get; set; } // smallint
		}

		[Table(Schema="sys", Name="transmission_queue", IsView=true)]
		public partial class TransmissionQueue
		{
			[Column("conversation_handle"),     NotNull    ] public Guid     ConversationHandle    { get; set; } // uniqueidentifier
			[Column("to_service_name"),            Nullable] public string?  ToServiceName         { get; set; } // nvarchar(256)
			[Column("to_broker_instance"),         Nullable] public string?  ToBrokerInstance      { get; set; } // nvarchar(128)
			[Column("from_service_name"),          Nullable] public string?  FromServiceName       { get; set; } // nvarchar(256)
			[Column("service_contract_name"),      Nullable] public string?  ServiceContractName   { get; set; } // nvarchar(256)
			[Column("enqueue_time"),            NotNull    ] public DateTime EnqueueTime           { get; set; } // datetime
			[Column("message_sequence_number"), NotNull    ] public long     MessageSequenceNumber { get; set; } // bigint
			[Column("message_type_name"),          Nullable] public string?  MessageTypeName       { get; set; } // nvarchar(256)
			[Column("is_conversation_error"),   NotNull    ] public bool     IsConversationError   { get; set; } // bit
			[Column("is_end_of_dialog"),        NotNull    ] public bool     IsEndOfDialog         { get; set; } // bit
			[Column("message_body"),               Nullable] public byte[]?  MessageBody           { get; set; } // varbinary(-1)
			[Column("transmission_status"),        Nullable] public string?  TransmissionStatus    { get; set; } // nvarchar(4000)
			[Column("priority"),                NotNull    ] public byte     Priority              { get; set; } // tinyint
		}

		/// <summary>
		/// Contains a row per event for which a trigger fires.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-trigger-events-transact-sql?view=sql-server-ver15'>sys.trigger_events</a>.
		/// </summary>
		[Table(Schema="sys", Name="trigger_events", IsView=true)]
		public partial class TriggerEvents
		{
			[Column("object_id"),             NotNull    ] public int     ObjectID           { get; set; } // int
			[Column("type"),                  NotNull    ] public int     Type               { get; set; } // int
			[Column("type_desc"),             NotNull    ] public string  TypeDesc           { get; set; } = null!; // nvarchar(128)
			/// <summary>
			/// Trigger is marked to be the first to fire for this event.
			/// </summary>
			[Column("is_first"),                 Nullable] public bool?   IsFirst            { get; set; } // bit
			/// <summary>
			/// Trigger is marked to be the last to fire for this event.
			/// </summary>
			[Column("is_last"),                  Nullable] public bool?   IsLast             { get; set; } // bit
			/// <summary>
			/// Event group on which the trigger is created, or null if not created on an event group.
			/// </summary>
			[Column("event_group_type"),         Nullable] public int?    EventGroupType     { get; set; } // int
			/// <summary>
			/// Description of the event group on which the trigger is created, or null if not created on an event group.
			/// </summary>
			[Column("event_group_type_desc"),    Nullable] public string? EventGroupTypeDesc { get; set; } // nvarchar(60)
			[Column("is_trigger_event"),         Nullable] public bool?   IsTriggerEvent     { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="TriggerEvents")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		/// <summary>
		/// Returns a row for each event or event group on which a trigger can fire.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-trigger-event-types-transact-sql?view=sql-server-ver15'>sys.trigger_event_types</a>.
		/// </summary>
		[Table(Schema="sys", Name="trigger_event_types", IsView=true)]
		public partial class TriggerEventTypes
		{
			/// <summary>
			/// Type of event or event group that causes a trigger to fire.
			/// </summary>
			[Column("type"),        NotNull    ] public int     Type       { get; set; } // int
			/// <summary>
			/// Name of an event or event group. This can be specified in the FOR clause of a <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/create-trigger-transact-sql?view=sql-server-ver15'>CREATE TRIGGER</a> statement.
			/// </summary>
			[Column("type_name"),      Nullable] public string? TypeName   { get; set; } // nvarchar(64)
			/// <summary>
			/// Type of event group that is the parent of the event or event group.
			/// </summary>
			[Column("parent_type"),    Nullable] public int?    ParentType { get; set; } // int
		}

		/// <summary>
		/// Contains a row for each object that is a trigger, with a type of TR or TA. DML trigger names are schema-scoped and, therefore, are visible in <b>sys.objects</b>. DDL trigger names are scoped by the parent entity and are only visible in this view.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-triggers-transact-sql?view=sql-server-ver15'>sys.triggers</a>.
		/// </summary>
		[Table(Schema="sys", Name="triggers", IsView=true)]
		public partial class Triggers
		{
			/// <summary>
			/// Trigger name. DML trigger names are schema-scoped. DDL trigger names are scoped with respect to the parent entity.
			/// </summary>
			[Column("name"),                   NotNull    ] public string   Name                { get; set; } = null!; // sysname
			/// <summary>
			/// Object identification number. Is unique within a database.
			/// </summary>
			[Column("object_id"),              NotNull    ] public int      ObjectID            { get; set; } // int
			/// <summary>
			/// Class of the parent of the trigger.<br/> 0 = Database, for the DDL triggers.<br/> 1 = Object or column for the DML triggers.
			/// </summary>
			[Column("parent_class"),           NotNull    ] public byte     ParentClass         { get; set; } // tinyint
			/// <summary>
			/// Description of the parent class of the trigger.<br/> DATABASE<br/> OBJECT_OR_COLUMN
			/// </summary>
			[Column("parent_class_desc"),         Nullable] public string?  ParentClassDesc     { get; set; } // nvarchar(60)
			/// <summary>
			/// ID of the parent of the trigger, as follows:<br/> 0 = Triggers that are database-parented triggers.<br/> For DML triggers, this is the <b>object_id</b> of the table or view on which the DML trigger is defined.
			/// </summary>
			[Column("parent_id"),              NotNull    ] public int      ParentID            { get; set; } // int
			/// <summary>
			/// Object type:<br/> TA = Assembly (CLR) trigger<br/> TR = SQL trigger
			/// </summary>
			[Column("type"),                   NotNull    ] public string   Type                { get; set; } = null!; // char(2)
			/// <summary>
			/// Description of object type.<br/> CLR_TRIGGER<br/> SQL_TRIGGER
			/// </summary>
			[Column("type_desc"),                 Nullable] public string?  TypeDesc            { get; set; } // nvarchar(60)
			/// <summary>
			/// Date the trigger was created.
			/// </summary>
			[Column("create_date"),            NotNull    ] public DateTime CreateDate          { get; set; } // datetime
			/// <summary>
			/// Date the object was last modified by using an ALTER statement.
			/// </summary>
			[Column("modify_date"),            NotNull    ] public DateTime ModifyDate          { get; set; } // datetime
			/// <summary>
			/// Trigger created on behalf of the user by an internal SQL Server component.
			/// </summary>
			[Column("is_ms_shipped"),          NotNull    ] public bool     IsMsShipped         { get; set; } // bit
			/// <summary>
			/// Trigger is disabled.
			/// </summary>
			[Column("is_disabled"),            NotNull    ] public bool     IsDisabled          { get; set; } // bit
			/// <summary>
			/// Trigger was created as NOT FOR REPLICATION.
			/// </summary>
			[Column("is_not_for_replication"), NotNull    ] public bool     IsNotForReplication { get; set; } // bit
			/// <summary>
			/// 1 = INSTEAD OF triggers<br/> 0 = AFTER triggers.
			/// </summary>
			[Column("is_instead_of_trigger"),  NotNull    ] public bool     IsInsteadOfTrigger  { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="Triggers")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="trusted_assemblies", IsView=true)]
		public partial class TrustedAssemblies
		{
			[Column("hash"),           Nullable] public byte[]?  Hash        { get; set; } // varbinary(8000)
			[Column("description"),    Nullable] public string?  Description { get; set; } // nvarchar(4000)
			[Column("create_date"), NotNull    ] public DateTime CreateDate  { get; set; } // datetime2(7)
			[Column("created_by"),  NotNull    ] public string   CreatedBy   { get; set; } = null!; // nvarchar(128)
		}

		/// <summary>
		/// Contains one row per type to assembly reference.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-type-assembly-usages-transact-sql?view=sql-server-ver15'>sys.type_assembly_usages</a>.
		/// </summary>
		[Table(Schema="sys", Name="type_assembly_usages", IsView=true)]
		public partial class TypeAssemblyUsages
		{
			/// <summary>
			/// ID of the type<br/> To return the name of the type, join to the <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-types-transact-sql?view=sql-server-ver15'>sys.types</a> catalog view on this column.
			/// </summary>
			[Column("user_type_id"), NotNull] public int UserTypeID { get; set; } // int
			/// <summary>
			/// ID of the assembly
			/// </summary>
			[Column("assembly_id"),  NotNull] public int AssemblyID { get; set; } // int
		}

		/// <summary>
		/// Contains a row for each system and user-defined type.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-types-transact-sql?view=sql-server-ver15'>sys.types</a>.
		/// </summary>
		[Table(Schema="sys", Name="types", IsView=true)]
		public partial class Types
		{
			/// <summary>
			/// Name of the type. Is unique within the schema.
			/// </summary>
			[Column("name"),              NotNull    ] public string  Name            { get; set; } = null!; // sysname
			/// <summary>
			/// ID of the internal system-type of the type.
			/// </summary>
			[Column("system_type_id"),    NotNull    ] public byte    SystemTypeID    { get; set; } // tinyint
			/// <summary>
			/// ID of the type. Is unique within the database. For system data types, <b>user_type_id</b> = <b>system_type_id</b>.
			/// </summary>
			[Column("user_type_id"),      NotNull    ] public int     UserTypeID      { get; set; } // int
			/// <summary>
			/// ID of the schema to which the type belongs.
			/// </summary>
			[Column("schema_id"),         NotNull    ] public int     SchemaID        { get; set; } // int
			/// <summary>
			/// ID of the individual owner if different from schema owner. By default, schema-contained objects are owned by the schema owner. However, an alternate owner can be specified by using the ALTER AUTHORIZATION statement to change ownership.<br/> NULL if there is no alternate individual owner.
			/// </summary>
			[Column("principal_id"),         Nullable] public int?    PrincipalID     { get; set; } // int
			/// <summary>
			/// Maximum length (in bytes) of the type.<br/> -1 = Column data type is <b>varchar(max)</b>, <b>nvarchar(max)</b>, <b>varbinary(max)</b>, or <b>xml</b>.<br/> For <b>text</b> columns, the <b>max_length</b> value will be 16.
			/// </summary>
			[Column("max_length"),        NotNull    ] public short   MaxLength       { get; set; } // smallint
			/// <summary>
			/// Max precision of the type if it is numeric-based; otherwise, 0.
			/// </summary>
			[Column("precision"),         NotNull    ] public byte    Precision       { get; set; } // tinyint
			/// <summary>
			/// Max scale of the type if it is numeric-based; otherwise, 0.
			/// </summary>
			[Column("scale"),             NotNull    ] public byte    Scale           { get; set; } // tinyint
			/// <summary>
			/// Name of the collation of the type if it is character-based; other wise, NULL.
			/// </summary>
			[Column("collation_name"),       Nullable] public string? CollationName   { get; set; } // sysname
			/// <summary>
			/// Type is nullable.
			/// </summary>
			[Column("is_nullable"),          Nullable] public bool?   IsNullable      { get; set; } // bit
			/// <summary>
			/// 1 = User-defined type.<br/> 0 = SQL Server system data type.
			/// </summary>
			[Column("is_user_defined"),   NotNull    ] public bool    IsUserDefined   { get; set; } // bit
			/// <summary>
			/// 1 = Implementation of the type is defined in a CLR assembly.<br/> 0 = Type is based on a SQL Server system data type.
			/// </summary>
			[Column("is_assembly_type"),  NotNull    ] public bool    IsAssemblyType  { get; set; } // bit
			/// <summary>
			/// ID of the stand-alone default that is bound to the type by using <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../system-stored-procedures/sp-bindefault-transact-sql?view=sql-server-ver15'>sp_bindefault</a>.<br/> 0 = No default exists.
			/// </summary>
			[Column("default_object_id"), NotNull    ] public int     DefaultObjectID { get; set; } // int
			/// <summary>
			/// ID of the stand-alone rule that is bound to the type by using <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../system-stored-procedures/sp-bindrule-transact-sql?view=sql-server-ver15'>sp_bindrule</a>.<br/> 0 = No rule exists.
			/// </summary>
			[Column("rule_object_id"),    NotNull    ] public int     RuleObjectID    { get; set; } // int
			/// <summary>
			/// Indicates the type is a table.
			/// </summary>
			[Column("is_table_type"),     NotNull    ] public bool    IsTableType     { get; set; } // bit
		}

		[Table(Schema="sys", Name="user_token", IsView=true)]
		public partial class UserToken
		{
			[Column("principal_id"), Nullable] public int?    PrincipalID { get; set; } // int
			[Column("sid"),          Nullable] public byte[]? Sid         { get; set; } // varbinary(85)
			[Column("name"),         Nullable] public string? Name        { get; set; } // nvarchar(128)
			[Column("type"),         Nullable] public string? Type        { get; set; } // nvarchar(128)
			[Column("usage"),        Nullable] public string? Usage       { get; set; } // nvarchar(128)
		}

		[Table(Schema="sys", Name="via_endpoints", IsView=true)]
		public partial class ViaEndpoints
		{
			[Column("name"),              NotNull    ] public string  Name            { get; set; } = null!; // sysname
			[Column("endpoint_id"),       NotNull    ] public int     EndpointID      { get; set; } // int
			[Column("principal_id"),         Nullable] public int?    PrincipalID     { get; set; } // int
			[Column("protocol"),          NotNull    ] public byte    Protocol        { get; set; } // tinyint
			[Column("protocol_desc"),        Nullable] public string? ProtocolDesc    { get; set; } // nvarchar(60)
			[Column("type"),              NotNull    ] public byte    Type            { get; set; } // tinyint
			[Column("type_desc"),            Nullable] public string? TypeDesc        { get; set; } // nvarchar(60)
			[Column("state"),                Nullable] public byte?   State           { get; set; } // tinyint
			[Column("state_desc"),           Nullable] public string? StateDesc       { get; set; } // nvarchar(60)
			[Column("is_admin_endpoint"), NotNull    ] public bool    IsAdminEndpoint { get; set; } // bit
			[Column("discriminator"),        Nullable] public string? Discriminator   { get; set; } // nvarchar(128)
		}

		/// <summary>
		/// Contains a row for each view object, with <b>sys.objects.type</b> = V.<br/>
		/// See <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-views-transact-sql?view=sql-server-ver15'>sys.views</a>.
		/// </summary>
		[Table(Schema="sys", Name="views", IsView=true)]
		public partial class Views
		{
			[Column("name"),                        NotNull    ] public string   Name                     { get; set; } = null!; // sysname
			[Column("object_id"),                   NotNull    ] public int      ObjectID                 { get; set; } // int
			[Column("principal_id"),                   Nullable] public int?     PrincipalID              { get; set; } // int
			[Column("schema_id"),                   NotNull    ] public int      SchemaID                 { get; set; } // int
			[Column("parent_object_id"),            NotNull    ] public int      ParentObjectID           { get; set; } // int
			[Column("type"),                           Nullable] public string?  Type                     { get; set; } // char(2)
			[Column("type_desc"),                      Nullable] public string?  TypeDesc                 { get; set; } // nvarchar(60)
			[Column("create_date"),                 NotNull    ] public DateTime CreateDate               { get; set; } // datetime
			[Column("modify_date"),                 NotNull    ] public DateTime ModifyDate               { get; set; } // datetime
			[Column("is_ms_shipped"),               NotNull    ] public bool     IsMsShipped              { get; set; } // bit
			[Column("is_published"),                NotNull    ] public bool     IsPublished              { get; set; } // bit
			[Column("is_schema_published"),         NotNull    ] public bool     IsSchemaPublished        { get; set; } // bit
			/// <summary>
			/// 1 = View is replicated.
			/// </summary>
			[Column("is_replicated"),                  Nullable] public bool?    IsReplicated             { get; set; } // bit
			/// <summary>
			/// 1 = View has a replication filter.
			/// </summary>
			[Column("has_replication_filter"),         Nullable] public bool?    HasReplicationFilter     { get; set; } // bit
			/// <summary>
			/// 1 = VIEW_METADATA option specified for view. For more information, see <a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/../../t-sql/statements/create-view-transact-sql?view=sql-server-ver15'>CREATE VIEW (Transact-SQL)</a>.
			/// </summary>
			[Column("has_opaque_metadata"),         NotNull    ] public bool     HasOpaqueMetadata        { get; set; } // bit
			/// <summary>
			/// 1 = View contains persisted data that depends on an assembly whose definition changed during the last ALTER ASSEMBLY. Resets to 0 after the next successful DBCC CHECKDB or DBCC CHECKTABLE.
			/// </summary>
			[Column("has_unchecked_assembly_data"), NotNull    ] public bool     HasUncheckedAssemblyData { get; set; } // bit
			/// <summary>
			/// 1 = WITH CHECK OPTION was specified in the view definition.
			/// </summary>
			[Column("with_check_option"),           NotNull    ] public bool     WithCheckOption          { get; set; } // bit
			/// <summary>
			/// 1 = View was created automatically by the system to store correlation information between datetime columns. Creation of this view was enabled by setting DATE_CORRELATION_OPTIMIZATION to ON.
			/// </summary>
			[Column("is_date_correlation_view"),    NotNull    ] public bool     IsDateCorrelationView    { get; set; } // bit
			[Column("is_tracked_by_cdc"),              Nullable] public bool?    IsTrackedByCdc           { get; set; } // bit
			[Column("has_snapshot"),                   Nullable] public bool?    HasSnapshot              { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.OneToOne, KeyName="objects", BackReferenceName="View")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}
	}

	public static partial class XmlSchema
	{
		public partial class DataContext
		{
			public ITable<ColumnXmlSchemaCollectionUsages>    ColumnXmlSchemaCollectionUsages    { get { return _dataContext.GetTable<ColumnXmlSchemaCollectionUsages>(); } }
			public ITable<ParameterXmlSchemaCollectionUsages> ParameterXmlSchemaCollectionUsages { get { return _dataContext.GetTable<ParameterXmlSchemaCollectionUsages>(); } }
			public ITable<SelectiveXmlIndexPaths>             SelectiveXmlIndexPaths             { get { return _dataContext.GetTable<SelectiveXmlIndexPaths>(); } }
			public ITable<XmlIndexes>                         XmlIndexes                         { get { return _dataContext.GetTable<XmlIndexes>(); } }
			public ITable<XmlSchemaAttributes>                XmlSchemaAttributes                { get { return _dataContext.GetTable<XmlSchemaAttributes>(); } }
			public ITable<XmlSchemaCollections>               XmlSchemaCollections               { get { return _dataContext.GetTable<XmlSchemaCollections>(); } }
			public ITable<XmlSchemaComponentPlacements>       XmlSchemaComponentPlacements       { get { return _dataContext.GetTable<XmlSchemaComponentPlacements>(); } }
			public ITable<XmlSchemaComponents>                XmlSchemaComponents                { get { return _dataContext.GetTable<XmlSchemaComponents>(); } }
			public ITable<XmlSchemaElements>                  XmlSchemaElements                  { get { return _dataContext.GetTable<XmlSchemaElements>(); } }
			public ITable<XmlSchemaFacets>                    XmlSchemaFacets                    { get { return _dataContext.GetTable<XmlSchemaFacets>(); } }
			public ITable<XmlSchemaModelGroups>               XmlSchemaModelGroups               { get { return _dataContext.GetTable<XmlSchemaModelGroups>(); } }
			public ITable<XmlSchemaNamespaces>                XmlSchemaNamespaces                { get { return _dataContext.GetTable<XmlSchemaNamespaces>(); } }
			public ITable<XmlSchemaTypes>                     XmlSchemaTypes                     { get { return _dataContext.GetTable<XmlSchemaTypes>(); } }
			public ITable<XmlSchemaWildcardNamespaces>        XmlSchemaWildcardNamespaces        { get { return _dataContext.GetTable<XmlSchemaWildcardNamespaces>(); } }
			public ITable<XmlSchemaWildcards>                 XmlSchemaWildcards                 { get { return _dataContext.GetTable<XmlSchemaWildcards>(); } }

			private readonly IDataContext _dataContext;

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		[Table(Schema="sys", Name="column_xml_schema_collection_usages", IsView=true)]
		public partial class ColumnXmlSchemaCollectionUsages
		{
			[Column("object_id"),         NotNull] public int ObjectID        { get; set; } // int
			[Column("column_id"),         NotNull] public int ColumnID        { get; set; } // int
			[Column("xml_collection_id"), NotNull] public int XmlCollectionID { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="ColumnXmlSchemaCollectionUsages")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="parameter_xml_schema_collection_usages", IsView=true)]
		public partial class ParameterXmlSchemaCollectionUsages
		{
			[Column("object_id"),         NotNull] public int ObjectID        { get; set; } // int
			[Column("parameter_id"),      NotNull] public int ParameterID     { get; set; } // int
			[Column("xml_collection_id"), NotNull] public int XmlCollectionID { get; set; } // int

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="ParameterXmlSchemaCollectionUsages")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="selective_xml_index_paths", IsView=true)]
		public partial class SelectiveXmlIndexPaths
		{
			[Column("object_id"),                     NotNull    ] public int     ObjectID                  { get; set; } // int
			[Column("index_id"),                      NotNull    ] public int     IndexID                   { get; set; } // int
			[Column("path_id"),                          Nullable] public int?    PathID                    { get; set; } // int
			[Column("path"),                             Nullable] public string? Path                      { get; set; } // nvarchar(4000)
			[Column("name"),                             Nullable] public string? Name                      { get; set; } // nvarchar(128)
			[Column("path_type"),                        Nullable] public byte?   PathType                  { get; set; } // tinyint
			[Column("path_type_desc"),                   Nullable] public string? PathTypeDesc              { get; set; } // nvarchar(128)
			[Column("xml_component_id"),                 Nullable] public int?    XmlComponentID            { get; set; } // int
			[Column("xquery_type_description"),          Nullable] public string? XqueryTypeDescription     { get; set; } // nvarchar(4000)
			[Column("is_xquery_type_inferred"),          Nullable] public bool?   IsXqueryTypeInferred      { get; set; } // bit
			[Column("xquery_max_length"),                Nullable] public int?    XqueryMaxLength           { get; set; } // int
			[Column("is_xquery_max_length_inferred"),    Nullable] public bool?   IsXqueryMaxLengthInferred { get; set; } // bit
			[Column("is_node"),                          Nullable] public bool?   IsNode                    { get; set; } // bit
			[Column("system_type_id"),                   Nullable] public byte?   SystemTypeID              { get; set; } // tinyint
			[Column("user_type_id"),                     Nullable] public byte?   UserTypeID                { get; set; } // tinyint
			[Column("max_length"),                       Nullable] public short?  MaxLength                 { get; set; } // smallint
			[Column("precision"),                        Nullable] public byte?   Precision                 { get; set; } // tinyint
			[Column("scale"),                            Nullable] public byte?   Scale                     { get; set; } // tinyint
			[Column("collation_name"),                   Nullable] public string? CollationName             { get; set; } // sysname
			[Column("is_singleton"),                     Nullable] public bool?   IsSingleton               { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="SelectiveXmlIndexPaths")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="xml_indexes", IsView=true)]
		public partial class XmlIndexes
		{
			[Column("object_id"),                  NotNull    ] public int     ObjectID                { get; set; } // int
			[Column("name"),                          Nullable] public string? Name                    { get; set; } // sysname
			[Column("index_id"),                   NotNull    ] public int     IndexID                 { get; set; } // int
			[Column("type"),                       NotNull    ] public byte    Type                    { get; set; } // tinyint
			[Column("type_desc"),                     Nullable] public string? TypeDesc                { get; set; } // nvarchar(60)
			[Column("is_unique"),                     Nullable] public bool?   IsUnique                { get; set; } // bit
			[Column("data_space_id"),              NotNull    ] public int     DataSpaceID             { get; set; } // int
			[Column("ignore_dup_key"),                Nullable] public bool?   IgnoreDupKey            { get; set; } // bit
			[Column("is_primary_key"),                Nullable] public bool?   IsPrimaryKey            { get; set; } // bit
			[Column("is_unique_constraint"),          Nullable] public bool?   IsUniqueConstraint      { get; set; } // bit
			[Column("fill_factor"),                NotNull    ] public byte    FillFactor              { get; set; } // tinyint
			[Column("is_padded"),                     Nullable] public bool?   IsPadded                { get; set; } // bit
			[Column("is_disabled"),                   Nullable] public bool?   IsDisabled              { get; set; } // bit
			[Column("is_hypothetical"),               Nullable] public bool?   IsHypothetical          { get; set; } // bit
			[Column("is_ignored_in_optimization"),    Nullable] public bool?   IsIgnoredInOptimization { get; set; } // bit
			[Column("allow_row_locks"),               Nullable] public bool?   AllowRowLocks           { get; set; } // bit
			[Column("allow_page_locks"),              Nullable] public bool?   AllowPageLocks          { get; set; } // bit
			[Column("using_xml_index_id"),            Nullable] public int?    UsingXmlIndexID         { get; set; } // int
			[Column("secondary_type"),                Nullable] public string? SecondaryType           { get; set; } // char(1)
			[Column("secondary_type_desc"),           Nullable] public string? SecondaryTypeDesc       { get; set; } // nvarchar(60)
			[Column("has_filter"),                 NotNull    ] public bool    HasFilter               { get; set; } // bit
			[Column("filter_definition"),             Nullable] public string? FilterDefinition        { get; set; } // nvarchar(0)
			[Column("xml_index_type"),                Nullable] public byte?   XmlIndexType            { get; set; } // tinyint
			[Column("xml_index_type_description"),    Nullable] public string? XmlIndexTypeDescription { get; set; } // nvarchar(60)
			[Column("path_id"),                       Nullable] public int?    PathID                  { get; set; } // int
			[Column("auto_created"),                  Nullable] public bool?   AutoCreated             { get; set; } // bit

			#region Associations

			/// <summary>
			/// objects
			/// </summary>
			[Association(ThisKey="ObjectID", OtherKey="ObjectID", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="objects", BackReferenceName="XmlIndexes")]
			public SystemSchema.Objects Object { get; set; } = null!;

			#endregion
		}

		[Table(Schema="sys", Name="xml_schema_attributes", IsView=true)]
		public partial class XmlSchemaAttributes
		{
			[Column("xml_component_id"),         NotNull    ] public int     XmlComponentID        { get; set; } // int
			[Column("xml_collection_id"),        NotNull    ] public int     XmlCollectionID       { get; set; } // int
			[Column("xml_namespace_id"),         NotNull    ] public int     XmlNamespaceID        { get; set; } // int
			[Column("is_qualified"),             NotNull    ] public bool    IsQualified           { get; set; } // bit
			[Column("name"),                        Nullable] public string? Name                  { get; set; } // nvarchar(4000)
			[Column("symbol_space"),             NotNull    ] public string  SymbolSpace           { get; set; } = null!; // char(1)
			[Column("symbol_space_desc"),           Nullable] public string? SymbolSpaceDesc       { get; set; } // nvarchar(60)
			[Column("kind"),                     NotNull    ] public string  Kind                  { get; set; } = null!; // char(1)
			[Column("kind_desc"),                   Nullable] public string? KindDesc              { get; set; } // nvarchar(60)
			[Column("derivation"),               NotNull    ] public string  Derivation            { get; set; } = null!; // char(1)
			[Column("derivation_desc"),             Nullable] public string? DerivationDesc        { get; set; } // nvarchar(60)
			[Column("base_xml_component_id"),       Nullable] public int?    BaseXmlComponentID    { get; set; } // int
			[Column("scoping_xml_component_id"),    Nullable] public int?    ScopingXmlComponentID { get; set; } // int
			[Column("is_default_fixed"),         NotNull    ] public bool    IsDefaultFixed        { get; set; } // bit
			[Column("must_be_qualified"),        NotNull    ] public bool    MustBeQualified       { get; set; } // bit
			[Column("default_value"),               Nullable] public string? DefaultValue          { get; set; } // nvarchar(4000)
		}

		[Table(Schema="sys", Name="xml_schema_collections", IsView=true)]
		public partial class XmlSchemaCollections
		{
			[Column("xml_collection_id"), NotNull    ] public int      XmlCollectionID { get; set; } // int
			[Column("schema_id"),         NotNull    ] public int      SchemaID        { get; set; } // int
			[Column("principal_id"),         Nullable] public int?     PrincipalID     { get; set; } // int
			[Column("name"),              NotNull    ] public string   Name            { get; set; } = null!; // sysname
			[Column("create_date"),       NotNull    ] public DateTime CreateDate      { get; set; } // datetime
			[Column("modify_date"),       NotNull    ] public DateTime ModifyDate      { get; set; } // datetime
		}

		[Table(Schema="sys", Name="xml_schema_component_placements", IsView=true)]
		public partial class XmlSchemaComponentPlacements
		{
			[Column("xml_component_id"),        NotNull    ] public int     XmlComponentID       { get; set; } // int
			[Column("placement_id"),            NotNull    ] public int     PlacementID          { get; set; } // int
			[Column("placed_xml_component_id"), NotNull    ] public int     PlacedXmlComponentID { get; set; } // int
			[Column("is_default_fixed"),        NotNull    ] public bool    IsDefaultFixed       { get; set; } // bit
			[Column("min_occurences"),          NotNull    ] public int     MinOccurences        { get; set; } // int
			[Column("max_occurences"),          NotNull    ] public int     MaxOccurences        { get; set; } // int
			[Column("default_value"),              Nullable] public string? DefaultValue         { get; set; } // nvarchar(4000)
		}

		[Table(Schema="sys", Name="xml_schema_components", IsView=true)]
		public partial class XmlSchemaComponents
		{
			[Column("xml_component_id"),         NotNull    ] public int     XmlComponentID        { get; set; } // int
			[Column("xml_collection_id"),        NotNull    ] public int     XmlCollectionID       { get; set; } // int
			[Column("xml_namespace_id"),         NotNull    ] public int     XmlNamespaceID        { get; set; } // int
			[Column("is_qualified"),             NotNull    ] public bool    IsQualified           { get; set; } // bit
			[Column("name"),                        Nullable] public string? Name                  { get; set; } // nvarchar(4000)
			[Column("symbol_space"),             NotNull    ] public string  SymbolSpace           { get; set; } = null!; // char(1)
			[Column("symbol_space_desc"),           Nullable] public string? SymbolSpaceDesc       { get; set; } // nvarchar(60)
			[Column("kind"),                     NotNull    ] public string  Kind                  { get; set; } = null!; // char(1)
			[Column("kind_desc"),                   Nullable] public string? KindDesc              { get; set; } // nvarchar(60)
			[Column("derivation"),               NotNull    ] public string  Derivation            { get; set; } = null!; // char(1)
			[Column("derivation_desc"),             Nullable] public string? DerivationDesc        { get; set; } // nvarchar(60)
			[Column("base_xml_component_id"),       Nullable] public int?    BaseXmlComponentID    { get; set; } // int
			[Column("scoping_xml_component_id"),    Nullable] public int?    ScopingXmlComponentID { get; set; } // int
		}

		[Table(Schema="sys", Name="xml_schema_elements", IsView=true)]
		public partial class XmlSchemaElements
		{
			[Column("xml_component_id"),         NotNull    ] public int     XmlComponentID        { get; set; } // int
			[Column("xml_collection_id"),        NotNull    ] public int     XmlCollectionID       { get; set; } // int
			[Column("xml_namespace_id"),         NotNull    ] public int     XmlNamespaceID        { get; set; } // int
			[Column("is_qualified"),             NotNull    ] public bool    IsQualified           { get; set; } // bit
			[Column("name"),                        Nullable] public string? Name                  { get; set; } // nvarchar(4000)
			[Column("symbol_space"),             NotNull    ] public string  SymbolSpace           { get; set; } = null!; // char(1)
			[Column("symbol_space_desc"),           Nullable] public string? SymbolSpaceDesc       { get; set; } // nvarchar(60)
			[Column("kind"),                     NotNull    ] public string  Kind                  { get; set; } = null!; // char(1)
			[Column("kind_desc"),                   Nullable] public string? KindDesc              { get; set; } // nvarchar(60)
			[Column("derivation"),               NotNull    ] public string  Derivation            { get; set; } = null!; // char(1)
			[Column("derivation_desc"),             Nullable] public string? DerivationDesc        { get; set; } // nvarchar(60)
			[Column("base_xml_component_id"),       Nullable] public int?    BaseXmlComponentID    { get; set; } // int
			[Column("scoping_xml_component_id"),    Nullable] public int?    ScopingXmlComponentID { get; set; } // int
			[Column("is_default_fixed"),         NotNull    ] public bool    IsDefaultFixed        { get; set; } // bit
			[Column("is_abstract"),              NotNull    ] public bool    IsAbstract            { get; set; } // bit
			[Column("is_nillable"),              NotNull    ] public bool    IsNillable            { get; set; } // bit
			[Column("must_be_qualified"),        NotNull    ] public bool    MustBeQualified       { get; set; } // bit
			[Column("is_extension_blocked"),     NotNull    ] public bool    IsExtensionBlocked    { get; set; } // bit
			[Column("is_restriction_blocked"),   NotNull    ] public bool    IsRestrictionBlocked  { get; set; } // bit
			[Column("is_substitution_blocked"),  NotNull    ] public bool    IsSubstitutionBlocked { get; set; } // bit
			[Column("is_final_extension"),       NotNull    ] public bool    IsFinalExtension      { get; set; } // bit
			[Column("is_final_restriction"),     NotNull    ] public bool    IsFinalRestriction    { get; set; } // bit
			[Column("default_value"),               Nullable] public string? DefaultValue          { get; set; } // nvarchar(4000)
		}

		[Table(Schema="sys", Name="xml_schema_facets", IsView=true)]
		public partial class XmlSchemaFacets
		{
			[Column("xml_component_id"), NotNull    ] public int     XmlComponentID { get; set; } // int
			[Column("facet_id"),         NotNull    ] public int     FacetID        { get; set; } // int
			[Column("kind"),             NotNull    ] public string  Kind           { get; set; } = null!; // char(2)
			[Column("kind_desc"),           Nullable] public string? KindDesc       { get; set; } // nvarchar(60)
			[Column("is_fixed"),         NotNull    ] public bool    IsFixed        { get; set; } // bit
			[Column("value"),               Nullable] public string? Value          { get; set; } // nvarchar(4000)
		}

		[Table(Schema="sys", Name="xml_schema_model_groups", IsView=true)]
		public partial class XmlSchemaModelGroups
		{
			[Column("xml_component_id"),         NotNull    ] public int     XmlComponentID        { get; set; } // int
			[Column("xml_collection_id"),        NotNull    ] public int     XmlCollectionID       { get; set; } // int
			[Column("xml_namespace_id"),         NotNull    ] public int     XmlNamespaceID        { get; set; } // int
			[Column("is_qualified"),             NotNull    ] public bool    IsQualified           { get; set; } // bit
			[Column("name"),                        Nullable] public string? Name                  { get; set; } // nvarchar(4000)
			[Column("symbol_space"),             NotNull    ] public string  SymbolSpace           { get; set; } = null!; // char(1)
			[Column("symbol_space_desc"),           Nullable] public string? SymbolSpaceDesc       { get; set; } // nvarchar(60)
			[Column("kind"),                     NotNull    ] public string  Kind                  { get; set; } = null!; // char(1)
			[Column("kind_desc"),                   Nullable] public string? KindDesc              { get; set; } // nvarchar(60)
			[Column("derivation"),               NotNull    ] public string  Derivation            { get; set; } = null!; // char(1)
			[Column("derivation_desc"),             Nullable] public string? DerivationDesc        { get; set; } // nvarchar(60)
			[Column("base_xml_component_id"),       Nullable] public int?    BaseXmlComponentID    { get; set; } // int
			[Column("scoping_xml_component_id"),    Nullable] public int?    ScopingXmlComponentID { get; set; } // int
			[Column("compositor"),               NotNull    ] public string  Compositor            { get; set; } = null!; // char(1)
			[Column("compositor_desc"),             Nullable] public string? CompositorDesc        { get; set; } // nvarchar(60)
		}

		[Table(Schema="sys", Name="xml_schema_namespaces", IsView=true)]
		public partial class XmlSchemaNamespaces
		{
			[Column("xml_collection_id"), NotNull    ] public int     XmlCollectionID { get; set; } // int
			[Column("name"),                 Nullable] public string? Name            { get; set; } // nvarchar(4000)
			[Column("xml_namespace_id"),  NotNull    ] public int     XmlNamespaceID  { get; set; } // int
		}

		[Table(Schema="sys", Name="xml_schema_types", IsView=true)]
		public partial class XmlSchemaTypes
		{
			[Column("xml_component_id"),         NotNull    ] public int     XmlComponentID        { get; set; } // int
			[Column("xml_collection_id"),        NotNull    ] public int     XmlCollectionID       { get; set; } // int
			[Column("xml_namespace_id"),         NotNull    ] public int     XmlNamespaceID        { get; set; } // int
			[Column("is_qualified"),             NotNull    ] public bool    IsQualified           { get; set; } // bit
			[Column("name"),                        Nullable] public string? Name                  { get; set; } // nvarchar(4000)
			[Column("symbol_space"),             NotNull    ] public string  SymbolSpace           { get; set; } = null!; // char(1)
			[Column("symbol_space_desc"),           Nullable] public string? SymbolSpaceDesc       { get; set; } // nvarchar(60)
			[Column("kind"),                     NotNull    ] public string  Kind                  { get; set; } = null!; // char(1)
			[Column("kind_desc"),                   Nullable] public string? KindDesc              { get; set; } // nvarchar(60)
			[Column("derivation"),               NotNull    ] public string  Derivation            { get; set; } = null!; // char(1)
			[Column("derivation_desc"),             Nullable] public string? DerivationDesc        { get; set; } // nvarchar(60)
			[Column("base_xml_component_id"),       Nullable] public int?    BaseXmlComponentID    { get; set; } // int
			[Column("scoping_xml_component_id"),    Nullable] public int?    ScopingXmlComponentID { get; set; } // int
			[Column("is_abstract"),              NotNull    ] public bool    IsAbstract            { get; set; } // bit
			[Column("allows_mixed_content"),     NotNull    ] public bool    AllowsMixedContent    { get; set; } // bit
			[Column("is_extension_blocked"),     NotNull    ] public bool    IsExtensionBlocked    { get; set; } // bit
			[Column("is_restriction_blocked"),   NotNull    ] public bool    IsRestrictionBlocked  { get; set; } // bit
			[Column("is_final_extension"),       NotNull    ] public bool    IsFinalExtension      { get; set; } // bit
			[Column("is_final_restriction"),     NotNull    ] public bool    IsFinalRestriction    { get; set; } // bit
			[Column("is_final_list_member"),     NotNull    ] public bool    IsFinalListMember     { get; set; } // bit
			[Column("is_final_union_member"),    NotNull    ] public bool    IsFinalUnionMember    { get; set; } // bit
		}

		[Table(Schema="sys", Name="xml_schema_wildcard_namespaces", IsView=true)]
		public partial class XmlSchemaWildcardNamespaces
		{
			[Column("xml_component_id"), NotNull] public int    XmlComponentID { get; set; } // int
			[Column("namespace"),        NotNull] public string @namespace     { get; set; } = null!; // nvarchar(4000)
		}

		[Table(Schema="sys", Name="xml_schema_wildcards", IsView=true)]
		public partial class XmlSchemaWildcards
		{
			[Column("xml_component_id"),         NotNull    ] public int     XmlComponentID        { get; set; } // int
			[Column("xml_collection_id"),        NotNull    ] public int     XmlCollectionID       { get; set; } // int
			[Column("xml_namespace_id"),         NotNull    ] public int     XmlNamespaceID        { get; set; } // int
			[Column("is_qualified"),             NotNull    ] public bool    IsQualified           { get; set; } // bit
			[Column("name"),                        Nullable] public string? Name                  { get; set; } // nvarchar(4000)
			[Column("symbol_space"),             NotNull    ] public string  SymbolSpace           { get; set; } = null!; // char(1)
			[Column("symbol_space_desc"),           Nullable] public string? SymbolSpaceDesc       { get; set; } // nvarchar(60)
			[Column("kind"),                     NotNull    ] public string  Kind                  { get; set; } = null!; // char(1)
			[Column("kind_desc"),                   Nullable] public string? KindDesc              { get; set; } // nvarchar(60)
			[Column("derivation"),               NotNull    ] public string  Derivation            { get; set; } = null!; // char(1)
			[Column("derivation_desc"),             Nullable] public string? DerivationDesc        { get; set; } // nvarchar(60)
			[Column("base_xml_component_id"),       Nullable] public int?    BaseXmlComponentID    { get; set; } // int
			[Column("scoping_xml_component_id"),    Nullable] public int?    ScopingXmlComponentID { get; set; } // int
			[Column("process_content"),          NotNull    ] public string  ProcessContent        { get; set; } = null!; // char(1)
			[Column("process_content_desc"),        Nullable] public string? ProcessContentDesc    { get; set; } // nvarchar(60)
			[Column("disallow_namespaces"),      NotNull    ] public bool    DisallowNamespaces    { get; set; } // bit
		}
	}
}

#pragma warning restore 1591
