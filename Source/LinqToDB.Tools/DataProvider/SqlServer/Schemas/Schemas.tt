<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="$(SolutionDir)Source\LinqToDB.Tools\bin\Debug\net46\linq2db.dll" #>
<#@ include file="..\..\..\..\LinqToDB.Templates\LinqToDB.SqlServer.ttinclude"   once="true" #>
<#@ include file="..\..\..\..\LinqToDB.Templates\PluralizationService.ttinclude" once="true" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="LinqToDB" #>
<#
	NamespaceName = "LinqToDB.Tools.DataProvider.SqlServer.Schemas";
	DataContextName = "SystemDB";
	EnableNullableReferenceTypes = true;
	GenerateSchemaAsType = true;
	//	GenerateDbTypes              = true;
	OneToManyAssociationType = "IList<{0}>";

	SingularizeClassNames = false;
	PluralizeDataContextPropertyNames = false;
	NormalizeNamesWithoutUnderscores = true;
	PluralizeForeignKeyNames = false;
	SingularizeForeignKeyNames = true;

	SchemaNameMapping.Add("sys", "System");
	SchemaNameMapping.Add("INFORMATION_SCHEMA", "Information");

	LoadDatabaseSchema = LoadSystemDatabaseSchema;

	BeforeGenerateLinqToDBModel = () =>
	{
		foreach (var t in Tables.Values)
		{
			if (t.TableName.StartsWith("sys") && !t.TableName.StartsWith("system_"))
			{
				t.Schema = "Compatibility";
			}
			else if (t.TableName.StartsWith("dm_"))
			{
				t.Schema = "DynamicManagement";
			}
			else if (t.TableName.StartsWith("availability_"))
			{
				t.Schema = "AvailabilityGroup";
			}
			else if (t.TableName.StartsWith("change_tracking_"))
			{
				t.Schema = "ChangeTracking";
			}
			else if (t.TableName.StartsWith("xml_") || t.TableName is
				"column_xml_schema_collection_usages" or
				"parameter_xml_schema_collection_usages" or
				"selective_xml_index_paths")
			{
				t.Schema = "Xml";
			}
		}
	};

	LoadSqlServerMetadata(".", "master", SqlServerVersion.v2012);

	var dic = new[]
	{
		"SysAltFiles", "SysCacheObjects", "SysCharSets", "SysCsContainers", "SysCurConfigs", "SysCursorColumns", "SysCursorRefs", "SysCursorTables",
		"SysFileGroups", "SysForeignKeys", "SysFullTextCatalogs", "SysIndexKeys", "SysLockInfo", "SysOleDBUsers", "SysOpenTapes", "SysPerfInfo", "SysRemoteLogins"
	}
		.ToDictionary(n => n.ToLower(), n => n);

	foreach (var tt in Tables)
	{
		var t = tt.Value;

		if (dic.TryGetValue(t.TableName, out var name))
			t.DataContextPropertyName = t.TypeName = name;
		else if (t.TableName.StartsWith("sys") && !t.TableName.StartsWith("system_"))
		{
			var a = t.TypeName.ToCharArray();
			a[3] = char.ToUpper(a[3]);

			t.DataContextPropertyName = t.TypeName = new(a);
		}

		foreach (var c in t.Columns)
			if (c.Value.ColumnName.EndsWith("_id"))
				c.Value.MemberName = c.Value.MemberName.Substring(0, c.Value.MemberName.Length - 1) + "D";
	}

	GenerateModel();

	GenerationEnvironment
		.Replace("&lt;strong&gt;",    "<b>")
		.Replace("&lt;/strong&gt;",   "</b>")
		.Replace("&lt;br&gt;",        "<br/>")
		.Replace("<br/><br/> ",       "<br/> ")
		.Replace("&lt;a href=&quot;#remarks&quot; data-linktype=&quot;self-bookmark&quot;&gt;Remarks&lt;/a&gt;", "<a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-column-store-segments-transact-sql?view=sql-server-ver15#remarks'>Remarks</a>")
		.Replace("&lt;a href=&quot;", "<a href='https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/")
		.Replace("&quot; data-linktype=&quot;relative-path&quot;&gt;", "'>")
		.Replace("&lt;/a&gt;",        "</a>")
		.Replace("&lt;code&gt;",      "<i>")
		.Replace("&lt;/code&gt;",     "</i>")
		.Replace("&lt;em&gt;",        "<em>")
		.Replace("&lt;/em&gt;",       "</em>")
		.Replace("&amp;lt;",          "&lt;")
		.Replace("&amp;gt;",          "&gt;")
		.Replace("&lt;a href=&apos;", "<a href='")
		.Replace("&apos;&gt;",        "'>")
		;
#>
<#+
DatabaseSchema LoadSystemDatabaseSchema(DataConnection dataConnection, GetSchemaOptions schemaOptions)
{
	var xmlFile = Path.Combine(Path.GetDirectoryName(Host.TemplateFile)!, "Schemas.xml");
	var xml     =
	(
		from t in XDocument.Load(xmlFile, LoadOptions.PreserveWhitespace).Root.Elements("table")
		select new
		{
			Name        = t.Attribute("name").Value,
			Uri         = t.Attribute("uri").Value,
			Description = t.Element("description").Value,
			Columns     =
			(
				from c in t?.Elements("column")
				select new
				{
					Name    = c.Attribute("name").Value,
					Type    = c.Attribute("type").Value,
					Content = c.Value
				}
			)
			.ToDictionary(c => c.Name, c => c)
		}
	)
	.ToDictionary(t => t.Name, t => t);

	var columns = dataConnection.Query(new
	{
		schema_name = null as string,
		view_name   = null as string,
		column_name = null as string,
		column_id   = 0,
		type_name   = null as string,
		max_length  = null as int?,
		precision   = 0,
		scale       = 0,
		is_nullable = false
	}, @"
select
	OBJECT_SCHEMA_NAME(o.object_id) schema_name,
	o.name                          view_name,
	c.name                          column_name,
	c.column_id,
	t.name                          type_name,
	c.max_length,
	c.precision,
	c.scale,
	c.is_nullable
from sys.system_objects o
join sys.system_views v on o.object_id = v.object_id
join sys.system_columns c on o.object_id = c.object_id
join sys.types t on c.user_type_id = t.user_type_id
where o.is_ms_shipped = 1
order by OBJECT_SCHEMA_NAME(o.object_id), o.name, c.column_id
");

	var tables =
	(
		from  c in columns
		where c.schema_name != "dbo"
		group c by new { c.schema_name, c.view_name } into gs
		let name = $"{gs.Key.schema_name}.{gs.Key.view_name}"
		let doc  = xml.ContainsKey(name) ? xml[name] : null
		select new TableSchema
		{
			ID          = $"[{gs.Key.schema_name}].[{gs.Key.view_name}]",
			SchemaName  = gs.Key.schema_name,
			TableName   = gs.Key.view_name,
			Description = doc != null ? $"{doc.Description}<br>\r\nSee <a href='{doc.Uri}'>{name}</a>." : null,
			TypeName    = gs.Key.view_name,
			IsView      = true,
			Columns     =
			(
				from c in gs
				let cn = doc?.Columns.ContainsKey(c.column_name) == true ? doc?.Columns[c.column_name] : null
				orderby c.column_id
				select new ColumnSchema
				{
					ColumnName           = c.column_name,
					Description          = cn?.Content,
					ColumnType           = cn?.Type ?? c.type_name switch
					{
						"int"              => "int",
						"tinyint"          => "tinyint",
						"smallint"         => "smallint",
						"bigint"           => "bigint",
						"datetime"         => "datetime",
						"datetime2"        => c.scale == 0 ? "datetime2"      : $"datetime2({c.scale})",
						"datetimeoffset"   => c.scale == 0 ? "datetimeoffset" : $"datetimeoffset({c.scale})",
						"time"             => c.scale == 0 ? "time"           : $"time({c.scale})",
						"sql_variant"      => "sql_variant",
						"sysname"          => "sysname",
						"bit"              => "bit",
						"uniqueidentifier" => "uniqueidentifier",
						"numeric"          => $"numeric({c.precision},{c.scale})",
						"float"            => "float",
						"real"             => "real",
						"char"             => $"char({(     c.max_length == null ? "max" : c.max_length)})",
						"nchar"            => $"nchar({(    c.max_length == null ? "max" : c.max_length / 2)})",
						"nvarchar"         => $"nvarchar({( c.max_length == null ? "max" : c.max_length / 2)})",
						"varchar"          => $"varchar({(  c.max_length == null ? "max" : c.max_length)})",
						"varbinary"        => $"varbinary({(c.max_length == null ? "max" : c.max_length)})",
						"binary"           => $"binary({(   c.max_length == null ? "max" : c.max_length)})",
						"image"            => $"image({(    c.max_length == null ? "max" : c.max_length)})",
						var t              => throw new NotImplementedException($"Not implemented type {t}")
					},
					IsNullable           = c.is_nullable,
					MemberName           = c.column_name,
					MemberType           = c.type_name switch
					{
						"int"              => "int",
						"tinyint"          => "byte",
						"smallint"         => "short",
						"bigint"           => "long",
						"datetime"         => "DateTime",
						"datetime2"        => "DateTime",
						"datetimeoffset"   => "DateTimeOffset",
						"time"             => "TimeSpan",
						"sql_variant"      => "object",
						"sysname"          => "string",
						"bit"              => "bool",
						"uniqueidentifier" => "Guid",
						"numeric"          => "decimal",
						"float"            => "double",
						"real"             => "float",
						"char"             => "string",
						"nchar"            => "string",
						"nvarchar"         => "string",
						"varchar"          => "string",
						"varbinary"        => "byte[]",
						"binary"           => "byte[]",
						"image"            => "byte[]",
						var t              => throw new NotImplementedException($"Not implemented type {t}")
					} + (c.is_nullable ? "?" : ""),
					SystemType           = typeof(int),
					DataType             = DataType.Char,
					Length               = c.max_length / 2,
					Precision            = c.precision,
					Scale                = c.scale,
				}
			).ToList(),
			ForeignKeys = new(),
		}
	).ToList();

	SetForeignKeys("[sys].[all_objects]",    "object_id", "AllObject",    t => t.TableName!.StartsWith("all_"),    "all_views");
	SetForeignKeys("[sys].[system_objects]", "object_id", "SystemObject", t => t.TableName!.StartsWith("system_"), "system_views");
	SetForeignKeys("[sys].[objects]",        "object_id", "Object",       t => !t.TableName!.StartsWith("all_") && !t.TableName!.StartsWith("system_"),
		// http://t-sql.ru/Download/SystemViewsPoster/2008.pdf
		"assembly_modules",    // sys.objects.type in ('TA', 'PC', 'FS', 'FT')
		"default_constraints", // sys.objects.type in ('D')
		"check_constraints",   // sys.objects.type in ('C')
		"foreign_keys",        // sys.objects.type in ('F')
		"key_constraints",     // sys.objects.type in (‘UQ’, ‘PK’) AND sys.key_constraints.parent_object_id is not null
		"service_queues",      // sys.objects.type in ('SQ')
		"synonyms",            // sys.objects.type in ('SN')
		"tables",              // sys.objects.type in ('U')
		"views"                // sys.objects.type in ('V')
		);

	void SetForeignKeys(string masterTableID, string columnName, string memberName, Func<TableSchema,bool> filter, params string[] oneToOneTableNames)
	{
		var masterTable    = tables.First(t => t.ID == masterTableID);
		var masterColumn   = masterTable.Columns.First(c => c.ColumnName == columnName);
		var oneToOneTables = new HashSet<string>(oneToOneTableNames);

		foreach (var t in tables)
		{
			if (t != masterTable && filter(t))
			{
				var column = t.Columns.FirstOrDefault(c => c.ColumnName == columnName);

				if (column != null)
				{
					var isOneToOneTables = oneToOneTables.Contains(t.TableName!);

					var backReference = new ForeignKeySchema
					{
						KeyName         = t.TableName!,
						OtherTable      = t,
						ThisColumns     = new (new[] { masterColumn }),
						OtherColumns    = new (new[] { column }),
						CanBeNull       = true,
						MemberName      = t.TypeName,
						AssociationType = isOneToOneTables
							? LinqToDB.SchemaProvider.AssociationType.OneToOne
							: LinqToDB.SchemaProvider.AssociationType.OneToMany,
					};

					masterTable.ForeignKeys.Add(backReference);

					t.ForeignKeys.Add(new()
					{
						KeyName         = masterTable.TableName!,
						OtherTable      = masterTable,
						ThisColumns     = new (new[] { column }),
						OtherColumns    = new (new[] { masterColumn }),
						CanBeNull       = false,
						MemberName      = memberName,
						BackReference   = backReference,
						AssociationType = isOneToOneTables
							? LinqToDB.SchemaProvider.AssociationType.OneToOne
							: LinqToDB.SchemaProvider.AssociationType.ManyToOne,
					});
				}
			}
		}
	}

	var dbc = (System.Data.Common.DbConnection)dataConnection.Connection;

	return new()
	{
		DataSource      = dbc.DataSource!,
		Database        = dbc.Database,
		ServerVersion   = dbc.ServerVersion!,
		Tables          = tables,
		Procedures      = new(),
		DataTypesSchema = new(),
	};
}
#>
