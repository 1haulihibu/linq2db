
//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by ToExpression.tt template.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Linq.Expressions;

namespace LinqToDB
{
	static class GeneratedExpressions
	{
		public static Expression<Func<object>> GetNullField(Type type)
		{
			return Expression.Lambda<Func<object>>(
				Expression.Convert(
					Expression.Field(
						null,
						type,
						"Null"),
					typeof(object)));
		}

		public static Expression<Action> Firebird_ClearAllPools(Type type)
		{
			return Expression.Lambda<Action>(
				Expression.Call(
					type,
					"ClearAllPools",
					new Type[0],
					new Expression[0]));
		}

		public static Expression<Func<TimeSpan,object>> Informix_NewIfxTimeSpan(Type type)
		{
			var p0 = Expression.Parameter(typeof(TimeSpan), "ts");

			return Expression.Lambda<Func<TimeSpan,object>>(
				Expression.Convert(
					Expression.New(
#if NETCOREAPP1_0 || NETCOREAPP1_1 || NETCOREAPP2_0 || NETSTANDARD1_0 || NETSTANDARD1_1 || NETSTANDARD1_2 || NETSTANDARD1_3 || NETSTANDARD1_4 || NETSTANDARD1_5 || NETSTANDARD1_6 || NETSTANDARD1_6
						type.GetTypeInfo().GetConstructor(new[] { typeof(TimeSpan) }),
#else
						type.GetConstructor(new[] { typeof(TimeSpan) }),
#endif
						new Expression[]
						{
							p0
						}),
					typeof(object)),
				new ParameterExpression[]
				{
					p0
				});
		}

		public static Expression<Action<string>> SQLite_CreateFile(Type type)
		{
			var p0 = Expression.Parameter(typeof(string), "dbFile");

			return Expression.Lambda<Action<string>>(
				Expression.Call(
					type,
					"CreateFile",
					new Type[0],
					new Expression[]
					{
						p0
					}),
				new ParameterExpression[]
				{
					p0
				});
		}

		public static LambdaExpression PostgeSQL_GetProviderSpecificValue(Type rangeType, string dbType)
		{
			var p0 = Expression.Parameter(rangeType, "r");

			return Expression.Lambda(
				Expression.New(
#if NETCOREAPP1_0 || NETCOREAPP1_1 || NETCOREAPP2_0 || NETSTANDARD1_0 || NETSTANDARD1_1 || NETSTANDARD1_2 || NETSTANDARD1_3 || NETSTANDARD1_4 || NETSTANDARD1_5 || NETSTANDARD1_6 || NETSTANDARD1_6
					typeof(LinqToDB.Data.DataParameter).GetTypeInfo().GetConstructor(new[] { typeof(string), typeof(object), typeof(LinqToDB.DataType), typeof(string) }),
#else
					typeof(LinqToDB.Data.DataParameter).GetConstructor(new[] { typeof(string), typeof(object), typeof(LinqToDB.DataType), typeof(string) }),
#endif
					new Expression[]
					{
						Expression.Constant("", typeof(string)),
						Expression.Convert(
							p0,
							typeof(object)),
						Expression.Constant(LinqToDB.DataType.Undefined, typeof(LinqToDB.DataType)),
						Expression.Constant(dbType, typeof(string))
					}),
				new ParameterExpression[]
				{
					p0
				});
		}

	}
}
