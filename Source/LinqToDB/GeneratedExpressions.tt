<#@ template language="C#" debug="True" hostSpecific="True"               #>
<#@ output extension=".generated.cs"                                      #>
<#@ assembly name="System.Data" #>
<#@ assembly name="$(SolutionDir)Tests\Linq\bin\Debug\net46\IBM.Data.DB2.dll" #>
<#@ assembly name="$(SolutionDir)Tests\Linq\bin\Debug\net46\FirebirdSql.Data.FirebirdClient.dll" #>
<#@ assembly name="$(SolutionDir)Tests\Linq\bin\Debug\net46\IBM.Data.Informix.dll" #>
<#@ assembly name="$(SolutionDir)Tests\Linq\bin\Debug\net46\System.Data.SQLite.dll" #>
<#@ assembly name="$(SolutionDir)Tests\Linq\bin\Debug\net46\Npgsql.dll" #>
<#@ assembly name="$(SolutionDir)Tests\Linq\bin\Debug\net46\linq2db.dll" #>
<#@ include file="..\..\Source\LinqToDB.Templates\ToExpression.ttinclude" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="LinqToDB" #>
<#@ import namespace="LinqToDB.Data" #>
//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by ToExpression.tt template.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Linq.Expressions;

namespace LinqToDB
{
	static class GeneratedExpressions
	{
<#

	ToExpression("GetNullField(Type type)",
		(Expression<Func<object>>)(() => IBM.Data.DB2Types.DB2Int32.Null),
		s => s.Replace("typeof(IBM.Data.DB2Types.DB2Int32)", "type"));

	ToExpression("Firebird_ClearAllPools(Type type)",
		(Expression<Action>)(() => FirebirdSql.Data.FirebirdClient.FbConnection.ClearAllPools()),
		s => s.Replace("typeof(FirebirdSql.Data.FirebirdClient.FbConnection)", "type"));

	ToExpression("Informix_NewIfxTimeSpan(Type type)",
		(Expression<Func<TimeSpan,object>>)(ts => new IBM.Data.Informix.IfxTimeSpan(ts)),
		s => s.Replace("typeof(IBM.Data.Informix.IfxTimeSpan)", "type"));

	ToExpression("SQLite_CreateFile(Type type)",
		(Expression<Action<string>>)(dbFile => System.Data.SQLite.SQLiteConnection.CreateFile(dbFile)),
		s => s.Replace("typeof(Data.SQLite.SQLiteConnection)", "type"));

	ToExpression("PostgeSQL_GetProviderSpecificValue(Type rangeType, string dbType)",
		(Expression<Func<NpgsqlTypes.NpgsqlRange<int>,DataParameter>>)(r => new DataParameter("", r, DataType.Undefined, "replaceToDbType")),
		s => s
			.Replace("Func<NpgsqlTypes.NpgsqlRange<int],LinqToDB.Data.DataParameter>", "")
			.Replace("typeof(NpgsqlTypes.NpgsqlRange<int>)", "rangeType")
		);

	GenerationEnvironment.Replace("Expression.Lambda<>", "Expression.Lambda");
	GenerationEnvironment.Replace("Expression<>", "LambdaExpression");
	GenerationEnvironment.Replace("\"replaceToDbType\"", "dbType");
#>
	}
}
